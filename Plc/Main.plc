*******************************************************************************
*   MAIN.PLC
*   ESAutomotion
*   LASER machine
*******************************************************************************
#funcdec "assi.plc"
#funcdec "canfb.plc"
#funcdec "cnc.plc"
#funcdec "mand.plc"
#funcdec "manrev.plc"
#funcdec "FLP.plc"
#funcdec "DynMng.plc"
#funcdec "Datainterp.plc"
#funcdec "Rampa.plc"
#funcdec "resmach.plc"

#funcdec "SetVasca.plc"
#funcdec "LsrGest.plc"
#funcdec "WorkList.plc"
#funcdec "IO_TEST.plc"
#funcdec "CopyPar.plc"
#funcdec "mac_func.plc"
#funcdec "RToolSur.plc"
#funcdec "MoveAxis.plc"
#funcdec "MovAxVar.plc"
#funcdec "Antictrl.plc"

VAR
#include "assi.inc"
#include "cnc.inc"
#include "RemContr.inc"
END_VAR

#include "iol.inc"
#include "usrMem.inc"

VAR
GSTMAC:         GESTTM;
CH0END:         GESTCHEND;
CH3END:         GESTCHEND;
CH5END:         GESTCHEND;
MACCEND:        GESTTMEND;
SEL_ASSE:       DEC_SEL_ASSE;
GESTCH0:        GESTCH;
GESTCH3:        GESTCH;
GESTCH5:        GESTCH;
AXLSREF9:       AX_LS_REF;
AXLSREF27:      AX_LS_REF;
AXLSREF28:      AX_LS_REF;
AXLSREF29:      AX_LS_REF;
AXLSREF30:      AX_LS_REF;
AXLSREF31:      AX_LS_REF;
AXLSREF36:      AX_LS_REF;
AXLSREF32:      AX_LS_REF;
AXLSREF33:      AX_LS_REF;
AXLSREF34:      AX_LS_REF;
AXLSREF50:      AX_LS_REF;
AXLSREF51:      AX_LS_REF;
AXLSREF52:      AX_LS_REF;
AXLSREF53:      AX_LS_REF;
AXLSREF54:      AX_LS_REF;
AXLSREF55:      AX_LS_REF;
AXLSREF56:      AX_LS_REF;
AXLSREF57:      AX_LS_REF;
AXLSREF58:      AX_LS_REF;

GESTAX0:        GESTAX;
GESTAX1:        GESTAX;
GESTAX2:        GESTAX;
GESTAX3:        GESTAX;
GESTAX4:        GESTAX;
GESTAX5:        GESTAX;
GESTAX6:        GESTAX;
GESTAX7:        GESTAX;
GESTAX9:        GESTAX;
GESTAX27:       GESTAX;
GESTAX28:       GESTAX;
GESTAX29:       GESTAX;
GESTAX30:       GESTAX;
GESTAX31:       GESTAX;
GESTAX32:       GESTAX;
GESTAX33:       GESTAX;          
GESTAX34:       GESTAX;
GESTAX36:       GESTAX;
GESTAX50:       GESTAX;
GESTAX52:       GESTAX;
GESTAX51:       GESTAX;
GESTAX53:       GESTAX;
GESTAX54:       GESTAX;
GESTAX55:       GESTAX;
GESTAX56:       GESTAX;
GESTAX57:       GESTAX;
GESTAX58:       GESTAX;
GESTMAND:       GESTSPE;

Feed:           OVERRIDE; 
Op_Mode0:       OP_MODE;        
REGOLA_LSR1_NEW:    REG_T_S;
CALC_INTSPEED:      CALC_INTERP_SPEED;
CALC_INTSPEED_2:    CALC_INTERP_SPEED;
CALC_INTSPEED_3:    CALC_INTERP_SPEED;
INTDATACALC_ANGLE:  LSRDATACALC_ANGLE;
CALC_PERCSPEED: PERC_CALC;
CALC_GEN_LINEARF1:  LSR_GEN_LIN_INTERP;
CALC_PERCSPEED_2:   PERC_CALC;
CALC_PERCSPEED_3:   PERC_CALC;
GEAR_C_C1:      AX_GEARING;   
GEAR_C_C2:      AX_GEARING; 
spindle_geared: BOOL;          * axes gearing enable from function block 
spindle_geared_C2: BOOL;       * axes gearing enable from function block 
TON_GEAR_C_C1:  TON;
TON_GEAR_C_C2:  TON;
TRIG_GEAR_C_C1: TRIG;
TRIG_GEAR_C_C2: TRIG;
RTRIG_PON:      R_TRIG;
RTRIG_PON_C2:      R_TRIG;
RTRIG_man_ali:  R_TRIG;
RTRIG_man_ali_C2:  R_TRIG;
start_alignment: BOOL;
start_alignment_C2: BOOL;
TRIG_FEED:      TRIG;

*--------- POSITIONING    
AX9_CAN:        AX_FROM_ISO;
AX9_CAN_AUX:    AX_CMD_AUX; 
*--------- POSITIONING 

Spindle_SafePark: BOOL;
MOVE_AXIS30:      MOVE_AXIS;
TP_EndPos_U:      TP;
MOVE_AXIS34:      MOVE_AXIS;

TP_EndPos_C:      TP;
R_TRIG_U_PARK:    R_TRIG;
R_TRIG_C_PARK:    R_TRIG;
R_TRIG_INIT:      R_TRIG;

POS_AX9:        AX_POSIZ;
POS_AX57:       AX_POSIZ;
POS_AX58:       AX_POSIZ;

RTRIG_RES_FOC:  R_TRIG;

BlckM30000_CN3:    BOOL;       * Blocco M30000_CN3 con Z_Z1 selezionati
M30010_CN3_4:      BOOL;       * Blocco M30010_CN3_CN4 con Z_Z1 selezionati
M30011_CN3_4:      BOOL;       * Blocco M30011_CN3_CN4 con Z_Z1 selezionati

cmd_c_c1_gear_run: BOOL;      * C-C1 gearing in progress   
cmd_c_c2_gear_run: BOOL;      * C-C2 gearing in progress    
Appoggio:          BOOL;      * Appoggio
appoggio:          BOOL;      * Appoggio
Manual_align:      BOOL;
CondHoldCN0:       BOOL;      * Condizioni richiesta hold canale 0
DrivesOk:          BOOL;      * Drives Ok
Macch_Ok:          BOOL;      * Macchina Ok
StartEnab:         BOOL;      * Abilitazione start
StartEnabAut:      BOOL;      * Abilitazione start in Automatico
AwaitStart:        BOOL;      * Attesa Start
RestartOk:         BOOL;      * Restart Ok (M10)
EnabJogRTCP:       BOOL;      * Abilita Jog RTCP
EabStartCnAux:     BOOL;      * Abilitazione Start per canali ausiliari
M9999:             BOOL;      * M9999: Abilitazione Start pae Canali Ausiliari
M32TglMan:         BOOL;      * M32: Attesa inizio taglio manuale
UnlockCn0funzReq:  BOOL;      * Sblocco richiesta servizio da CN0 [(M10000 iniziolav.) / M10001(finelav.)]
AxesHeadNoZeroed:  BOOL;      * Assi Testa non riferiti

MoveByUser:        BOOL;      
TRIG_MOV_REQ:      TRIG;

RTRIG_CAR_DB:      R_TRIG;     * Trig on upload DB request
Up_Load_DB:        BOOL;      * upload DB request

Pon_ax30:          BOOL;      * PON Axe U (30)
Pon_WLens:         BOOL;      * PON Axe W_Lens
Pon_XT1:           BOOL;      * PON Axe X_T1
Pon_YT1:           BOOL;      * PON Axe Y_T1
Pon_ZT1:           BOOL;      * PON Axe Y_T1
Pon_C:             BOOL;      * PON Axe C  
Pon_C1:            BOOL;      * PON Axe C1
Pon_C2:            BOOL;      * PON Axe C2
Pon_A:             BOOL;      * PON Axe A
Pon_B:             BOOL;      * PON Axe B
Pon_PIPE:          BOOL;      * PON Axe PIPE pipe axis
Pon_ax31:          BOOL;      * PON Axe V (31)
Pon_ax36:          BOOL;      * PON Axe W (36)
Pon_Mand:          BOOL;      * PON
Pon_Z_Follow:      BOOL;      ** PON Axe Z follower
Pon_Z_Follow2:      BOOL;      ** PON Axe Z follower
Pon_Z_Follow3:      BOOL;      ** PON Axe Z follower
Pon_Z_Follow4:      BOOL;      ** PON Axe Z follower
AllDriveEnable:    BOOL;      * All drives are enabled

Supp_51_GoUp:    BOOL;
Supp_52_GoUp:    BOOL;
Supp_53_GoUp:    BOOL;

memResHold:        BOOL;      * mem.richiesta RESET HOLD
RetraceEnab:       BOOL;      * Retrace abilitato
StopRetrAv:        BOOL;      * Stop Retrace avanti
StopRetrInd:       BOOL;      * Stop Retrace indietro
M7000_RETR:        BOOL;      * M7000: Retrace enable
M8000_RETR:        BOOL;      * M8000: Retrace disable
M600_G81_84:       BOOL;      * Richiesta Sblocco M40000_CN4: Richiesta Servizio per Unit_2]
*******************************************************************************

*******************************************************************************
*   @@@ RICERCA BLOCCO
*******************************************************************************
StartStateBSearch1: BOOL;       *
StartStateBSearch2: BOOL;       *
StartAutoRicBlc:    BOOL;       * Start automatico dopo ricerca blocco
AbortRicBlc:        BOOL;      * Abort ricerca blocco
BLKSRC_RUN:         BOOL;      * Ricerca blocco in corso
BLKSRC_END:         BOOL;      * Ricerca blocco terminata
R_TRIGA:            R_TRIG;    * Fronte Up Ricerca blocco in corso
F_TRIGA:            F_TRIG;     * Fronte Down Ricerca blocco in corso
F_TRIGQ:            F_TRIG;    * Fronte Dwn Ricerca blocco in corso
R_TRIG_SBS1:        R_TRIG;     *
TP_AbortRicBlc:     TP;         * Abort ricerca blocco
TP_START_BSEARCH1:  TP;
locX:               DWORD;      * Used in block search (ricerca blocco)
locY:               DWORD;      * Used in block search (ricerca blocco)
XactualQta:         DWORD;      * X actual quota Used in block search (ricerca blocco)
YactualQta:         DWORD;      * Y actual quota Used in block search (ricerca blocco)

R_TRIG_1SEC:        R_TRIG;    * Cadenza di 1 secondo
R_TRIG_M30000CN3:   R_TRIG;    * Fronte Up M30000CN3
R_TRIG_M30000CN4:   R_TRIG;    * Fronte Up M30000CN4
R_TRIG_Stop:        R_TRIG;    * Fronte Up Pul Stop
R_TRIGAux:          R_TRIG;    * Fronte Up START per funzioni ausiliarie (1000.pgm)
RT_AuxMode:         R_TRIG;    *(gPlc0.29)Fronte Up Esecuzione ausiliaria (1000.pgm)
TON0:               TON;       * Filtro su programma interrotto in caso di esecuzione "DryRun"
TOF1:               TOF;       * Filtro su Pulsante start
RETAIN ORIG_ATT:    DWORD;
RT_PRGRUN:          R_TRIG;    * Up Programma in corso
FT_PRGRUN:          F_TRIG;    * Dwn Programma in corso
FT_PRGSTOP:         F_TRIG;    * Programma interrotto
RT_POT:             R_TRIG;    * Potenza a regime
TRIG3:              TRIG;
TRIG4:              TRIG;
TRIG_SET_ROT_ORIG:  TRIG;       * TRIG on set rotate origin
TRIG8:              TRIG;
TRIG1000_0:         TRIG;
TRIG1000_1:         TRIG;
TRIG1000_3:         TRIG;
TRIG1000_5:         TRIG;
TRIG1000_6:         TRIG;
TRIG1000_8:         TRIG;
TRIG1000_7:         TRIG;
TRIG1000_10:        TRIG;
TRIG1000_11:        TRIG;
TRIG1000_15:        TRIG;
RTRIG1000_12:       R_TRIG;
RTRIG1000_13:       R_TRIG;
RTRIG1000_14:       R_TRIG;
RTRIG10:            R_TRIG;
RTRIG9:             R_TRIG;
RT_M10:             R_TRIG;    * M10: Attiva Hold + Jog
RT_ZEROED:          R_TRIG;    * Assi tarati
TRIG_RTCPT:         TRIG;      * Jog tuning RTCP (UI)
R_TRIG30000:        R_TRIG;    * FronteUp Sblocco Richiesta servizio per Unit_1
R_TRIG10000:        R_TRIG;    ** FronteUp M10000_CN0: Invoca Unit_1 (inizialavorazione)
R_TRIG10001:        R_TRIG;    ** Fronteup M10001_CN0: Invoca Unit_1 (finelavorazione)
F_TRIG10000:        F_TRIG;    ** FronteDwn M10000_CN0: Invoca Unit_1 (inizialavorazione)
F_TRIG10001:        F_TRIG;    ** FronteDwn M10001_CN0: Invoca Unit_1 (finelavorazione)
TR_PRES_B:          TRIG;      **(gGui0.4)Richiesta Preset asse Tubo
TR_PRES_C:          TRIG;      **(gGui0.4)Richiesta Preset asse Tubo
R_TRIG_HOLD:        R_TRIG;    * (cn0.rc8.1)Fronte UP Programma interrotto CN0
TP_0:               TP;        * Impulso sblocco M20000 / M20001
TP_1:               TP;        * Impulso sblocco M40000
TP_RESET:           TP;        * Reset
TP_MALARM:          TP;        * Assi in allarme

TON_NOJOG:          TON;       * Assi fermi (Interblocco MatJog)
TON_ERRC0:          TON;       * Canale 0 in blocco
TON_POTREG:         TON;       * Potenza a regime
TON_ABIL:           TON;       * Abilitazione drives
TON_AXSTOP:         TON;       * Assi fermi
TON_PON:            TON;       * Manca potenza Drives
TOF_RESET:          TOF;       * Reset
TOF_MALARM:         TOF;       * Assi in allarme
TOF_0:              TOF;
StopINC:            BOOL;
EmerINC:            BOOL;
WORK_LIST_MAIN:     WORK_LIST;

*Lead in low speed function
speed_red_enable:          BOOL;                 * request to reduce speed for lead-in    
ReducPercValue:           DWORD;         * Percentual value for feedrate reduction        
ForceLowFeed:              BOOL;         *force low speed variable                        
speedLeadIn:              DWORD;        * speed request for lead in                       
disLeadIn:                DWORD;         * distance for lead in working table             
feed100perc:              DWORD;         * maximum feed to reach after lead-in            

interpInitSpace:          DWORD;         * initial position of interpolator               
Risultato1:         DWORD;
Risultato2:         DWORD;
Risultato3:         DWORD;
Risultato4:         DWORD;
SpaceStartX:        DWORD;
SpaceStartY:        DWORD;
SpaceStartZ:        DWORD;

RTRIG_MEMSPACE:          R_TRIG;                                                          
FTRIG_ForceLowSpeed:     F_TRIG;                                                          
RTRIG_RED_SPEED:         R_TRIG;
RTRIG_REM_FEED:          R_TRIG;                                                       

UiplPagePrec:             DWORD;          ** Uipl.Page previous

* Verify
RTRIG_PRGSEL:           R_TRIG;         ** Impulso caricamento programma
RTRIG_GRAPH_ON:         R_TRIG;         ** Impulso tracciatura grafica in corso
FTRIG_GRAPH_ON:         F_TRIG;         ** Impulso fine tracciatura grafica
VerifyStat2:              BOOL;
VerifyStat1:              BOOL;

RTRG_MATC:              R_TRIG;         * RTRIG MatXount

RTRIG_MOVE_REM_CONTR:   R_TRIG;      
MoveAtZero:               BOOL;        * Remote controller command
FTRIG_POT:              F_TRIG;                            
TP_FTRIG_POT:               TP;
TP_PRGOFF:                  TP;
TP_PRGOFF_GEAR:             TP;

* Refresh graph command
RT_Command:         R_TRIG;   
RT_Cool_pt:         R_TRIG;  
FT_Cool_pt:         F_TRIG;
TON_RES_REQ:        TON;
*

R_TRIG_PG_RUN:      R_TRIG;
TON_M30_RES:        TON;

***
*SAFETY FOR G800
TON_SAFETY:         TON;      
TON_HOLD_AX:        TON;
TON_CN0_HOLD:        TON;
TOF_GRANT_AX9:      TOF;
TOF_RESET_GEAR:      TOF;

PowerOnTime:        DWORD;          * Power-on timer
DriveOkTime:        DWORD;          * Drive ok timer

ActualAxisSpeed:    DWORD;          * for interpolation speed (temp)
*ChannelFeedrate:    DWORD;          * feedrate for channel
JOGrunning:         BOOL;           * One axis moving in JOG
REFrunning:         BOOL;           * One axis moving in REF
INCrunning:         BOOL;           * One axis moving in INC

RTRIG_AX_SEL27:     R_TRIG;      
RTRIG_AX_SEL28:     R_TRIG;      
RTRIG_AX_SEL29:     R_TRIG;      
RTRIG_AX_SEL30:     R_TRIG;      
RTRIG_AX_SEL31:     R_TRIG;   
RTRIG_AX_SEL32:     R_TRIG;      
RTRIG_AX_SEL33:     R_TRIG;      
RTRIG_AX_SEL34:     R_TRIG;   
RTRIG_AX_SEL36:     R_TRIG;
RTRIG_AX_SEL51:     R_TRIG;      
RTRIG_AX_SEL52:     R_TRIG; 
RTRIG_AX_SEL53:     R_TRIG;    
RTRIG_AX_SEL54:     R_TRIG;      
RTRIG_AX_SEL55:     R_TRIG;  
RTRIG_AX_SEL56:     R_TRIG;  
RTRIG_AX_SEL57:     R_TRIG;  
RTRIG_AX_SEL58:     R_TRIG;  

temp:               DWORD;
alarm_tool_surface: BOOL;
alarm_motion_cmd_err: BOOL;
SpeedControl12:         DWORD;
SpeedControl23:         DWORD;
SpeedControl34:         DWORD;
SpeedControl45:         DWORD;
SpeedControl56:         DWORD;
ToleranceTime:         DWORD;
TotalPiercTime:       DWORD;
TimePerc:             DWORD;
TON_EMERG_PIERC:      TON;

RTRIG_TIPTOUCH:     R_TRIG;    

* JOG ENABLE MEM
TRIG_JOGENAB:       R_TRIG;      
JOG_EN:                 FF;

TON_WAIT_ECAT:          TON;
RTRIG_FIRSTSCAN:     R_TRIG;
TOF_NOWAIT_AFT_COMPILE: TOF;

RTRIG_RFSH_PAGE:    R_TRIG;
RTRIG_RFSH_PAGEFB:  R_TRIG;
R_TRIG_RANGE_1:     R_TRIG;
R_TRIG_RANGE_2:     R_TRIG;
R_TRIG_RANGE_3:     R_TRIG;
R_TRIG_RANGE_4:     R_TRIG;
R_TRIG_RANGE_5:     R_TRIG;
R_TRIG_RANGE_6:     R_TRIG;
TP_CpyW:           TP;
R_TRIG_Freeze:      R_TRIG;  

TP_HOLD_RAMP:           TP;
TP_START_RAMP:          TP;

FeedRamp:             RAMP;

END_VAR


VAR_IN_OUT

#include "mem.inc"
#include "usrIol.inc"

plc_PEZZO           AT %PEZZO;                      * PEZZO
plc_GEOMETRIA       AT %GEOMETRIA;                  * GEOMETRIA
BUP_BLKSRC_PAGE     AT %ui16.24;                    * User in block search page
MAINFAST_SIM        AT %M33;                        * MainFast.plc simulation or real
CMD_CHCOMP          AT %CompData0;                  * Comando canale computazionale
GRAPH_RFSH          AT %ui0.7;                      * Rinfresco grafica
PLC_BPU_ENCOLDATA   AT %ui0.31;                     * ui0.31 Abilita quote per collimazione ricerca blocco
ActualQtaAbsRef     AT %pa18;                       * Absolute homing quota
QtaRefAbsSet        AT %LsPlc50;                    * Absolute homing quota setting
Unlock_Channels     AT %rg20;
UI_TAB_PDF          AT %LsGui40;                    * UI: TAB dati in funzione velocit?(default =duty)
UI_TAB_CDL          AT %LsGui39;                    * UI: TAB per tabelle dati interpolati per bevel (default = potenza)
UI_TAB_PIERCING     AT %rGui11;                     * UI: TAB per dati di percing (default = P1)
END_VAR


*******************************************************************************
FUNCTION MAIN
*******************************************************************************
REFPATH %cn2-8
REFPATH %ax0-75
REFPATH %funz0-19
REFPATH %ced0-9
REFPATH %uxh0-1

LD    %ecat_ring.ec_status.31     * for compiling
AND   %PLCFLAGS.8
ST    appoggio

CAL  TOF_NOWAIT_AFT_COMPILE (IN:=appoggio,PT:=6000)
CAL  TON_WAIT_ECAT (IN:=%ecat_ring.ec_status.31,PT:=5000)

LD   TON_WAIT_ECAT.Q
OR   LINK_SIMUL
OR   %M42.0
OR   TOF_NOWAIT_AFT_COMPILE.Q
ST   appoggio

CAL  RTRIG_FIRSTSCAN (CLK:=appoggio)

LD   RTRIG_FIRSTSCAN.Q
ST   ON_ONE_SCAN
ST   %PLCerr21.31

LD   appoggio
JMPCN NO_EXECUTE_PLC

*******************************************************************************
*   Inizializzazioni
*******************************************************************************
CAL  RT_PRGRUN(CLK=PRGRUN_CN0)     ** Up Programma in corso
CAL  FT_PRGRUN(CLK=PRGRUN_CN0)     ** Dwn Programma in corso
CAL  FT_PRGSTOP(CLK=PRGSTOP_CN0)   ** Programma interrotto

LDN  PRGRUN_CN0                    ** (M0.0)cn0.rc8.0  Programma in corso
ST   appoggio
CAL  TP_PRGOFF(IN=appoggio,PT=800)

LD   RT_PRGRUN.Q
OR   FT_PRGRUN.Q
JMPCN NoInitMain

LD   ALWAYS_ZERO
ST   CALIBRATION_CHECK              ** (C26.0) Calibration control in run    
ST   CAP_LINEAR_RUN                 ** (C26.2) Linearizzazione capacitivo in esecuzione
ST   ISOTipTouchDisable             ** (C26.3) Disabilita tip touch da ISO

NoInitMain:

LD   ON_ONE_SCAN                    ** PLCFLAGS.8  Flag on alla prima scansione PLC
JMPCN NoFirtsScan

LD   0
ST   MAINFAST_SIM                  ** MainFast.plc simulation or real

LD   1
ST   UI_TAB_PDF                 * UI: TAB dati in funzione velocit?(default =duty)
ST   UI_TAB_CDL                 * UI: TAB per tabelle dati interpolati per bevel (default = potenza)
ST   UI_TAB_PIERCING

NoFirtsScan:

LDN  PRGRUN_CN0          	         ** M0.0 cn0.rc8.0  Programma in corso
JMPCN RESVARLASER

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   VerNozzlelost                 ** (TstP15.0) Verifica NOZZLE LOST
ST   LaserOn_REQ                   ** (TstP15.3) (LASER_ON)
ST   INP_flyCutModeON              ** application turn flyCut mode ON
ST   INP_rasterModeON              ** application turn raster mode ON
ST   EnValOut1                     ** (TstP14.14) Abilita Attuazione Valori Uscite
ST   EnValOut2                     ** (TstP14.15) Abilita Attuazione Valori Uscite
ST   EnValOut1_G834
ST   EnValOut2_G834


RESVARLASER:
LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   JOGrunning                    ** One axis moving in JOG
ST   REFrunning                    ** One axis moving in REF
ST   INCrunning                    ** One axis moving in INC

LD   3                          * LASER TECH FIXED !!!
ST   TecUsedGui                    ** (rPlc1)Variabile passata a Monitor.ini per lancio Sinottico (0=Pls, 1=Thc, 2=Oxi, 3=Laser, 4=Wtj, 5=pls_am)
ST   TecUsedIso                    ** (rPlc2)Variabile a ISO(3333.pgm) per selezione tecnologia(1=Pls, 2=Oxi, 3=Wtj, 4=Laser)

LD   RT_PRGRUN.Q
OR   FT_PRGRUN.Q
JMPCN NoInitVar1

LD   0
ST   DisabFir_CH0_axes
ST   DisabFir_CH3_axes

LD   ALWAYS_ZERO
ST   DisabTipTouch

NoInitVar1:

********************************************************************************
* All axes are absolute bit
LD   %ax27.nvel14.0
AND  %ax28.nvel14.0
AND  %ax29.nvel14.0
AND  %ax30.nvel14.0
ST   AxesAreAbsolute               ** (LsPlc47.19) All axes are absolute
*********************************************************************************

*******************************************************************************
*   Sw version
*******************************************************************************
LD   393
ST   %VER_VERSION        * Versione software applicativo

LD   1
ST   %REL_VERSION        * Release software applicativo

LD   0
ST   %MODA_VERSION       * Modificatore 1 software applicativo

LD   0
ST   %MODB_VERSION       * Modificatore 2 software applicativo

*** PLC
LD   1
ST   %PLCVERS            * Versione programma plc

LD   0
ST   %PLCREL             * Release programma plc

*** ISO
LD   1
ST   %ISOVERS            * Versione Part Program ISO

LD   0
ST   %ISOREL             * Release Part Program ISO

***************************************
* Identificazione testa 3/5 assi
***************************************
LD  %twi1.htwi.oarh.yECAx * Attuatore rotazione intorno all'asse Z
EQ  8
AND(
LD  %twi1.htwi.oarh.yEBAx * Attuatore rotazione intorno all'asse Y
EQ  0
)
ST  Gest5Ax                        ** (gPlc0.0)Gestione MAcchina 5 assi

NoFirtsScan1:

*******************************************************************************
*INIT  USER MANAGEMENT
*******************************************************************************
*Gestione logica iniziale USR
USR_INIT
*Gestione Input e segnali USR->ESA
#ifndef SIM_IO
INP_CONFIG
#endif

*******************************************************************************
* Reset Machine Function

MACHINE_RESET

*******************************************************************************
* Safety for G800 to avoid problem with AWAIT(%C122.0)

CAL  TON_SAFETY(IN:=SafetyForG800,PT:=2000) ** Safety for regulation active without reach the setpoint

LD   TON_SAFETY.Q       
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %PLCerr0.26                                          * Time-out to reach capacitive tolerance

LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   ButtClearAlarm                ** (gGui23.0) Clear alarm interface push-button
OR   RemContrCancAlarm			   * Xhc_Puls.31 Clear alarm  
JMPCN no_res_error

LD   0
ST   SafetyForG800                 ** Safety for regulation active without reach the setpoint

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
R    %PLCerr0.26                                          * Time-out to reach capacitive tolerance
no_res_error:

LD   0
ST   SpeedControl12
ST   SpeedControl23
ST   SpeedControl34
ST   SpeedControl45
ST   SpeedControl56

LD   %TabLsr2.L_SourceInt16.1
JMPCN SpeedControl1

LD   %TabLsr1.L_PierceHeight
SUB  %TabLsr2.L_PierceHeight
ABS 
MUL  60 
DIV  %TabLsr2.L_UserInt11
ST   SpeedControl12

SpeedControl1:

LD   %TabLsr3.L_SourceInt16.1
JMPCN SpeedControl2

LD   %TabLsr2.L_PierceHeight
SUB  %TabLsr3.L_PierceHeight
ABS 
MUL  60 
DIV  %TabLsr3.L_UserInt11
ST   SpeedControl23

SpeedControl2:

LD   %TabLsr4.L_SourceInt16.1
JMPCN SpeedControl3

LD   %TabLsr3.L_PierceHeight
SUB  %TabLsr4.L_PierceHeight
ABS 
MUL  60 
DIV  %TabLsr4.L_UserInt11
ST   SpeedControl34

SpeedControl3:

LD   %TabLsr5.L_SourceInt16.1
JMPCN SpeedControl4

LD   %TabLsr4.L_PierceHeight
SUB  %TabLsr5.L_PierceHeight
ABS 
MUL  60 
DIV  %TabLsr5.L_UserInt11
ST   SpeedControl45

SpeedControl4:

LD   %TabLsr6.L_SourceInt16.1
JMPCN SpeedControl5

LD   %TabLsr5.L_PierceHeight
SUB  %TabLsr6.L_PierceHeight
ABS 
MUL  60 
DIV  %TabLsr6.L_UserInt11
ST   SpeedControl56

SpeedControl5:

LD   %TabLsr1.L_PierceTime
ADD  %TabLsr2.L_PierceTime
ADD  %TabLsr3.L_PierceTime
ADD  %TabLsr4.L_PierceTime
ADD  %TabLsr5.L_PierceTime
ADD  %TabLsr6.L_PierceTime
ADD  %TabLsr1.L_SourceInt13
ADD  %TabLsr2.L_SourceInt13
ADD  %TabLsr3.L_SourceInt13
ADD  %TabLsr4.L_SourceInt13
ADD  %TabLsr5.L_SourceInt13
ADD  %TabLsr6.L_SourceInt13
ADD  SpeedControl12
ADD  SpeedControl23
ADD  SpeedControl34
ADD  SpeedControl45
ADD  SpeedControl56
ST   TotalPiercTime

LD   TotalPiercTime
LT   2000
JMPCN no_add
LD   TotalPiercTime
ADD  2000
ST   TotalPiercTime
no_add:

LD   TotalPiercTime
MUL  PercTimePierc
DIV  100
ST   TimePerc

LD   TotalPiercTime
ADD  TimePerc
ST   ToleranceTime

LD  PiercingInRun
EQ  1
AND PRGRUN_CN0
ANDN %cn0.rc8.1
ANDN %PlcOp0.2
ANDN (
LD   %TabLsr0.L_SourceInt0
GT   0
)
ST  appoggio

CAL TON_EMERG_PIERC (IN:=appoggio,PT:=ToleranceTime)

LD  TON_EMERG_PIERC.Q
S   %PLCerr0.27

LD   Pul_Reset                                            * (gPlc0.3)Reset pushbutton
OR   ButtClearAlarm                                       *(gGui22.5) Clear alarm interface push-button
JMPCN resetAlm

LD   ALWAYS_ZERO
ST   PiercingInRun

LD   ALWAYS_ONE
R    %PLCerr0.27                * Time-Out piercing                           

resetAlm:
 
*******************************************************************************
*   Visualizza SPEED interpolatore oppure speed MAN dell'asse selezionato
*******************************************************************************
LD   %ax21.ra30
MULDIV(M=60,D=1000)                  ** 60/1000
ST   VelInterpCN0                    ** (LsPlc10) A_GUI per visualizzare velicit?interpolatore CN0

*******************************************************************************
* GESTIONE SELEZIONE TESTE DI LAVORO T1 E T2
*******************************************************************************
LD   %UnitWork.uxh0.uxh_gTravT
EQ   0
R    HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata

LD   %UnitWork.uxh1.uxh_gTravT
EQ   0
R    HEADZ1SEL                     ** (gPlc13.5)Testa 2 selezionata

* Testa 1 selezionata

LD   %UnitWork.uxh0.uxh_gTravT
NE   0
AND  M10000_CN0                    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)
S    HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata

* Testa 2 selezionata

LD   %UnitWork.uxh1.uxh_gTravT
NE   0
AND  M10000_CN0                    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)
S    HEADZ1SEL                     ** (gPlc13.5)Testa 2 selezionata

* Testa Z + Z1 selezionata

LD   HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata
AND  HEADZ1SEL                     ** (gPlc13.5)Testa 2 selezionata
ST   Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata

*******************************************************************************
PATH %cn0

LD   100
ST   %cn0.rc3

* CI_COPYVEC * Copia i vettori da CN0 A CN3
LD   16#8000
ST   %cn3.rc120

* CI_COPYVEC * Copia i vettori da CN0 A CN4
LD   16#8000
ST   %cn4.rc120


*******************************************************************************
* LASER
* - velocit?interpolata filtrata
* - calcolo velocit?interpolata in percentuale rispetto a quella programmata
*   per poteza (1), per duty (2), per frequenza (3)
* - eventuale interpolazione dati per compensazione in base all'angolo
*******************************************************************************

*** 1
LD   %LsrGest0.ParIntSpeedFilt
ST   CALC_INTSPEED.xFir

LD   0
ST   CALC_INTSPEED.xNumFir

CAL  CALC_INTSPEED

LD   CALC_INTSPEED.yInterpSpeed
ST   InterpSpeedFiltered

*** 1
LD   InterpSpeedFiltered
ST   CALC_PERCSPEED.xAct

LD   %TabLsr0.L_FeedA                   * Feed for cut [mm/min]
ST   CALC_PERCSPEED.xSet

CAL  CALC_PERCSPEED

LD   CALC_PERCSPEED.yPercSpeed           * percentual value
ST   PercInterpSpeed


*** 2
*
* Calcolo della correzione sul tempo di sincronismo intervento del duty in accelerazione/decelerazione
* in dipendenza della frequenza impostata in quanto il generatore reagisce con tempi diversi proprio
* in base alla frequenza stessa
*
LD   LinearFun_freq_X1
ST   CALC_GEN_LINEARF1.x_X1

LD   LinearFun_freq_X2
ST   CALC_GEN_LINEARF1.x_X2

LD   LinearFun_tim_Y1
ST   CALC_GEN_LINEARF1.x_Y1

LD   LinearFun_tim_Y2
ST   CALC_GEN_LINEARF1.x_Y2

LD   %TabLsr0.L_CutFreq
ST   CALC_GEN_LINEARF1.x_X

LD   LinearFun_freq_REF
ST   CALC_GEN_LINEARF1.x_REF

CAL  CALC_GEN_LINEARF1

LD   CALC_GEN_LINEARF1.y_Y          * usec
SUB  CALC_GEN_LINEARF1.y_REF        * usec
ST   temp

LD   ParIntSpeedFilt_duty           * msec
MUL  1000
ADD  temp
DIV  1000
ST   temp

LD   temp
LT   0
JMPCN fir_not_zero

LD   0
ST   temp

fir_not_zero:
LD   temp
GT (
LD   ParIntSpeedFilt_duty           * msec
MUL  2
)
JMPCN fir_not_on_limit

LD   ParIntSpeedFilt_duty           * msec
ST   temp

fir_not_on_limit:
LD   temp
ST   CALC_INTSPEED_2.xFir

LD   1
ST   CALC_INTSPEED_2.xNumFir

CAL  CALC_INTSPEED_2

LD   CALC_INTSPEED_2.yInterpSpeed
ST   InterpSpeedFiltered2



*** 2
LD   InterpSpeedFiltered2
ST   CALC_PERCSPEED_2.xAct

LD   %TabLsr0.L_FeedA                   * Feed for cut [mm/min]
ST   CALC_PERCSPEED_2.xSet

CAL  CALC_PERCSPEED_2

LD   CALC_PERCSPEED_2.yPercSpeed           * percentual value
ST   PercInterpSpeed2



*** 3
LD   ParIntSpeedFilt_freq
ST   CALC_INTSPEED_3.xFir

LD   2
ST   CALC_INTSPEED_3.xNumFir

CAL  CALC_INTSPEED_3

LD   CALC_INTSPEED_3.yInterpSpeed
ST   InterpSpeedFiltered3

*** 3
LD   InterpSpeedFiltered3
ST   CALC_PERCSPEED_3.xAct

LD   %TabLsr0.L_FeedA                   * Feed for cut [mm/min]
ST   CALC_PERCSPEED_3.xSet

CAL  CALC_PERCSPEED_3

LD   CALC_PERCSPEED_3.yPercSpeed           * percentual value
ST   PercInterpSpeed3

*******************************************************************************
* Dynamic Tool & Surface Angle Parameters
* (The function should be used only in case of bevel because of 30010)
*******************************************************************************
LD   %LSRPlcOp0.3
AND  Gest5Ax
JMPCN with_dynamicAngle

LD   CurrentLineExecute            ** (LsIso11) Current cutting line parameter to execute 
ST   INTDATACALC_ANGLE.xCutLineInd

LD   bevAngleHead1_calc1
ST   INTDATACALC_ANGLE.xAngle

CAL  INTDATACALC_ANGLE

LD   INTDATACALC_ANGLE.yCutPower
ST   %TsCutDataLinear.CDL_Power
LD   INTDATACALC_ANGLE.yCutDuty
ST   %TsCutDataLinear.CDL_Duty
LD   INTDATACALC_ANGLE.yCutFocal
ST   %TsCutDataLinear.CDL_Focal
LD   INTDATACALC_ANGLE.yCutCuth
ST   %TsCutDataLinear.CDL_CutHeight
LD   INTDATACALC_ANGLE.yCutGas
ST   %TsCutDataLinear.CDL_Pressure
with_dynamicAngle:

LDN  %LSRPlcOp0.3
ORN  Gest5Ax
JMPCN no_dynamicAngle
LD   0
ST   %TsCutDataLinear.CDL_Power
ST   %TsCutDataLinear.CDL_Duty
ST   %TsCutDataLinear.CDL_Focal
ST   %TsCutDataLinear.CDL_CutHeight
ST   %TsCutDataLinear.CDL_Pressure
no_dynamicAngle:

*******************************************************************************
* PLC User overwriting inputs
*******************************************************************************
LASER_IN
COPYPAR     * copy axes parameters

*******************************************************************************
* Gestione pulsanti / ingressi relativi
*******************************************************************************
GEN_BUTTONS

*** HoldReqAUTO utilizzato nel 3333.pgm
LD   StopCycleUserReq              ** (gPlc13.16) Richiesta STOP ciclo da Logica "User.plc"
OR   StopUsrPlc                    ** (gPlc2.22)Richiesta STOP da User_Plc
OR(
LD   AuxFaseEnd                    ** cn0.rc8.24 Fase Posizionamento AuxComand Terminata
AND  RICBLOCCO                     ** (gPlc2.19)Comando Ricerca Blocco
)
ST   appoggio                      ** Appoggio

CAL  R_TRIG_Stop(CLK=appoggio)     ** Fronte Up Pul Stop

LD   R_TRIG_Stop.Q       ** Fronte Up Pul Stop
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    HoldReqAUTO                   ** (gPlc2.12)Mem. Richiesta HOLD in Automatico

LDN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   FT_PRGSTOP.Q                  ** Programma interrotto
R    HoldReqAUTO                   ** (gPlc2.12)Mem. Richiesta HOLD in Automatico

***********************************
* RESET
***********************************
*** For m30 managment
LD   PRGRUN_CN0_END                ** M0.4 Programma su canale 0 terminato con M30
AND  PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
AND  PRGSTOP_CN3                   ** (cn3.rc8.1)  Programma interrotto CN3
ST   appoggio                      ** Appoggio

CAL  R_TRIG_PG_RUN (CLK:=PRGRUN_CN0_END) ** M0.4 Programma su canale 0 terminato con M30
CAL  TON_M30_RES (IN:=appoggio,PT:=300) ** Appoggio
CAL  RT_POT(CLK=TON_POTREG.Q)      ** Potenza a regime

LD   TON_M30_RES.Q
OR   R_TRIG_PG_RUN.Q               ** Need reset to unlock gearing virtual_real_axes
OR   RT_POT.Q
OR   EmerINC
ST   Appoggio                      ** Appoggio

CAL  TP_RESET(IN=Appoggio, PT=100) ** Reset

LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   TP_RESET.Q          * Reset
OR   ResetCycleUserReq             ** (gPlc13.17) Richiesta RESET ciclo da Logica "User.plc"
ST   appoggio                      ** Appoggio
ST   ResetMach                     ** (gPlc25.4) reset macchina

CAL  TOF_RESET(IN=appoggio, PT=500) ** Reset

* Reset errori Applicativo
LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
JMPCN RAPP

LD   0
ST   PLC_APPERR                    ** Errori Applicativo

RAPP:

* Condizioni di emergenza -------------------------------------------------------------

*** DRIVE OK management

LD   I_I_READY_DRIVE_X             ** Ready signal drive X
AND  I_I_READY_DRIVE_Y             ** Ready signal drive Y
AND  I_I_READY_DRIVE_Z             ** Ready signal drive Z
AND  I_I_READY_DRIVE_UV            ** Ready signal drive U/V
AND  I_I_READY_DRIVE_W             ** Ready signal drive W (external focal)
AND  I_I_READY_DRIVE_C             ** Ready signal drive C
AND  I_I_READY_DRIVE_C1            ** Ready signal drive C1
AND  I_I_READY_DRIVE_A             ** Ready signal drive A
AND  I_I_READY_DRIVE_B             ** Ready signal drive B
OR   I_I_DRIVES_OK                 ** All drives are ok
ST   DrivesOk                      ** Drives Ok

LD   DrivesOk                      ** Drives Ok
JMPC NoErrD

LDN  I_I_READY_DRIVE_X             ** Ready signal drive X
S    %PLCerr0.2           *  Messaggio Drive X1 non Ok
LDN  I_I_READY_DRIVE_Y             ** Ready signal drive Y
S    %PLCerr0.3           *  Messaggio Drive Y1 non Ok
LDN  I_I_READY_DRIVE_Z             ** Ready signal drive Z
S    %PLCerr0.4          *  Messaggio Drive Z1 non Ok
LDN  I_I_READY_DRIVE_UV            ** Ready signal drive U/V
S    %PLCerr0.5          *  Messaggio Drive Gantry non Ok
LDN  I_I_READY_DRIVE_A             ** Ready signal drive A
S    %PLCerr0.6          *  Messaggio Drive A non Ok
LDN  I_I_READY_DRIVE_B             ** Ready signal drive B
S    %PLCerr0.7          *  Messaggio Drive B non Ok
LDN  I_I_READY_DRIVE_C             ** Ready signal drive C
S    %PLCerr0.8          *  Messaggio Drive C non Ok
LDN  I_I_READY_DRIVE_C1            ** Ready signal drive C1
S    %PLCerr0.17
LDN  I_I_DRIVES_OK                 ** All drives are ok
S    %PLCerr0.15

NoErrD:
LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
AND  DrivesOk                      ** Drives Ok
R    %PLCerr0.2          *  Messaggio Drive X1 non Ok
R    %PLCerr0.3          *  Messaggio Drive Y1 non Ok
R    %PLCerr0.4          *  Messaggio Drive Z1 non Ok
R    %PLCerr0.5          *  Messaggio Drive Gantry non Ok
R    %PLCerr0.6          *  Messaggio Drive A non Ok
R    %PLCerr0.7          *  Messaggio Drive B non Ok
R    %PLCerr0.8          *  Messaggio Drive C non Ok
R    %PLCerr0.15         *
R    %PLCerr0.17         *

**************************
* Abilita esecuzione comandi

LD   ResetCncInProgress            ** ui39.1 Reset CNC in progress (setted for 2 sec)
ST   %PLCmsg0.4

* Abilitazione drives

LDN  EMER_GEN                      ** M0.10 Emergenza generale
ANDN ResetCncInProgress            ** ui39.1 Reset CNC in progress (setted for 2 sec)
AND  (
LD   %ecat_ring.ec_status.31					   *ecat ring run
OR   LINK_SIMUL
OR   %M42.0
)
ST   Appoggio                      ** Appoggio

LD   2000
ST   PowerOnTime                   ** Power-on timer
LD   2000
ST   DriveOkTime                   ** Drive ok timer

LD   PLC_SIMULATED                 ** (=1)PLC simulated [RESERVED !!!]
JMPCN NoPlcSim

LD   0
ST   PowerOnTime                   ** Power-on timer
ST   DriveOkTime                   ** Drive ok timer

NoPlcSim:
CAL  TON_POTREG(IN=Appoggio, PT=PowerOnTime) ** Potenza a regime
CAL  TON_ABIL(IN=TON_POTREG.Q, PT=DriveOkTime) ** Abilitazione drives
CAL  TON_AXSTOP(IN=MACCEND.yAxStopped, PT=2000) ** Assi fermi
CAL  TP_MALARM(IN=MACCEND.yInAlarm, PT=1000) ** Assi in allarme
CAL  TOF_MALARM(IN=TP_MALARM.Q, PT=1000) ** Assi in allarme

LD   TON_ABIL.Q
ST   TON_ABIL_PON

PATH %cn3
PATH %ax29
********************************************************************************
* Test Nuovo Regolatore

PATH %uvHeads[0]

LD   CUT_DISTANCE          * [um]
ST   temp

***************************************
*   Cutting_height=funz(angle)
*   #CDL
***************************************
LD   %LSRPlcOp0.3
AND  PRGRUN_CN0
ANDN PRGSTOP_CN0
AND (
LD   %uvHeads0.uvhCommand1
EQ   4                              * Cutting phase
)
JMPCN no_corr_cuth

LD   temp
ADD (
LD   temp
MULDIV(M=%TsCutDataLinear.CDL_CutHeight, D=100000) * 100 %
)
ST   temp

no_corr_cuth:
*

***************************************
* Capacitive sensor gain
***************************************

* Range 10mm 12bit resolution

LD   %LSRCostK31                * sensor range parameter
EQ   10000
AND  (
LD   AnalCapFeedback            * resolution of analog feedback for capacitive sensor
EQ   4095
)
ST   appoggio

CAL  R_TRIG_RANGE_1 (CLK:=appoggio)

LD   R_TRIG_RANGE_1.Q
JMPCN no_sens_gain1

LD   409500
ST   SensorGain                * Capacitive sensor resolution 1mm 
ST   SensorGain_1

no_sens_gain1:

* Range 20mm 12bit resolution

LD   %LSRCostK31       * sensor range parameter
EQ   20000
AND  (
LD   AnalCapFeedback            * resolution of analog feedback for capacitive sensor
EQ   4095
)
ST   appoggio

CAL  R_TRIG_RANGE_2 (CLK:=appoggio)

LD   R_TRIG_RANGE_2.Q
JMPCN no_sens_gain2

LD   204750
ST   SensorGain                    ** Capacitive sensor resolution 1mm
ST   SensorGain_1

no_sens_gain2:

* Range 10mm 16bit resolution (half)


LD   %LSRCostK31               * sensor range parameter
EQ   10000
AND  (
LD   AnalCapFeedback           * resolution of analog feedback for capacitive sensor
EQ   32767
)
ST   appoggio

CAL  R_TRIG_RANGE_3 (CLK:=appoggio)

LD   R_TRIG_RANGE_3.Q
JMPCN no_sens_gain3

LD   3276700
ST   SensorGain                    ** Capacitive sensor resolution 1mm 
ST   SensorGain_1

no_sens_gain3:

* Range 20mm 16bit resolution (half)

LD   %LSRCostK31               * sensor range parameter
EQ   20000
AND  (
LD   AnalCapFeedback           * resolution of analog feedback for capacitive sensor
EQ   32767
)
ST   appoggio

CAL  R_TRIG_RANGE_4 (CLK:=appoggio)

LD   R_TRIG_RANGE_4.Q
JMPCN no_sens_gain4

LD   1638350
ST   SensorGain                    ** Capacitive sensor resolution 1mm 
ST   SensorGain_1

no_sens_gain4:

* Range 10mm 16bit resolution (Full)


LD   %LSRCostK31               * sensor range parameter
EQ   10000
AND  (
LD   AnalCapFeedback           * resolution of analog feedback for capacitive sensor
EQ   65535
)
ST   appoggio

CAL  R_TRIG_RANGE_5 (CLK:=appoggio)

LD   R_TRIG_RANGE_5.Q
JMPCN no_sens_gain5

LD   6553500
ST   SensorGain                    ** Capacitive sensor resolution 1mm 
ST   SensorGain_1

no_sens_gain5:

* Range 20mm 16bit resolution (full)

LD   %LSRCostK31               * sensor range parameter
EQ   20000
AND  (
LD   AnalCapFeedback           * resolution of analog feedback for capacitive sensor
EQ   65535
)
ST   appoggio

CAL  R_TRIG_RANGE_6 (CLK:=appoggio)

LD   R_TRIG_RANGE_6.Q
JMPCN no_sens_gain6

LD   3276700
ST   SensorGain                    ** Capacitive sensor resolution 1mm 
ST   SensorGain_1

no_sens_gain6:

***************************************

LD   temp          * [um]
ST   REGOLA_LSR1_NEW.xToolVrtcSetPoint

LD   bevAngleHead1_calc2
ST   REGOLA_LSR1_NEW.xAngleBev

LD   tcp_Z_head1_fast
ST   REGOLA_LSR1_NEW.xZtcp

LD   0
ST   REGOLA_LSR1_NEW.xHead

LD   3
ST   REGOLA_LSR1_NEW.xChannel

LD   0
ST   REGOLA_LSR1_NEW.xToolVrtcId

LD   1
ST   REGOLA_LSR1_NEW.xSurfVrtcId

LD   ProbeThreshold
ST   REGOLA_LSR1_NEW.xProbThreshold

LD   %LSRCostK31                                  * Capacitive sensor range
ST   REGOLA_LSR1_NEW.xSensorRange

LD   NextPosY                                     * (LsIso44) Next position for jump Y
ST   REGOLA_LSR1_NEW.xNextPos_Y_Jump_VRTC         * Y setpoint coordinate for jump

LD   NextPosX                                     * (LsIso43) Next position for jump X
ST   REGOLA_LSR1_NEW.xNextPos_X_Jump_VRTC         * X setpoint coordinate for jump 

LD   NextPosC                                     *
ST   REGOLA_LSR1_NEW.xNextPos_C_Jump_VRTC         * C setpoint coordinate for jump 

LD   NextPosZ                                     *
ST   REGOLA_LSR1_NEW.xNextPos_Z_Jump_VRTC         * Z setpoint coordinate for jump 

LD   ActulPosY                                    * (LsIso41) Initial position for jump Y
ST   REGOLA_LSR1_NEW.xInit_Y_Posit_VRTC           * Y Init jump position

LD   ActualPosX                                   * (LsIso42) Initial position for jump X
ST   REGOLA_LSR1_NEW.xInit_X_Posit_VRTC           * X Init jump position

LD   ActualPosC
ST   REGOLA_LSR1_NEW.xInit_C_Posit_VRTC           * C Init jump position

LD   ActualPosZ
ST   REGOLA_LSR1_NEW.xInit_Z_Posit_VRTC           * Z Init jump position

LD   PRGRUN_CN0
AND  IN_M4_MODE
JMPCN M4_MOD
     LD   %ax27.ra24
     ADD  %ax0.ra24
     ST   REGOLA_LSR1_NEW.xActual_X_Posit_VRTC
JMP COM_MOD
M4_MOD:
     LD   %ax27.ra24
     ADD  %ax30.ra24
     ST   REGOLA_LSR1_NEW.xActual_X_Posit_VRTC
COM_MOD:

LD   %ax28.ra24
ST   REGOLA_LSR1_NEW.xActual_Y_Posit_VRTC

LD   %ax5.ra24
ST   REGOLA_LSR1_NEW.xActual_C_Posit_VRTC

LD   %ax29.ra24
ST   REGOLA_LSR1_NEW.xActual_Z_Posit_VRTC

LD   %LsIso50
ST   REGOLA_LSR1_NEW.xNextSetpVRTC            * Setpoint after jump    

LD   %LsIso46 
ST   REGOLA_LSR1_NEW.xPrevSetpVRTC            * last setpoint before jump 

LD   %LsIso53                                 * Distance from target to enab regulation during jump   
ST   REGOLA_LSR1_NEW.xDistEnabRegulVRTC

LD   %LSRCostK61                              * distance along Z to disable the probe vpbselector during jump
ST   REGOLA_LSR1_NEW.xZDistStopProbeJVRTC

LD   %CostK28
ST   REGOLA_LSR1_NEW.xFirstFirCost_VRTC       * ms

LD   %CostK29
ST   REGOLA_LSR1_NEW.xSecondFirCost_VRTC      * ms  

LD   %CostK27
ST   REGOLA_LSR1_NEW.xDelayCost_VRTC          * ms

LD   Hold_req
AND  %LSRPlcOp0.4                           * Abilita salita dopo HOLD
OR   EnPosiz                                 * (LsPlc47.3) Abilitaz. posiz. Asse Z
ST   REGOLA_LSR1_NEW.xMove_Z_VRTC

LD   Hold_req
ST   REGOLA_LSR1_NEW.xHold_VRTC * Channel hold request

LD   %LSRCostK14
ST   REGOLA_LSR1_NEW.xMove_Z_SetP_VRTC

LD   AcqOrigOn
ANDN ApaPlateSense
ST   appoggio
 
CAL  R_TRIG_Freeze(CLK:=appoggio)

LD   appoggio
OR   R_TRIG_Freeze.Q 
ST   REGOLA_LSR1_NEW.xRealTimeFreeze         * freeze work if height control is in cutting mode

**********************************************************************************
* Apa function * need limit speed towards down direction
**********************************************************************************
LDN     %cn0.rc8.0                 ** (M0.0)cn0.rc8.0  Programma in corso
JMPCN   res_value_limiter
LD      0
ST      LimitSpeed                  ** %LsIso82 Limit regualtion speed at 0 for APA
res_value_limiter:

**********************************************************************************
LD   LimitSpeed
NE   0
OR   ISO_I_TIP_BODY_TOUCH_A11
AND  PRGRUN_CN0
ST   REGOLA_LSR1_NEW.xLimDownSpeed

LD   EnSpeedPiercing          * (LsIso10.7) Enable speed for piercing in Near phase
ST   REGOLA_LSR1_NEW.xLimSpeedPierc    

LD   AnalCapFeedback                  * resolution of analog feedback for capacitive sensor
ST   REGOLA_LSR1_NEW.xSensorRes

CAL  REGOLA_LSR1_NEW

LD   REGOLA_LSR1_NEW.yL3SetpointReachedVRTC
ST   SetPointReached_JumpL3

LD   REGOLA_LSR1_NEW.yWaitVRTC
ST   WaitVRTC_OK                             * (LsPlc47.30) Wait Regulation ok to continue the cut

LD   REGOLA_LSR1_NEW.yIncSetPReachedVRTC
ST   VRTCIncSetPReached                      * (LsPlc47.31) Vrtc  has reached the setpoint for the inc movement

PATH %cn0

LASER_M
MACHINE_CONFIG                  * (funzione che chiama la LSRGST)


****************************************************************************************************
* CICLO GENERALE MACCHINA -----------------------------------------------------------------------###
****************************************************************************************************

LD   %PlcOp0.31                    ** =0 track, 1=piece & geometry management
AND  %SoftBtn0.0                   ** Reset PIECE and GEOMETRY
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   %LSRPlcOp0.21
JMPCN NoPG

LD   0
ST   plc_PEZZO                     ** PEZZO
ST   plc_GEOMETRIA                 ** GEOMETRIA
ST   NumTraccia                    ** Numero traccia in esecuzione

NoPG:

********************************************************************************
* refresh graph after enable cooling point function

CAL  RT_Cool_pt (CLK:= %LSRPlcOp1.22) ** Enable cooling point
CAL  FT_Cool_pt (CLK:= %LSRPlcOp1.22) ** Enable cooling point

LD   RT_Cool_pt.Q
OR   FT_Cool_pt.Q 
S    req_graph_refr                ** (LsPlc48.18) Req graph refresh 

LD   req_graph_refr                ** (LsPlc48.18) Req graph refresh 
AND  (
LD   %Uipl.Page
EQ   105
)
ST   appoggio                      ** Appoggio

CAL  TON_RES_REQ (IN:=appoggio,PT:=1000) ** Appoggio
CAL  RT_Command (CLK:=appoggio)    ** Appoggio

LD   RT_Command.Q
S    GRAPH_RFSH                    ** Rinfresco grafica

LD   TON_RES_REQ.Q
R    GRAPH_RFSH                    ** Rinfresco grafica
R    req_graph_refr                ** (LsPlc48.18) Req graph refresh 
         
********************************************************************************
**************************

CAL RTRIG_PRGSEL(CLK=BUP_PROGSEL)  ** ui16.30 Impulso selezione programma
CAL RTRIG_GRAPH_ON(CLK=GRAPH_DRAW) ** ui33.10 Graphics drawing
CAL FTRIG_GRAPH_ON(CLK=GRAPH_DRAW) ** ui33.10 Graphics drawing

LD   RTRIG_PRGSEL.Q
R    VerifyStat2
R    READY_FOR_VERIFY              ** (R50.0) CH0 Program ready to verify
S    VerifyStat1

LD   RTRIG_GRAPH_ON.Q
AND  VerifyStat1
R    VerifyStat1
S    VerifyStat2

LD   FTRIG_GRAPH_ON.Q
AND  VerifyStat2
R    VerifyStat2
S    READY_FOR_VERIFY              ** (R50.0) CH0 Program ready to verify

LD   ON_ONE_SCAN
S    READY_FOR_VERIFY

LD   RTRIG_PRGSEL.Q
JMPCN RESCOUNT

LD   0
ST   NumTraccia                    ** Numero traccia in esecuzione

LD   PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN %LSRPlcOp0.5                  ** Worklist mode enabled
JMPC NoResInRun

LD   0
ST   plc_GEOMETRIA                 ** GEOMETRIA
ST   plc_PEZZO                     ** PEZZO

NoResInRun:
RESCOUNT:
**************************

* Tempo ciclo -----------------------------------------------------------

CAL R_TRIG_1SEC(CLK=%PLCFLAGS.10)  ** Cadenza di 1 secondo

LD   R_TRIG_1SEC.Q       * Cadenza di 1 secondo
JMPCN CNT_TES

LD   CycleTime                     ** (gPlc12)Tempo ciclo (s)
ADD  1
ST   CycleTime                     ** (gPlc12)Tempo ciclo (s)

CNT_TES:

LD   BUP_PROGSEL                   ** ui16.30 Impulso selezione programma
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
JMPCN CNT_RES

LD   0
ST   CycleTime                     ** (gPlc12)Tempo ciclo (s)

CNT_RES:

NO_VIS:


*******************************************************************************
*   GESTIONE ORGINE (n.19 fissa)
*******************************************************************************
CAL TRIG3(CLK=AcquisOrig)          ** (gGui1.2)Acquisisci origine

PATH %funz[INDICE_OR]              ** Indice origine selezionata

LD   19
ST   ORIG_ATT            * Numero origine attiva (0-19)
ST   INDICE_OR                     ** Indice origine selezionata
 
***************************************
* Set origins
***************************************
CAL TRIG4(CLK=ImpostaOrig)         ** (gGui1.3)Imposta origine
CAL TRIG_SET_ROT_ORIG(CLK=ImpostaOrigRot)

*** Rotate origins
LD   TRIG_SET_ROT_ORIG.Q
ANDN EMER_GEN                      ** M0.10 Emergenza generale
ANDN I_I_EMERGENZA                 ** Machine OK (no EMERG.)
JMPCN CNT_OTHER_SET

LD   Sel_INC_orig                  ** (PlcOp0.14)Selezione acquisizione Manuale Origine Incrementale
JMPC INCR_ROT

LD   RotForceMan                   ** (gGui5)Angolo Rotaz.per "Imposta Origine"(Pag.Origini)
ST   VAL_ROTEA                     ** (rotEA)Rotazione origine selezionata

INCR_ROT:
LD   Sel_INC_orig                  ** (PlcOp0.14)Selezione acquisizione Manuale Origine Incrementale
JMPCN ABSOL_ROT

LD   VAL_ROTEA
ADD  RotForceMan
ST   VAL_ROTEA

ABSOL_ROT:
CNT_OTHER_SET:

*** XY origins
LD   TRIG4.Q                        * Acquisizione origine manuale     
ANDN EMER_GEN                      ** M0.10 Emergenza generale
ANDN I_I_EMERGENZA                 ** Machine OK (no EMERG.)
JMPCN NO_APPRENDI

LD   Sel_INC_orig                  ** (PlcOp0.14)Selezione acquisizione Manuale Origine Incrementale
JMPC INCR

LD   XQtaForceMan                  ** (gGui3)Quota asse X per "Imposta Origine"(Pag.Origini)
ST   VAL_X_OR                      ** (origprgX)Offset X Origine

LD   YQtaForceMan                  ** (gGui4)Quota asse Y per "Imposta Origine"(Pag.Origini)
ST   VAL_Y_OR                      ** (origprgY)Offset Y Origine

INCR:
LD   Sel_INC_orig                  ** (PlcOp0.14)Selezione acquisizione Manuale Origine Incrementale
JMPCN ABSOL

LD   VAL_X_OR                      ** (origprgX)Offset X Origine
ADD  XQtaForceMan                  ** (gGui3)Quota asse X per "Imposta Origine"(Pag.Origini)
ST   VAL_X_OR                      ** (origprgX)Offset X Origine

LD   VAL_Y_OR                      ** (origprgY)Offset Y Origine
ADD  YQtaForceMan                  ** (gGui4)Quota asse Y per "Imposta Origine"(Pag.Origini)
ST   VAL_Y_OR                      ** (origprgY)Offset Y Origine

ABSOL:
NO_APPRENDI:

LD   VAL_X_OR                      ** (origprgX)Offset X Origine
ST   OrigineX                      ** (gPlc7)Origine attiva X

LD   VAL_Y_OR                      ** (origprgY)Offset Y Origine
ST   OrigineY                      ** (gPlc8)Origine attiva Y

LD   VAL_ROTEA                     ** (rotEA)Rotazione origine selezionata
ST   RotazOrig                     ** (gPlc15)Rotazione origine attiva

LD   INDICE_OR                     ** Indice origine selezionata
EQ   19
ST   VisLedOrigGui.19

LD   AcqOrigEnd                    ** (C18.2)  Acquisizione origine effettuata
ST   VisLedOrigGui.20

***************************************
* Canale0: Sezione di 1000.pgm
***************************************
LD   TRIG3.Q             * Acquisizione Origine (R)
S    ReqAcqOrig                    ** (gPlc13.1)Richiesta acquisizione origine

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    ReqAcqOrig                    ** (gPlc13.1)Richiesta acquisizione origine

***************************************
*   REFRESH AXES POINTER (GRAPHICS)
***************************************
CAL  RTRG_MATC(CLK=MACCH_IN_MANUALE) ** RTRIG MatXount

LD   RTRG_MATC.Q
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
JMPCN NoJogSel

LD   27
ST   DYNGRAPH0
ST   MATPRG_STS1

LD   DYNGRAPH0
OR   16#80000000
ST   DYNGRAPH0

LD   28
ST   DYNGRAPH1
ST   MATPRG_STS2

LD   DYNGRAPH1
OR   16#80000000
ST   DYNGRAPH1

LD   MATPRG_MATC        ** (MatCount)
LT   200
JMPCN Eq200

LD   MATPRG_MATC        ** (MatCount)
ADD  1
ST   MATPRG_MATC        ** (MatCount)
JMP  ComEq200

Eq200:
LD   1
ST   MATPRG_MATC        ** (MatCount)

ComEq200:
JMP  ComNoJogSel

NOCHANGE:
NoJogSel:
LD   RT_PRGRUN.Q         ** Up Programma in corso
JMPCN ComNoJogSel

LD   DYNGRAPH0
AND  16#7FFFFFFF
ST   DYNGRAPH0

LD   DYNGRAPH1
AND  16#7FFFFFFF
ST   DYNGRAPH1

ComNoJogSel:

******************************************************************************
*   Override 1 Management
******************************************************************************
PATH %FeedRate[0]
    
LD   I_IA_Feed_Override            ** Potenciometer for Feed Override
ST   Feed.xAnalInput            * input for potentiometer        
                                
CAL  RTRIG_REM_FEED(CLK:=RemContrJogFast)        ** Xhc_Puls.23 Jog Fast
CAL  TRIG_FEED(CLK:=ForceFeedSlow) 				 ** (LsGui3.10)  force feed slow

LD   RTRIG_REM_FEED.Q
OR   TRIG_FEED.Q
JMPCN No_change

LD   ForceFeedSlow1                 **(rLsGui29.4)  force feed slow 1
EQ   1
JMPC FEED_FAST

LD   1
ST   ForceFeedSlow1
JMP  FEED_SLOW

FEED_FAST:
LD   0
ST   ForceFeedSlow1
FEED_SLOW:
No_change:

LD   ForceFeedSlow1                 **(rLsGui29.4)  force feed slow 1
ANDN PRGRUN_CN0                     ** M0.0 cn0.rc8.0  Programma in corso
ST   Feed.xForceLowFeed          

CAL  Feed

LD   Feed.y_Value
ST   temp

LD   temp
ST   ChannelFeedrate               ** feedrate for channel

* Speed reduction for retrace and distance control

LD   RetraceCommBack            * (LsPlc47.11) Retrace command after hold
JMPCN no_retrace_func
LD   50
ST   ChannelFeedrate               ** feedrate for channel
JMP no_change_overr
no_retrace_func:
*---------------------------------------------------------------------
* Referece speed force

LD   ch3_in_ref                    ** channel 3 in ref
JMPCN no_ref
LD   100
ST   ChannelFeedrate               ** feedrate for channel
JMP no_change_overr
no_ref:

*---------------------------------------------------------------------
* Speed reduction for lead-in with distance control

CAL RTRIG_RED_SPEED(CLK:=isoLowLeadIn) ** (LsIso10.2) Enable low speed reduction in lead-in  
  
LD   RTRIG_RED_SPEED.Q                 
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN %PlcOp0.2                     ** DryRun
S    speed_red_enable              ** request to reduce speed for lead-in    

CAL  RTRIG_MEMSPACE(CLK:=speed_red_enable) ** request to reduce speed for lead-in    
                  
LD   RTRIG_MEMSPACE.Q
JMPCN no_mem_int                

LD   0
ST   interpInitSpace     * Iperspazio percorso (micron)

LD   %ax0.ra54           * Quota asse X riferita al TCP
ADD  %ax30.ra4
ST   SpaceStartX         * Quota asse X riferita al TCP

LD   %ax1.ra54           * Quota asse Y riferita al TCP
ST   SpaceStartY         * Quota asse Y riferita al TCP

LD   %ax2.ra54           * Quota calcolata asse Z riferita al TCP
ST   SpaceStartZ

no_mem_int:                  
LD   %ax0.ra54           * Quota asse X riferita al TCP
ADD  %ax30.ra4
SUB  SpaceStartX         * Quota asse X riferita al TCP
ST   Risultato1          * Var Di Appoggio

LD   Risultato1          * Var Di Appoggio
MUL  Risultato1          * Var Di Appoggio
ST   Risultato1          * Var Di Appoggio

LD   %ax1.ra54           * Quota asse Y riferita al TCP
SUB  SpaceStartY         * Quota asse Y riferita al TCP
ST   Risultato2          * Var Di Appoggio

LD   Risultato2          * Var Di Appoggio
MUL  Risultato2          * Var Di Appoggio
ST   Risultato2          * Var Di Appoggio

LD   %ax2.ra54
SUB  SpaceStartZ
ST   Risultato3

LD   Risultato3
MUL  Risultato3
ST   Risultato3

LD   Risultato1          * Var Di Appoggio
ADD  Risultato2          * Var Di Appoggio
ADD  Risultato3          * Var Di Appoggio
SQRT
ST   Risultato4

LD   interpInitSpace     * Iperspazio percorso (micron)
ADD  Risultato4          * Var Di Appoggio
ST   interpInitSpace     * Iperspazio percorso (micron)

LD   %ax0.ra54           * Quota asse X riferita al TCP
ADD  %ax30.ra4
ST   SpaceStartX         * Quota asse X riferita al TCP

LD   %ax1.ra54           * Quota asse Y riferita al TCP
ST   SpaceStartY         * Quota asse Y riferita al TCP
                
LD   %ax2.ra54           * Quota calcolata asse Z riferita al TCP
ST   SpaceStartZ

LD   speed_red_enable              ** request to reduce speed for lead-in    
JMPCN no_low_speed_req
                                                                                                  
LD   %TabLsr0.L_FeedA
ST   feed100perc                   ** maximum feed to reach after lead-in            

LD   %TabLsr0.L_SourceInt18          * distance for lead-in
ST   disLeadIn                     ** distance for lead in working table             

LD   %TabLsr0.L_SourceInt17          * speed for lead in 
ST   speedLeadIn                   ** speed request for lead in                       

LD   speedLeadIn                   ** speed request for lead in                       
MUL  100
DIV  feed100perc                   ** maximum feed to reach after lead-in            
ST   ReducPercValue                ** Percentual value for feedrate reduction        

LD   interpInitSpace
LT   disLeadIn                     ** distance for lead in working table             
ST   ForceLowFeed                  ** force low speed variable                        

LD   ForceLowFeed                  ** force low speed variable                        
JMPCN no_reduce_feed

LD   ReducPercValue                ** Percentual value for feedrate reduction        
ST   ChannelFeedrate               ** feedrate for channel

no_reduce_feed:
no_low_speed_req:

CAL  FTRIG_ForceLowSpeed(CLK:=ForceLowFeed) ** force low speed variable                        

LD   FTRIG_ForceLowSpeed.Q                                                  
ORN  %cn0.rc8.0
OR   %PlcOp0.2                     ** DryRun
R    speed_red_enable              ** request to reduce speed for lead-in    

*---------------------------------------------------------------------
* Soft-stop posizionamento incrementale

LD   Pul_Stop                      ** (gPlc0.2)Stop pushbutton
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    StopINC

LD   StopINC
JMPCN STPINC

LD   0
ST   ChannelFeedrate               ** feedrate for channel

STPINC:

LD   MACCEND.yAxStopped
AND  StopINC
S    EmerINC

LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
ORN  BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
R    StopINC
R    EmerINC
*****************************************************************************************
no_change_overr:

*---------------------------------------------------------------------
* Feed Ramping in L3 mode ON hold Command

LD   ChannelFeedrate
ST   FeedRamp.xValue         * Valore in input (0-1000)

LD   0
ST   FeedRamp.xRiseTime      * Tempo rampa di salita (ms)

LD   0
ST   FeedRamp.xFallTime      * Tempo rampa di discesa (ms)

LD   %uvHeads0.uvhCommand0.6
AND  StartButtonPressed
JMPCN no_L3_feed_change1

LD   ChannelFeedrate
ST   FeedRamp.xValue         * Valore in input (0-1000)

LD   1000
ST   FeedRamp.xRiseTime      * Tempo rampa di salita (ms)

LD   1000
ST   FeedRamp.xFallTime      * Tempo rampa di discesa (ms)

LD   FeedRamp.yValue
GE   10
ST   appoggio

CAL  TP_START_RAMP (IN:=appoggio,PT:=100)

LD   TP_START_RAMP.Q
ST   Pul_Start

no_L3_feed_change1:

LD   %uvHeads0.uvhCommand0.6
AND  HoldButtonPressed
JMPCN no_L3_feed_change

LD   0
ST   FeedRamp.xValue         * Valore in input (0-1000)

LD   1000
ST   FeedRamp.xRiseTime      * Tempo rampa di salita (ms)

LD   1000
ST   FeedRamp.xFallTime      * Tempo rampa di discesa (ms)

LD   FeedRamp.yValue
EQ   0
ST   appoggio

CAL  TP_HOLD_RAMP (IN:=appoggio,PT:=100)

LD   TP_HOLD_RAMP.Q
ST   Pul_Stop

no_L3_feed_change:

CAL  FeedRamp

LD   FeedRamp.yValue
ST   ChannelFeedrate

*----------------------------------------------------------------------
*

*---------------------------------------------------------------------
* Plc parking stop

CAL  TON_CN0_HOLD(PT=200,IN=PRGSTOP_CN0)
LD   PRGSTOP_CN0
AND  TON_CN0_HOLD.Q
ANDN RetraceCommBack
JMPCN STPPLCPARK
LD   0
ST   ChannelFeedrate               ** feedrate for channel
STPPLCPARK:

* Feedrate a zero

LD   ChannelFeedrate               ** feedrate for channel
LT   3
ST   %PLCmsg0.19         * Feedrate a zero

****************************************************************************************************
* ------------------------- INIZIO GESTIONE RISORSE MACCHINA CANALI / ASSI ----------------------###
****************************************************************************************************

********************************************************************************
********************************************************************************
* GESTIONE PULSANTIERA AUX CON VOLANTINO ------------------------------------###
********************************************************************************

LD   %ax11.ra4            * Quota Volantino
ST   AP_QTAVOL                     ** IPuls1 Quota da volantino (0-65535)

* Selezione moltiplica

LD   10
ST   AP_INCJOG                     ** IPuls11 Quota incremento per posiz. da volantino

LD   I_HW_RATE_X100_USR            ** (gPlc2.26)rate x100   da volantino pulsantiera ausiliaria
JMPCN HWX100
LD   100
ST   AP_INCJOG                     ** IPuls11 Quota incremento per posiz. da volantino
HWX100:

LD   I_HW_RATE_X1000_USR           ** (gPlc2.27)rate x1000  da volantino pulsantiera ausiliaria
JMPCN HWX1000
LD   1000
ST   AP_INCJOG                     ** IPuls11 Quota incremento per posiz. da volantino
HWX1000:

LD   MACCH_IN_MANUALE              ** M100.24 SELEZIONE MACCHINA IN MANUALE
AND  GUI_HW_ENAB                   ** (gPlc2.29)Abilitazione comandi da volantino da GUI
ST   PulsAuxComand                 ** (gPlc2.28)Comando abilitazione da pulsantiera ausiliaria
**************************

********************************************************************************
* FINE GESTIONE PULSANTIERA AUX CON VOLANTINO -------------------------------###
********************************************************************************

* (Abilitazione start)
LDN  EMER_GEN                      ** M0.10 Emergenza generale
ANDN BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
OR (
LDN  EMER_GEN                      ** M0.10 Emergenza generale
AND  BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
AND (
LD   UP_NBLOCKSEARCH               ** ui27 Numero riga ricerca blocco
GE   1
)
AND  COLLIMATE_OK                  ** ui33.31 Collimate and point collimate or path collimate done (block search)
)
ANDN EnPosiz                       ** (LsPlc47.3) Abilitaz. posiz. Asse Z
ANDN RetraceCommBack                      * (LsPlc47.11) Retrace command after hold
ANDN %PLCerr5.5                    **PLC Err 165 Body touch (A11=1, A14=1, A15=0 in normal operation)
AND  AllDriveEnable                ** All drives are enabled
*AND  (
*LD   spindle_geared                ** axes gearing enable from function block 
*OR   ch3_in_ref                    ** channel 3 in ref
*OR   ch3_in_jog
*)
ANDN Res_Axes
ANDN Res_Ch0
ANDN Res_Ch3
*AND  (
*LD   READY_FOR_VERIFY              ** (Saw + 3Spindle Need to Collect info from Graph)
*OR   ch0_in_ref
*)
ANDN %PlcOp0.22
ANDN CorOptNoStart
ST   StartEnab                     ** Abilitazione start

* (Abilitazione start in Automatico)
LD   ch0_in_aut                    ** channel 0 in aut
OR   PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
ANDN %PLCerr6.1
*AND  spindle_geared                ** axes gearing enable from function block 
ST   StartEnabAut                  ** Abilitazione start in Automatico

******************************************************************
*   BLOCK SEARCH
******************************************************************
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
ANDN %cn0.rc8.8
ANDN %cn0.rc8.15
ANDN StartStateBSearch1            ** 
AND  BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
S    StartStateBSearch1            ** 

CAL  R_TRIG_SBS1(CLK=StartStateBSearch1) ** 
CAL  TP_START_BSEARCH1(IN:=R_TRIG_SBS1.Q,PT:=100) * to synchronize plc and channel 6

LD   TP_START_BSEARCH1.Q
JMPCN NoBS1
LD   10
ST   CMD_CHCOMP                    ** Comando canale computazionale
NoBS1:

LDN  BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
OR   Pul_Stop                      ** (gPlc0.2)Stop pushbutton
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   StartStateBSearch2            ** 
R    StartStateBSearch1            ** 

LD   StartStateBSearch1            ** 
AND  (
LD   CMD_CHCOMP                    ** Comando canale computazionale
EQ   12
)
S    StartStateBSearch2            ** 

LDN  BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
R    StartStateBSearch2            ** 

LD   CMD_CHCOMP                    ** Comando canale computazionale
EQ   12
JMPCN NoBS2
LD   0
ST   CMD_CHCOMP                    ** Comando canale computazionale
NoBS2:

LD  CMD_HOLDMOVING_CH3
NE  0
*OR(
*LD  CMD_HOLDMOVING_CH5
*NE  0
*)
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
AND  LaserOn                       ** (LsPlc1.25) Per GUI  LaserOn
ST   appoggio

CAL  TON_HOLD_AX (IN:=appoggio,PT:=2000)

LD   RESET_ALLARMI 		              ** M100.4  Cancellazione allarmi attiva
R    %PLCerr5.26

LD   TON_HOLD_AX.Q
S    %PLCerr5.26

********************************************************************************
* JOG ENABLE * 

CAL TRIG_JOGENAB(CLK=BtnJogEnable)    ** Pulsante attivazione Jog Enable

LD   TRIG_JOGENAB.Q                * Pulsante attivazione Jog Enable
AND  %cn0.rc72.2                   * Retrace attivo in attesa di comando
ST   JOG_EN.xPulsante

LDN  %cn0.rc72.2                   * Retrace attivo in attesa di comando
OR   REPOS_ON                      ** (gPlc0.19)Comando Repos Attivo
OR   Pul_Start                     ** (gPlc0.1)Start pushbutton
ORN  PRGRUN_CN0                    ** (M0.0)rc8.0  Programma in corso
ORN  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
ST   JOG_EN.xResetState            * Forzatura Reset stato del Filp Flop

CAL  JOG_EN

LD   JOG_EN.yComandOn
ST   JOG_ENABLE                    ** (gPlc0.22)Jog Enable

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  %PLCFLAGS.10
ST   JOG_ENABLE_ICON               ** (gPlc0.21)Visualizza stato Icona JOG_ENABLE

******************************************************************
*   HOLD HOLD HOLD
******************************************************************
LD   Pul_Stop                      ** (gPlc0.2)Stop pushbutton
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR (
LD   %config_machine25
EQ   0                          * PRECITEC HEAD
AND (
LD   %PLCerr5.1         ** Precitec - errore in azzeramento
OR   %PLCerr5.2         ** Precitec - errore durante funzionamento automatico
OR   %PLCerr5.3         ** Precitec - trascorso tempo massimo azzeramento  
OR   %PLCerr7.7         ** Precitec - errore generico
)
)
OR   %PLCerr5.16
OR   %PLCerr5.17
OR   %PLCerr5.18
OR(
LD   %PLCerr5.19
ANDN %PlcOp0.2  
)
OR   %PLCerr5.26                   *Time-Out hold moving during a program
OR   EMER_GEN                      ** M0.10 Emergenza generale
OR   %PLCerr5.14        ** PLC Err 174 Pressione valvola proporzionale fuori range
OR   %PLCerr5.11     		** PLC Err 171 Bassa pressione ossigeno
OR   %PLCerr5.12     		** PLC Err 172 Bassa pressione azoto
OR   %PLCerr5.13     		** PLC Err 173 Bassa pressione aria taglio
OR   %PLCerr6.1                 * MANCA ARIA IMPIANTO
OR   %PLCerr6.9
ANDN BCO_CUSTOM_START              ** rc8.19 Ciclo $START in corso
OR(
LD   M10_CN0                       ** M0.14 M10: Attiva Hold + Jog CN0
AND  AwaitStart                    ** Attesa Start
ANDN RestartOk                     ** Restart Ok (M10)
ANDN Pul_Start                     ** (gPlc0.1)Start pushbutton
)
OR   PhotocellsOn                  ** (gPlc2.15)Photocells on
OR   CondHoldPlcExt                ** (LsPlc11.3) Hold condition from external plc(pallet change)
OR   HoldReqAUTO                   ** (gPlc2.12)Mem. Richiesta HOLD in Automatico
OR   CMD_HOLD_MAC                  ** M206.0 Hold (CH0, CH3)
OR(
LD   %PLCerr6.0                    *  Hold from chiller
ANDN %PlcOp0.2  
)
OR   Hold_gas_refill               ** M107.24 Hoerbiger insufficient gas pressure
OR   PhotocellsOn                  ** (gPlc2.15)Photocells on
OR   %PLCerr21.8
OR   %PLCerr21.9
OR   %PLCerr20.20
OR   %PLCerr20.21
OR   %PLCerr20.26
OR   %PLCerr20.27
OR   %PLCerr20.28
OR   %PLCerr21.15                  ** Machine Door Open
OR   %PLCerr21.16                  ** Laser Safe Activated
OR   %PLCerr21.17                  ** Unloader Door Open In Cutting
OR   %PLCerr21.24                  * Anticolision bevel head
OR   %PLCerr21.30                  * Safely L1 down position sensor
ANDN ch0_in_ref
OR   STATUS_LOADER_HOLD
OR   HoldFromIso                   * (LsIso21.0) Hold Iso Request
ST   CondHoldCN0                   ** Condizioni richiesta hold canale 0
S    Hold_req                      ** (gPlc23.4) request hold          

LDN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   Pul_Start                     ** (gPlc0.1)Start pushbutton
OR   StartAftTipTouch
R    Hold_req                      ** (gPlc23.4) request hold      
R    HoldFromIso                   * (LsIso21.0) Hold Iso Request    
R    ManualLoading                 *(LsIso21.1) Manual Loading tube
*******
CAL  GSTMAC


******************************************************************
*   Selezione asse
******************************************************************
PATH %cn[UP_SELCHAN]               ** ui17 Canale selezionato da monitor canale

LD   GSTMAC.yAxSelMask
ST   SEL_ASSE.xMaskAxSel

CAL  SEL_ASSE


******************************************************************
*   1000.PGM: Spindle aligment
******************************************************************
CAL  TRIG1000_0(CLK=%SoftBtn0.8)

LD   TRIG1000_0.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.1             * Spindle aligment

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.1             * Spindle aligment

******************************************************************
*   1000.PGM: RTCP control
******************************************************************
CAL  TRIG1000_6(CLK=%SoftBtn0.22)

LD   TRIG1000_6.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.6

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.6

******************************************************************
*   1000.PGM: Spindle Parking 0 Quota
******************************************************************
CAL  TRIG1000_7(CLK=%SoftBtn0.23)

LD   TRIG1000_7.Q
OR   RemContrBackOrig
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.7

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.7

******************************************************************
*   1000.PGM: Manual Loading Request
******************************************************************
CAL  TRIG1000_8(CLK=%SoftBtn0.24)

LD   TRIG1000_8.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.8

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.8


******************************************************************
*   1000.PGM: Calibration checking
******************************************************************
CAL  TRIG1000_1(CLK=%SoftBtn0.21)

LD   TRIG1000_1.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.2

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.2             * Spindle aligment

******************************************************************
*   Not 1000.PGM: Apa Tube Measurement
******************************************************************
LD   ManualAPAReq                    ** (LsGui3.2) manual APA request          
OR   RemContrManAPA                  ** Xhc_Puls.11 Manual Apa              *
ST   appoggio
CAL  TRIG1000_3(CLK=appoggio)

LD   TRIG1000_3.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.3

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q                   ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.3             * Spindle aligment

******************************************************************
*   1000.PGM: User - Manual ISO
******************************************************************
CAL  TRIG1000_5(CLK=CMD_USERISO)   * UserIso START

LD   TRIG1000_5.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.5

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q                   ** Dwn Programma in corso
OR   ON_ONE_SCAN                  ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.5             
S    CMD_USERISO_END               * UserIso END

LDN  CMD_USERISO                   * UserIso START
R    CMD_USERISO_END               * UserIso END

******************************************************************
*RICH: ROUTINE DI PULIZIA UGELLO SU SPAZZOLA     --------------###
******************************************************************
CAL TRIG8(CLK=PuliziaUgello)       ** (gGui1.18)Puizia Ugello Su Spazzola

LD   TRIG8.Q                       **(gGui1.18)Puizia Ugello Su Spazzola
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    ReqPuliziaUgello              ** (gPlc13.24)Richiesta routine di pulizia ugello su spazzola

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    ReqPuliziaUgello              ** (gPlc13.24)Richiesta routine di pulizia ugello su spazzola

******************************************************************
*** REQUEST GO AXES TO SERVICE POSITION          --------------###
******************************************************************

CAL  RTRIG10(CLK=ServicePosition)  ** (gGui1.25) GUI Keysoft for Axes to Service Position

LD   RTRIG10.Q                       **(gGui1.18)Puizia Ugello Su Spazzola
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    ReqServicePosition            ** (gPlc13.29) Request go Axes to Service Position

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                  ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    ReqServicePosition            ** (gPlc13.29) Request go Axes to Service Position

******************************************************************
*   1000.PGM: Semi Tube Loading 
******************************************************************
CAL  TRIG1000_10(CLK=%SoftBtn0.30)

LD   TRIG1000_10.Q
*AND  ch3_in_jog                    ** channel 3 in jog
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    %ServiceMillePGM.10

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
OR   ON_ONE_SCAN                  ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    %ServiceMillePGM.10

******************************************************************
*   1000.PGM: Weld seam identification
******************************************************************
CAL  TRIG1000_11(CLK=%SoftBtn0.31)
LD   TRIG1000_11.Q
ANDN PRGRUN_CN0                
S    %ServiceMillePGM.11

LD   M30_CN0                    
OR   MACCEND.yInAlarm
OR   Pul_Reset       
OR   FT_PRGRUN.Q    
OR   ON_ONE_SCAN             
R    %ServiceMillePGM.11

******************************************************************
*   1000.PGM: Park all loader Supports with Flaps
******************************************************************
CAL  TRIG1000_15(CLK=%SoftBtn0.11)
LD   TRIG1000_15.Q
ANDN PRGRUN_CN0                
S    %ServiceMillePGM.15

LD   M30_CN0                    
OR   MACCEND.yInAlarm
OR   Pul_Reset       
OR   FT_PRGRUN.Q    
OR   ON_ONE_SCAN             
R    %ServiceMillePGM.15

******************************************************************
*   NOT 1000.PGM: load side supports up
******************************************************************
CAL  RTRIG1000_12(CLK=%SoftBtn0.25)
LD   RTRIG1000_12.Q
ANDN PRGRUN_CN0                
S    %ServiceMillePGM.12

LD   M30_CN0                    
OR   MACCEND.yInAlarm
OR   Pul_Reset       
OR   FT_PRGRUN.Q    
OR   ON_ONE_SCAN             
R    %ServiceMillePGM.12

******************************************************************
*   NOT 1000.PGM: unload side supports up
******************************************************************
CAL  RTRIG1000_13(CLK=%SoftBtn0.26)
LD   RTRIG1000_13.Q
ANDN PRGRUN_CN0                
S    %ServiceMillePGM.13

LD   M30_CN0                    
OR   MACCEND.yInAlarm
OR   Pul_Reset       
OR   FT_PRGRUN.Q    
OR   ON_ONE_SCAN             
R    %ServiceMillePGM.13

******************************************************************
*   NOT 1000.PGM: All Centering Axes Following
******************************************************************
CAL  RTRIG1000_14(CLK=%SoftBtn0.27)
LD   RTRIG1000_14.Q
ANDN PRGRUN_CN0                
S    %ServiceMillePGM.14

LD   M30_CN0                    
OR   MACCEND.yInAlarm
OR   Pul_Reset       
OR   FT_PRGRUN.Q    
OR   ON_ONE_SCAN           
R    %ServiceMillePGM.14

******************************************************************
*** END REQUEST GO AXES TO SERVICE POSITION      --------------###
******************************************************************

******************************************************************
*   CAPACITIVE TEST REQUEST
******************************************************************
CAL  RTRIG9(CLK=CapacitveTest)     ** (gGui1.21)Capacitive test

LD   RTRIG9.Q                       **(gGui1.18)Puizia Ugello Su Spazzola    
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso 
S    ReqCapacitveTest              ** (gPlc13.27) Capacitive test request

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   MACCEND.yInAlarm
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   FT_PRGRUN.Q                    ** Dwn Programma in corso
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    ReqCapacitveTest              ** (gPlc13.27) Capacitive test request


******************************************************************
*FINE RICH: ROUTINE DI PULIZIA UGELLO SU SPAZZOLA     ---------###
******************************************************************

******************************************************************
* GESTIONE ESECUZIONE AUSILIARIA 1000.PGM   -------------------###
******************************************************************
* Rich.START da On\Off (Aux)

LD   R_TRIGAux.Q         ** Fronte Up START per funzioni ausiliarie (1000.pgm)
OR   StartAuxMode                  ** (gPlc0.28)Rich.START per funzioni ausiliarie (1000.pgm)
AND  ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN EMER_GEN                      ** M0.10 Emergenza generale
ST   StartAuxMode                  ** (gPlc0.28)Rich.START per funzioni ausiliarie (1000.pgm)

* Esecuzione ausiliaria 1000.PGM

LD   ReqAcqOrig                    ** (gPlc13.1)Richiesta acquisizione origine
OR   ExeCalibraz                   ** (LsPlc11.0) Richiesta esecuzione Calibrazione
OR   Exe_SELF_Calibraz             ** (LsPlc11.7) Richiesta esecuzione Calibrazione
OR   ReqServicePosition            ** (gPlc13.29) Request go Axes to Service Position
OR   exeaux_for_mancut               ** (LsPlc47.8) manual cut request       
OR   BreakPosReq                   ** (LsPlc47.17) Request break point positioning
OR   exe1000                       ** (C57.3) Exexute 1000.pgm to refresh graphic origin and angle    
OR   ExeApaRequest                 ** (LsPlc47.15) Apa request from user
OR   ReqPuliziaUgello              ** (gPlc13.24)Richiesta routine di pulizia ugello su spazzola
AND  MACC_TARATA                   ** (gPlc0.9)Assi tarati
OR   %ServiceMillePGM.0             * Laser Shoot-on 
OR   %ServiceMillePGM.1             * Spindle aligment
OR   %ServiceMillePGM.2             * Calibration checking
OR   %ServiceMillePGM.5             * UserIso
OR   %ServiceMillePGM.6             * RTCP control function
OR   %ServiceMillePGM.7             * Parking Spindle to 0 quota 
OR   %ServiceMillePGM.8             * Semi Loading Request
OR   %ServiceMillePGM.10            * Semi Tube Loading 
OR   %ServiceMillePGM.11            * Weld seam identification
OR   %ServiceMillePGM.15            * Park all Unloader Supports with flaps
ST   ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM

LD   GESTCH0.xPPNumber
EQ   1000
AND  ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
AND  TON_ABIL.Q          * Abilitazione drives
ST   Appoggio                      ** Appoggio

CAL R_TRIGAux(CLK=Appoggio)        ** Fronte Up START per funzioni ausiliarie (1000.pgm)
******************************************************************
* FINE GESTIONE ESECUZIONE AUSILIARIA 1000.PGM   --------------###
******************************************************************

*******************************************************************************
*   @@@ RICERCA BLOCCO
*******************************************************************************
CAL  F_TRIGQ(CLK=BUP_BLKSRC)       ** Fronte Dwn Ricerca blocco in corso
CAL  R_TRIGA(CLK=BLKSRC_END)       ** Fronte Up Ricerca blocco in corso
CAL  F_TRIGA(CLK=BLKSRC_END)       ** Fronte Down Ricerca blocco in corso

LD   R_TRIGA.Q                      ** Fronte Up Ricerca blocco in corso
S    StartAutoRicBlc               ** Start automatico dopo ricerca blocco

LD   F_TRIGA.Q                      ** Fronte down ricerca blocco terminata
R    StartAutoRicBlc               ** Start automatico dopo ricerca blocco

LD   StartAutoRicBlc               ** Start automatico dopo ricerca blocco
ST   %PLCmsg0.9                     ** Ricerca blocco in corso...

LD   %cn0.rc8.8                     ** Ricerca blocco in corso
AND  BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
ST   RICBLOCCO                     ** (gPlc2.19)Comando Ricerca Blocco

LD   RICBLOCCO                     ** (gPlc2.19)Comando Ricerca Blocco
S    ForceSimulaPls                ** (gPlc2.20)Forxamento simulazione per VRTC in fase di Ricerca blocco

LD   PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
ORN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
R    ForceSimulaPls                ** (gPlc2.20)Forxamento simulazione per VRTC in fase di Ricerca blocco

***
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
JMPCN NoResTrack

LD   0
ST   NumTraccia                    ** Numero traccia in esecuzione

LD   %LSRPlcOp0.5                  ** Worklist mode enabled
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
JMPCN NoResTrack

LD   0
ST   plc_GEOMETRIA                 ** GEOMETRIA
ST   plc_PEZZO                     ** PEZZO

NoResTrack:

* Select channel for block search
LD   MACCH_IN_AUTO                 ** M100.25 SELEZIONE MACCHINA IN AUTOMATICO
JMPCN no_write_ui  
LD    2147483648
ST   UIBlockSearchInfo             ** ui38.31 enable channel selection from ui, other bit select channel number for blok search
no_write_ui:

* Abort Ricerca blocco --------------------------------------------------
LD   F_TRIGQ.Q          ** Fronte Dwn Ricerca blocco in corso
ANDN %cn0.rc8.15         * Fine ricerca blocco
OR (
LD   F_TRIGQ.Q          ** Fronte Dwn Ricerca blocco in corso
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
)
OR (
LD   %Uipl.Page
NE   5001                   ** Full screen graphic
AND (
LD   UiplPagePrec
EQ   5001                   ** Full screen graphic
)
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
)
S    AbortRicBlc                   ** Abort ricerca blocco

LDN  %cn0.rc8.0          * Programma in corso
ORN  %cn0.rc8.8          * Ricerca blocco in corso
ANDN BUP_BLKSRC                    ** ui16.24 Selezione esecuzione ricerca blocco
R    AbortRicBlc                   ** Abort ricerca blocco

LD   AbortRicBlc                   ** Abort ricerca blocco
R    BUP_BLKSRC_PAGE               ** User in block search page

CAL  TP_AbortRicBlc(IN=AbortRicBlc,PT=1000) ** Abort ricerca blocco

LD   %Uipl.Page
ST   UiplPagePrec


******************************************************************
* GESTIONE CANALE 0    ----------------------------------------###
******************************************************************
PATH %cn0

LD   -1
ST   GESTCH0.xPPNumber

*(#WLIST)
LD   %LSRPlcOp0.5                  ** Worklist mode enabled
JMPCN NO_WLIST_SEL

LD   9999                       ** Programma gestione liste = 9999.PGM
ST   GESTCH0.xPPNumber

NO_WLIST_SEL:

LD   ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
JMPCN PROG_FIX

LD   1000
ST   GESTCH0.xPPNumber
PROG_FIX:

LD   %Raster_Param.dwRasterFlags.1 
ANDN %LSRPlcOp0.5                  ** Worklist mode enabled
JMPCN no_raster_enable

LD   10000
ST   GESTCH0.xPPNumber
no_raster_enable:

LD   GESTCH0.xPPNumber
ST   varGESTCH0_xPPNumber          ** (LsPlc49) Program selected for excution in CH0

LD   EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTCH0.xMatJog      * Ab. matrici dinamiche per il JOG (provv.)

** -----------------------
** Gestione Retrace ------
** -----------------------
*(In caso di esecuzione DryRun bisogna filtrare PRGSTOP_CN0 perch?il RETRACE)
*(da un fronte appunto su PRGSTOP_CN0 che cmi setta erroneamente M_HOLD      )

CAL  TON0(IN=PRGSTOP_CN0,PT=500)   ** Filtro su programma interrotto in caso di esecuzione "DryRun"
CAL  TOF1(IN=Pul_Start,PT=1500)    ** Filtro su Pulsante start

*LD   PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
LD   TON0.Q              ** Filtro su programma interrotto in caso di esecuzione "DryRun"
ANDN TOF1.Q              * Filtro su Pulsante di "Start"
ANDN %PlcOp0.2                     ** DryRun
OR(
LD   TON0.Q              ** Filtro su programma interrotto in caso di esecuzione "DryRun"
AND  %PlcOp0.2                     ** DryRun
)
ST   Appoggio                      ** Appoggio

*CAL R_TRIG_HOLD(CLK=PRGSTOP_CN0) ** (cn0.rc8.1)Fronte UP Programma interrotto CN0
CAL R_TRIG_HOLD(CLK=Appoggio)      ** (cn0.rc8.1)Fronte UP Programma interrotto CN0

LD   R_TRIG_HOLD.Q       ** (cn0.rc8.1)Fronte UP Programma interrotto CN0
S    M_HOLD                        ** (gPlc19.0)Mem. Richiesta Hold

LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
OR   StartAftTipTouch              ** (LsPlc47.2) Start after tip touch
AND  PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
S    memResHold                    ** mem.richiesta RESET HOLD

LD   memResHold                    ** mem.richiesta RESET HOLD
ANDN WaitVRTC_OK                   * (LsPlc47.30) Wait Regulation ok,  it avoid turn on laser and start the axis before head down
ANDN PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
ORN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   EMER_GEN                      ** M0.10 Emergenza generale
R    memResHold                    ** mem.richiesta RESET HOLD
R    M_HOLD                        ** (gPlc19.0)Mem. Richiesta Hold

* Nota: il Retrace e` consentito solamente all'interno di una traccia
* Retrace abilitato

LD   M7000_RETR                    ** M7000: Retrace enable
***ANDN M_HOLD              ** Mem. Richiesta Hold
S    RetraceEnab                   ** Retrace abilitato

LD   M8000_RETR                    ** M8000: Retrace disable
ANDN M_HOLD                        ** (gPlc19.0)Mem. Richiesta Hold
ORN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
R    RetraceEnab                   ** Retrace abilitato

* Stop Retrace avanti

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  %cn0.rc64.25        * Comando FWD Retrace
AND  M8000_RETR                    ** M8000: Retrace disable
S    StopRetrAv                    ** Stop Retrace avanti

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  %cn0.rc64.26        * Comando REV Retrace
ORN  RetraceEnab                   ** Retrace abilitato
ORN  M_HOLD                        ** (gPlc19.0)Mem. Richiesta Hold
R    StopRetrAv                    ** Stop Retrace avanti

* Stop Retrace indietro

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  %cn0.rc64.26        * Comando REV Retrace
AND  M7000_RETR                    ** M7000: Retrace enable
S    StopRetrInd                   ** Stop Retrace indietro

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  %cn0.rc64.25        * Comando FWD Retrace
ORN  RetraceEnab                   ** Retrace abilitato
ORN  M_HOLD                        ** (gPlc19.0)Mem. Richiesta Hold
R    StopRetrInd                   ** Stop Retrace indietro

***
* Operative mode channel 0

LD   XxS500_PulSelREF              ** EXTBTN3.2 REF   Mode from S500 Keyboard
OR   I_I_SEL_REF                   ** Sel REF state
OR   RemContrRef                   ** Xhc_Puls.2  Sel ref mode
OR   (                                                                              
LD   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
ANDN MACC_TARATA
)                                                                                   
ST   Op_Mode0.xSelRef    

CAL  RT_ZEROED(CLK=MACC_TARATA)    ** Assi tarati

LD   I_I_SEL_SINGLEREF             ** Sel SINGLE REF state
ST   Op_Mode0.xSelSingRef    
                                                                                                                    
LD   XxS500_PulSelJOG              ** EXTBTN3.4 JOG   Mode from S500 Keyboard
OR   I_I_SEL_JOG                   ** Sel JOG state
OR   RemContrJog                   ** Xhc_Puls.1  Sel jog mode
OR   RT_ZEROED.Q                   * Assi tarati
OR   ContrJogFromBtn
ANDN REF_RUN                       ** M0.12 Taratura in corso
AND  MACC_TARATA
ST   Op_Mode0.xSelJog 
                                                      
CAL  RT_AuxMode(CLK=ExeAuxMode)    ** (gPlc0.29)Fronte Up Esecuzione ausiliaria (1000.pgm)
                                                                                                        
LD   XxS500_PulSelAUT              ** EXTBTN3.3 AUTO  Mode from S500 Keyboard
OR   I_I_SEL_AUT                   ** Sel AUT state
OR   (                                                                                                  
LD   ON_ONE_SCAN                  ** PLCFLAGS.8  Flag on alla prima scansione PLC
AND  AxesAreAbsolute               ** (LsPlc47.19) All axes are absolute
)                                                                                                                       
OR   RT_AuxMode.Q                  ** (gPlc0.29)Fronte Up Esecuzione ausiliaria (1000.pgm)
OR   RemContrAuto                  ** Xhc_Puls.0  Sel auto mode              
OR   %ServiceMillePGM.3
OR   %ServiceMillePGM.12
OR   %ServiceMillePGM.13
OR   %ServiceMillePGM.14
OR   ReqCapacitveTest
ANDN REF_RUN                       ** M0.12 Taratura in corso
AND  MACC_TARATA
ST   Op_Mode0.xSelAut      
                                                                                    
LD   XxS500_PulSelINC              ** EXTBTN3.5 INC   Mode from S500 Keyboard
OR   I_I_SEL_INC                   ** Sel INC state
AND  MACC_TARATA
ST   Op_Mode0.xSelInc    

LD   XxS500_PulSelMDI              ** EXTBTN3.6 MDI   Mode from S500 Keyboard
AND (
LD   %Uipl.Page
EQ   3000
)
OR   I_I_SEL_MDI                   ** Sel MDI state
AND  MACC_TARATA
ST   Op_Mode0.xSelMdi 

CAL  Op_Mode0

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH0.xCmdFromInput

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH0.xEscOpCmd

LD   Op_Mode0.ySelRef
ST   GESTCH0.xSelREF

LD   Op_Mode0.ySelSingRef
ST   GESTCH0.xSingleRef

LD   Op_Mode0.ySelJog
OR   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
ST   GESTCH0.xSelJOG

LD   Op_Mode0.ySelInc
ST   GESTCH0.xSelINC

LD   Op_Mode0.ySelMdi
*todo
*AND (
*LD   UP_SELCHAN                    ** ui17 Canale selezionato da monitor canale
*EQ   0
*)
ST   GESTCH0.xSelMDI

LD   Op_Mode0.ySelAut
ST   GESTCH0.xSelAUT

LD   %PLCFLAGS.1
ST   GESTCH0.xModRetrace * selezione modalit?retrace attiva (esterna)

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  RetraceEnab                   ** Retrace abilitato
ANDN StopRetrAv                    ** Stop Retrace avanti
ST   GESTCH0.xRTPlus               * comando + in retrace
ST   RetrPlusReq                   ** (LsPlc47.9) Request of positive retrace

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
OR   RetraceCommBack               ** (LsPlc47.11) Retrace command after hold
***OR   JogCommandTipTouch            ** (LsPlc47.0) Automatic jog command for tip touch
AND  RetraceEnab                   ** Retrace abilitato
ANDN StopRetrInd                   ** Stop Retrace indietro
ST   GESTCH0.xRTMinus    * comando - in retrace       
ST   RetrMinusReq                  ** (LsPlc47.10) Request of negative retrace

LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  StartEnabAut                  ** Abilitazione start in Automatico
AND  MACC_TARATA                   ** (gPlc0.9)Assi tarati
AND  ch0_in_aut                    ** channel 0 in aut
OR(                                                                                             
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  ch0_in_ref                    ** channel 0 in ref
)                                                                                               
AND  StartEnab                     ** Abilitazione start
OR(                                                                                             
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  MACC_TARATA                   ** (gPlc0.9)Assi tarati
AND  BSG_MDI                       ** rg1.3 Selezione modo MDI (semiautom)
AND  StartEnab                     ** Abilitazione start
)                                                                                               
OR(                                                                                             
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  %funz0.Enab.0                 * Rotazione origine                                          
AND  AwaitStart                    ** Attesa Start
AND  PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
)                                                                                               
OR(                                                                                             
LD   StartAuxMode                  ** (gPlc0.28)Rich.START per funzioni ausiliarie (1000.pgm)
AND  StartEnab                     ** Abilitazione start
)     
OR(
LD  ExePipeCalib                  ** (CalPipe.General.3) Exe Pipe Calibration
AND  StartEnab
)                                                                                        
OR (                                                                                            
LD   StartAutoRicBlc               ** Start automatico dopo ricerca blocco
AND  RICBLOCCO                     ** (gPlc2.19)Comando Ricerca Blocco
AND  BLKSRC_END                    ** Ricerca blocco terminata
)                                                                                               
OR (                                                                                            
LD   StartStateBSearch2            ** 
AND  BLKSRC_END                    ** Ricerca blocco terminata
)                                                                                               
OR (
LD   StartCycleUserReq             ** (gPlc13.15) Richiesta START ciclo da Logica "User.plc"
OR   StartAftTipTouch              ** (LsPlc47.2) Start after tip touch
AND  StartEnab                     ** Abilitazione start
)
OR(
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  BCI_MDI                       ** rc0.11  Selettore modi operativi su MDI (semiautom)
AND (
 LD   UP_SELCHAN                    ** ui17 Canale selezionato da monitor canale
 EQ   0
)
ANDN EMER_GEN                      ** M0.10 Emergenza generale
)
ANDN MACCEND.yInAlarm                                                                           
ANDN TOF_RESET.Q                   * Reset                                                      
ST   GESTCH0.xStart                              

*******************************************************************************
*   @@@ RICERCA BLOCCO
*******************************************************************************

LD   BUP_BLKSRC_PAGE               ** User in block search page
ST   GESTCH0.xBlkSearch

LD   %PLCFLAGS.1
ST   GESTCH0.xIntBlkSrc    * Forzam. esec. ricerca blocco interna

LD   %PlcOp0.2                     ** DryRun
ST   GESTCH0.xSpeedDryRunEnab ** Ab. velocita' di Dry Run (disabled in cnc.plc)

LD   %PLCFLAGS.0
ST   GESTCH0.xOverstore  * Ab. overstore dopo ricerca blocco (provv.)

LD   CondHoldCN0                   ** Condizioni richiesta hold canale 0
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN BCO_CUSTOM_BOOT               ** rc8.18 Ciclo $BOOT in corso
ANDN BCO_CUSTOM_RESET              ** rc8.20 Ciclo $RESET in corso
ANDN PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
ST   GESTCH0.xHold                * comando Hold al canale (esterno)

LD   Res_Ch0                       ** (gPlc25.3) reset channel 0
ST   GESTCH0.xReset               * comando RESET al canale (esterno)

CAL  FTRIG_POT (CLK:=Pon)          ** PON
CAL  TP_FTRIG_POT(IN:=FTRIG_POT.Q,PT:=300)                                                   
            
LD   %cn0.rc8.0
AND (
LD   bevAngleHead1_calc1                  * (C154) head 1 bevel angle
GE   70000
)
AND  %uvHeads0.uvhCommand[0].1          * UVH_COMMAND_PLC_VRTC_HANDLING
S    alarm_tool_surface

LD   %cn0.rc8.0
AND (
LD   %cn0.rc18                      * CO_ERRCODE 
EQ   428                            * motion command error
)
S    alarm_motion_cmd_err

LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
R    alarm_tool_surface
R    alarm_motion_cmd_err

LD   alarm_tool_surface
ST   %PLCerr4.0

LD   alarm_motion_cmd_err
ST   %PLCerr4.1

* todo CAL  RTRIG_TIPTOUCH(CLK:=%PLCerr5.4)
            
LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   Pul_Stop                      ** (gPlc0.2)Stop pushbutton
AND  ch0_in_ref                    ** channel 0 in ref
OR   EMER_GEN                      ** M0.10 Emergenza generale
***OR   LsrVrtcFcSoftware             ** (LsPlc0.31)Intervento Fc Sofware in lavorazione Laser
OR   TP_FTRIG_POT.Q  
OR (
LD   %vrtc1.VrdwStatRegister1.2     * Upper mandatory position limit reached
OR   %vrtc1.VrdwStatRegister1.3     * Lower mandatory position limit reached
AND  %vrtc1.VrdwCtrlRegister0.1
)
* todo OR   RTRIG_TIPTOUCH.Q
OR   alarm_tool_surface
OR   alarm_motion_cmd_err
OR   Pul_Reset_EMERG                * Tasto RESET premuto per pi?di 4 secondi
ST   GESTCH0.xEmer

LD   ChannelFeedrate               ** feedrate for channel
ST   GESTCH0.xOverride
ST   AxesOverride

**********************************************************************
* Limitazione 10% to 100% in case of following supports in descending
**********************************************************************
LD   EnVSuppFeedRec
JMPCN STATE_EN_VSREC
LD   GESTCH0.xOverride
MULDIV(M=VSuppFeedReduction,D=1000)
ST   GESTCH0.xOverride
STATE_EN_VSREC:
**********************************************************************

CAL  GESTCH0

*******************************************************************************
*   @@@ RICERCA BLOCCO
*******************************************************************************
LD   GESTCH0.yBlkSearch
ST   BLKSRC_RUN                    ** Ricerca blocco in corso

LD   GESTCH0.yBlkSrcEnded * ricerca blocco terminata
ST   BLKSRC_END                    ** Ricerca blocco terminata

LD   0
ST   %cn0.BlkSearch.MskMoveA

LD   16#32
ST   %cn0.BlkSearch.Option

LD   BUP_BLKSRCPOINT               ** ui16.31 Ricerca blocco su punto intermedio
JMPCN INTPOINT

LD   16#72
ST   %cn0.BlkSearch.Option

INTPOINT:
LD   -1
ST   %ui6           ** Non generare M su overstore automatico
ST   %ui7           ** Non generare S/T su overstore automatico



***********************************************
* Gestione Informazioni per ripresa lavorazione
***********************************************

LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  ch0_in_aut                    ** channel 0 in aut
ANDN ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
S    MEM_INTPROG                   ** R15.0 Mem. programma valido per ripresa pezzo

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
ANDN ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
OR   BUP_PROGSEL                   ** ui16.30 Impulso selezione programma
R    MEM_INTPROG                   ** R15.0 Mem. programma valido per ripresa pezzo

* Lettura dati correnti durante esecuzione programma

LD   %cn0.rc8.0          * Programma in corso canale 0
ANDN %cn0.rc0.0          * Reset NC
***ANDN KeyStop_Tp          ** Stop level
ANDN %cn0.rc8.1          * rc8.1  Programma interrotto
ANDN %cn0.rc8.8
ANDN ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
JMPCN READ

LD   %cn0.lev0.curline
ST   CURRENT_LINE                  ** Numero riga corrente del part program in esecuzione

*******************************************
*   Calcola la posizione del TCP sul piano
*   della macchina
*******************************************
LDN  Gest5Ax                        ** (gPlc0.0)Gestione MAcchina 5 assi
JMPC Normal

LD   %ax0.ra54          ** X TCP
ST   locX                          ** Used in block search (ricerca blocco)

LD   %ax1.ra54          ** Y TCP
ST   locY                          ** Used in block search (ricerca blocco)

LD   %cn0.mat.sts0
EQ   16#B
JMPCN identity

LD   locX                          ** Used in block search (ricerca blocco)
DIV  100                ** DIV per problemi di overflow
MUL  %cn0.mat.a0
ADD  (
LD   locY                          ** Used in block search (ricerca blocco)
DIV  100
MUL  %cn0.mat.a1
)
DIV  10
ADD  (
LD   %cn0.mat.a3
DIV  1000
)
ST   XactualQta                    ** X actual quota Used in block search (ricerca blocco)

LD   locX                          ** Used in block search (ricerca blocco)
DIV  100                ** DIV per problemi di overflow
MUL  %cn0.mat.a4
ADD  (
LD   locY                          ** Used in block search (ricerca blocco)
DIV  100
MUL  %cn0.mat.a5
)
DIV  10
ADD  (
LD   %cn0.mat.a7
DIV  1000
)
ST   YactualQta                    ** Y actual quota Used in block search (ricerca blocco)

JMP  ComHead

identity:
LD   locX                          ** Used in block search (ricerca blocco)
ST   XactualQta                    ** X actual quota Used in block search (ricerca blocco)

LD   locY                          ** Used in block search (ricerca blocco)
ST   YactualQta                    ** Y actual quota Used in block search (ricerca blocco)

JMP  ComHead

Normal:
LD   %ax0.ra4           ** X
ST   XactualQta                    ** X actual quota Used in block search (ricerca blocco)

LD   %ax1.ra4           ** Y
ST   YactualQta                    ** Y actual quota Used in block search (ricerca blocco)

ComHead:
LD   XactualQta                    ** X actual quota Used in block search (ricerca blocco)
SUB  ORIGPRGX                      ** Origine programmata X
ST   MEM_XQUOTE                    ** R13 Memorizza quota X per collimazione ricerca blocco

LD   YactualQta                    ** Y actual quota Used in block search (ricerca blocco)
SUB  ORIGPRGY                      ** Origine programmata Y
ST   MEM_YQUOTE                    ** R14 Memorizza quota Y per collimazione ricerca blocco

READ:
* Azzera dati se programma non valido

LD   MEM_INTPROG                   ** R15.0 Mem. programma valido per ripresa pezzo
JMPC END_VALPR

LD   0
ST   CURRENT_LINE                  ** Numero riga corrente del part program in esecuzione
ST   MEM_XQUOTE                    ** R13 Memorizza quota X per collimazione ricerca blocco
ST   MEM_YQUOTE                    ** R14 Memorizza quota Y per collimazione ricerca blocco

END_VALPR:

* Passa i dati alla UI
* NB: occorre saltare l'aggiornamento nella modalita di overstore/auxcmd

LD   %cn0.rc8.26
ANDN %cn0.rc8.24
OR(
LD   %cn0.rc8.27
ANDN %cn0.rc8.25
)
JMPC OVERSTORERUN

LD   CURRENT_LINE                  ** Numero riga corrente del part program in esecuzione
*ADD  1
ST   PU_LASTLINE                   ** ui13 Ultima linea eseguita per ricerca blocco

LD   MEM_XQUOTE                    ** R13 Memorizza quota X per collimazione ricerca blocco
ST   PU_QCOLX                      ** ui2 Quota asse X collimazione ricerca blocco

LD   MEM_YQUOTE                    ** R14 Memorizza quota Y per collimazione ricerca blocco
ST   PU_QCOLY                      ** ui3 Quota asse Y collimazione ricerca blocco

OVERSTORERUN:

* Abilita quote per collimazione ricerca blocco

LD   MEM_INTPROG                   ** R15.0 Mem. programma valido per ripresa pezzo
ST   PLC_BPU_ENCOLDATA             ** ui0.31 Abilita quote per collimazione ricerca blocco

LD   PLC_BPU_ENCOLDATA             ** ui0.31 Abilita quote per collimazione ricerca blocco
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ST   ResumeProgEnab                ** (gPlc25.0) Data avaiable for resume program

LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
ANDN ExeAuxMode                    ** (gPlc0.29)Esecuzione ausiliaria 1000.PGM
AND  ch0_in_aut                    ** channel 0 in aut
S    BlackOut                      ** (R55.31)Interruzione per BlackOut

LD   FT_PRGRUN.Q        ** Dwn Programma in corso
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   M30_CN0                       ** M0.13 M30:EndProgram CN0
R    BlackOut                      ** (R55.31)Interruzione per BlackOut


*******************************************************************************


LD   GESTCH0.yProgramRun * Programma in corso
ST   PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso

LD   BCO_STB_GET                   ** rc8.17 Strobe per GET resources
AND  AxStopSincGRP                 ** (gPlc13.11)Assi Fermi per sincronismo GRP[ax]
ST   BCI_ACK_GET                   ** rc0.29  ACK per GET resource

LD   GESTCH0.xRTPlus     * comando + in retrace
AND  %cn0.rc64.25        * Comando FWD Retrace
OR(
LD   GESTCH0.xRTMinus    * comando - in retrace
AND  %cn0.rc64.26        * Comando REV Retrace
)
AND  M_HOLD                        ** (gPlc19.0)Mem. Richiesta Hold
ST   Appoggio                      ** Appoggio

CAL  TOF_0(IN=Appoggio,PT=1000)    ** Appoggio

LD   TOF_0.Q
ST   RETRACERUN                    ** M0.11 Ciclo di retrace in Run


**************************
* FUNZIONI M DI SERVIZIO *
*      CANALE 0          *
**************************

LD   %rc9                * Registro funzioni M canale 0
EQ   10
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M10_CN0                       ** M0.14 M10: Attiva Hold + Jog CN0

LD   %rc9                * Registro funzioni M canale 0
EQ   30
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M30_CN0                       ** M0.13 M30:EndProgram CN0

LD   %rc9                * Registro funzioni M canale 0
EQ   2
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M2_CN0                        ** M0.28 M2: EndProgram CN0 M2

LD   %rc9                * Registro funzioni M canale 0
EQ   32
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M32TglMan                     ** M32: Attesa inizio taglio manuale

****************************************************************************************************


*** *** ***

LD   %rc9                * Registro funzioni M canale 0
EQ   600
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M600_G81_84                   ** Richiesta Sblocco M40000_CN4: Richiesta Servizio per Unit_2]

CAL  TP_1(IN=M600_G81_84,PT=1000)  ** Impulso sblocco M40000

**************************
LD   %rc9                * Registro funzioni M canale 0
EQ   7000
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M7000_RETR                    ** M7000: Retrace enable

LD   %rc9                * Registro funzioni M canale 0
EQ   8000
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M8000_RETR                    ** M8000: Retrace disable
**************************


********************************************************************************
* DB Laser upload synchronism
********************************************************************************
*LD   %LSRPlcOp0.5                  ** Worklist mode enabled
*AND  %WlistMngt.wl_flag.0       ** Se codice DB gestito nella linea della lista di lavoro
*ORN  %LSRPlcOp0.5                  ** Worklist mode enabled
*JMPCN NoLoadDB

LD   %cn0.rc9                   ** Registro funzioni M canale 0
EQ   1000
AND  %cn0.rc8.4                 ** Strobe funzioni M canale 0
OR   isoLoadRecord                 ** (LsIso10.3) Load database record with Block search in run
ST   Up_Load_DB                    ** upload DB request

CAL  RTRIG_CAR_DB(CLK:=Up_Load_DB) ** Trig on upload DB request

LD   RTRIG_CAR_DB.Q
S    UpLoad_DB_Laser               ** (LsPlc0.0 )Comando Caricamento DataBase Laser

*NoLoadDB:
LD   FeedbackDBloaded              ** (LsGui1.0) upload DB request
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   ON_ONE_SCAN                   ** PLCFLAGS.8  Flag on alla prima scansione PLC
R    UpLoad_DB_Laser               ** (LsPlc0.0 )Comando Caricamento DataBase Laser
R    isoLoadRecord                 ** (LsIso10.3) Load database record with Block search in run
R    Up_Load_DB                    ** upload DB request


***********************************************************************************

LD   %rc9                * Registro funzioni M canale 0
EQ   9999
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M9999                         ** M9999: Abilitazione Start pae Canali Ausiliari

LD   M9999                         ** M9999: Abilitazione Start pae Canali Ausiliari
S    EabStartCnAux                 ** Abilitazione Start per canali ausiliari

LDN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
R    EabStartCnAux                 ** Abilitazione Start per canali ausiliari

LD   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   M2_CN0                        ** M0.28 M2: EndProgram CN0 M2
S    PRGRUN_CN0_END                ** M0.4 Programma su canale 0 terminato con M30

LDN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN PRGRUN_CN3                    ** M0.2 cn3.rc8.0  Programma in corso
R    PRGRUN_CN0_END                ** M0.4 Programma su canale 0 terminato con M30

* Sincronismo Richiesta servizio Da canale 0 a "Unit?Teste"
LD   %rc9                * Registro funzioni M canale 0
EQ   10000
AND  %rc8.4              * Strobe funzioni M canale 0
ANDN UnlockCn0funzReq              ** Sblocco richiesta servizio da CN0 [(M10000 iniziolav.) / M10001(finelav.)]
ST   M10000_CN0                    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)

LD   %rc9                * Registro funzioni M canale 0
EQ   10001
AND  %rc8.4              * Strobe funzioni M canale 0
AND  UnlockCn0funzReq              ** Sblocco richiesta servizio da CN0 [(M10000 iniziolav.) / M10001(finelav.)]
ST   M10001_CN0                    ** M0.9 M10001_CN0: Invoca Unit_1 (finelavorazione)

CAL R_TRIG10000(CLK=M10000_CN0)    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)
CAL R_TRIG10001(CLK=M10001_CN0)    ** M0.9 M10001_CN0: Invoca Unit_1 (finelavorazione)
CAL F_TRIG10000(CLK=M10000_CN0)    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)
CAL F_TRIG10001(CLK=M10001_CN0)    ** M0.9 M10001_CN0: Invoca Unit_1 (finelavorazione)

LD   R_TRIG10000.Q       ** FronteUp M10000_CN0: Invoca Unit_1 (inizialavorazione)
JMPCN INIZIOLAV
LD    1
ST   %FunzRequest                  ** Funzione richiesta per Unit_1
INIZIOLAV:

LD   R_TRIG10001.Q       ** Fronteup M10001_CN0: Invoca Unit_1 (finelavorazione)
JMPCN FINELAV
LD    2
ST   %FunzRequest                  ** Funzione richiesta per Unit_1
FINELAV:

LD   R_TRIG30000.Q       * FronteUp M30000_CN3: Attendi Servizio per Unit_1
OR   RT_PRGRUN.Q         ** Up Programma in corso
OR   FT_PRGRUN.Q         ** Dwn Programma in corso
JMPCN RESETVAL
LD   0
ST   %FunzRequest                  ** Funzione richiesta per Unit_1
RESETVAL:

**************************
* Attesa Start Con M10   *
**************************
CAL  RT_M10(CLK=M10_CN0)           ** M10: Attiva Hold + Jog

LD   RT_M10.Q            * M10: Attiva Hold + Jog
AND  AwaitStart                    ** Attesa Start
S    RestartOk                     ** Restart Ok (M10)

LD   RT_M10.Q            * M10: Attiva Hold + Jog
S    AwaitStart                    ** Attesa Start

LDN  M10_CN0                       ** M0.14 M10: Attiva Hold + Jog CN0
AND  RestartOk                     ** Restart Ok (M10)
ORN  %cn0.rc8.0          * Programma in corso
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
R    AwaitStart                    ** Attesa Start
R    RestartOk                     ** Restart Ok (M10)

******************************************************************
* FINE GESTIONE CANALE 0    -----------------------------------###
******************************************************************

LD   %cn3.cc1.2           * Maschera assi associata al canale 0
ANDN GESTAX29.yZeroed     * Asse tarato
AND  ch3_in_ref                    ** channel 3 in ref
ANDN PLC_SEL_SINGREF               ** ui16.28 Selezione REF singolo
ST   AxesHeadNoZeroed              ** Assi Testa non riferiti

******************************************************************************
*   GESTIONE LISTE DI LAVORO
*   (#WLIST)
******************************************************************************
LD   %LSRPlcOp0.5                  ** Worklist mode enabled
ST   WORK_LIST_MAIN.xEnable

LD   PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ST   WORK_LIST_MAIN.xProgRun

LD   LaserOn                       ** (LsPlc1.25) Per GUI  LaserOn
ST   WORK_LIST_MAIN.xEmissionOn

CAL  WORK_LIST_MAIN

******************************************************************************
* Allow general close loop timer

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
ST   GeneralCloseLoop

******************************************************************************
*   GESTIONE ASSE VIRTUALE X
******************************************************************************
PATH %ax0

LD   %PLCFLAGS.0
ST   GESTAX0.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX0.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX0.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX0.xRefLS

*LD   %PLCFLAGS.0
*ST   GESTAX0.xSelected

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
AND  GESTAX27.xSelected
ST   GESTAX0.xSelected

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
AND  GESTAX27.xSelected
AND  %FUNCBTN.2
ST   GESTAX0.xJogPlus

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
AND  GESTAX27.xSelected
AND  %FUNCBTN.3
ST   GESTAX0.xJogMinus

LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   CMD_HOLDMOVING_CH3.0          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX0.xHoldMoving * Richiesta blocco avanzamento

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX0.xEnFIR      * Abilita filtri FIR

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX0.xZeroForced * Forzamento asse tarato
ST   GESTAX0.xLockRef    * Blocco avvio ciclo REF da canale

*LD   %cn0.DisabVisAX.0
*ST   GESTAX0.xDisabVis    * Disabilita visualizzazone

CAL  GESTAX0

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX:


******************************************************************************
*   GESTIONE ASSE VIRTUALE Y
******************************************************************************
PATH %ax1

LD   %PLCFLAGS.0
ST   GESTAX1.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX1.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX1.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX1.xRefLS

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
AND  GESTAX28.xSelected
AND  %FUNCBTN.2
ST   GESTAX1.xJogPlus

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
AND  GESTAX28.xSelected
AND  %FUNCBTN.3
ST   GESTAX1.xJogMinus

*LD   %PLCFLAGS.0
*ST   GESTAX1.xSelected

LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
AND  PRGSTOP_CN0                   ** (M0.27)  Programma interrotto CN0
AND  GESTAX28.xSelected
ST   GESTAX1.xSelected

LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvY1_user                  ** M74.4 Blocco avanzamento asse Y da user.plc
OR   CMD_HOLDMOVING_CH3.1           ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX1.xHoldMoving * Richiesta blocco avanzamento

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX1.xEnFIR      * Abilita filtri FIR

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX1.xZeroForced * Forzamento asse tarato
ST   GESTAX1.xLockRef    * Blocco avvio ciclo REF da canale

CAL  GESTAX1

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIY

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIY:

******************************************************************************
*   GESTIONE ASSE VIRTUALE Z
******************************************************************************
LD  %cn0.cc1.2           * Maschera assi associata al canale 0
JMPCN NOAX2

PATH %ax2

LD   %PLCFLAGS.0         * Flag sempre stato on
ST   GESTAX2.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0         * Flag sempre stato on
ST   GESTAX2.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX2.xCloseLoop

LD   %PLCFLAGS.0         * Flag sempre stato off
ST   GESTAX2.xRefLS

LD   %PLCFLAGS.0
ST   GESTAX2.xSelected

LD   ALWAYS_ONE
ST   GESTAX2.xDisLimiter

LD   %PLCerr5.4      **PLC Err 164 Tip touch (A11=1, A14=0, A15=0 in normal operation)
AND  ax2_Commanded                 ** %ax2.ra3.13 Axis 2 commanded to moving
ANDN ax2_GoFordward                ** %ax2.ra3.2 Axis 2 moving to positive
OR   CMD_HOLDMOVING_CH3.2          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
***OR   JogCommandTipTouch
ST   GESTAX2.xHoldMoving * Richiesta blocco avanzamento
ST   GESTAX2_xHoldMoving

LDN  ch0_in_ref                    ** channel 0 in ref
ANDN DisabFir_CH0_axes.2
ST   GESTAX2.xEnFIR      * Abilita filtri FIR

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX2.xZeroForced * Forzamento asse tarato
ST   GESTAX2.xLockRef    * Blocco avvio ciclo REF da canale

CAL  GESTAX2

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   %vrtc5.VrdwCtrlRegister0.18 * De overlap 
JMPCN NOAX2

LD   0
ST   %ra50               * Limitazione velocita' massima interpolazione

NOAX2:

******************************************************************************
*   GESTIONE ASSE VIRTUALE U
******************************************************************************
LD   %cn0.cc1.3           * Maschera assi associata al canale 0
JMPCN NO_U

PATH %ax6

LD   %PLCFLAGS.0
ST   GESTAX6.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX6.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX6.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX6.xRefLS

LD   %PLCFLAGS.0
ST   GESTAX6.xSelected
                                    
LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   CMD_HOLDMOVING_CH3.3            ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX6.xHoldMoving * Richiesta blocco avanzamento

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX6.xZeroForced * Forzamento asse tarato
ST   GESTAX6.xLockRef    * Blocco avvio ciclo REF da canale

LD   %PLCFLAGS.0
ST   GESTAX6.xFromPlc

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX6.xEnFIR      * Abilita filtri FIR

CAL  GESTAX6

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC
NO_U:

******************************************************************************
*   GESTIONE ASSE VIRTUALE V
******************************************************************************
LD   %cn0.cc1.4           * Maschera assi associata al canale 0
JMPCN NO_V

PATH %ax7

LD   %PLCFLAGS.0
ST   GESTAX7.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX7.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX7.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX7.xRefLS

LD   %PLCFLAGS.0
ST   GESTAX7.xSelected
                                    
LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   CMD_HOLDMOVING_CH3.4            ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...) 
ST   GESTAX7.xHoldMoving * Richiesta blocco avanzamento

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX7.xZeroForced * Forzamento asse tarato
ST   GESTAX7.xLockRef    * Blocco avvio ciclo REF da canale

LD   %PLCFLAGS.0
ST   GESTAX7.xFromPlc

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX7.xEnFIR      * Abilita filtri FIR

CAL  GESTAX7

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC
NO_V:

******************************************************************************
*   GESTIONE ASSE REALE W (FOCALE)
******************************************************************************
LD   %ax9.ra83.4                   * PON Assi
OR   %ax9.pa3.31                   * Simulato
ORN  %cn0.cc1.5                    * Maschera assi associata al canale 0 W
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR   ( 
LD   I_I_READY_DRIVE_W             ** Ready signal drive W (external focal)
AND  (
LD   %ax9.nvel11
EQ   0
)
)
ST   Pon_WLens                     ** PON Axe W_Lens

LD  %cn0.cc1.5                     * Maschera assi associata al canale 0 W
JMPCN NOAX9

PATH %ax9
PATH %ax_lsref9

LD   %lsrefmode
ST   AXLSREF9.x_REF_mode        * 0=use ref switch...                                                                                                     
                  
LD   %lsreflevel                  
ST   AXLSREF9.x_TYPE_LS         * (1=NC, 0=NO)                                                                                                            
                                                                                                                                                           
LD   I_I_FC_W1_NEG                 ** W minimumm limit switch
ST   AXLSREF9.x_MIN_LS          * Min Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_FC_W1_POS                 ** W maximun limit switch
ST   AXLSREF9.x_MAX_LS          * Max Limit switch                                                                                                        
                                                                                                                                                           
*LD   I_I_INDEX_W1                  ** W1 Axis Homing Switch
LD   ALWAYS_ZERO                 
ST   AXLSREF9.x_REF_S           * Reference switch                                                                                                        
                                                                                                                                                           
CAL  AXLSREF9                                                                                                                                             
                                                                                                                                                           
LD   AXLSREF9.y_MIN_LS          * Min Limit switch                                                                                                        
ST   GESTAX9.xMinusLS           * Negative limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF9.y_MAX_LS          * Max Limit switch                                                                                                        
ST   GESTAX9.xPlusLS            * Positive limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF9.y_REF_S           * Reference switch                                                                                                        
ST   GESTAX9.xRefLS             * Reference

LD   TON_ABIL.Q                    * Abilitazione drives
ANDN TOF_MALARM.Q                  * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX9.xCloseLoop

LD   SelManAxe_Lens                ** (gGui0.14)Selezione W_Lens -
OR   (
LD   GSTMAC.yChSelMask.0
AND  SEL_ASSE.yExtMask.5
)
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ST   GESTAX9.xSelected

LD   WLensplus                     ** (gGui0.12)Comando W_Lens +
AND  EnabJogRTCP                   ** Abilita Jog RTCP
AND  SelManAxe_Lens                ** (gGui0.14)Selezione W_Lens -
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   WLensplus                     ** (gGui0.12)Comando W_Lens +
ST   GESTAX9.xJogPlus

LD   WLensmimus                    ** (gGui0.13)Comando W_Lens -
AND  EnabJogRTCP                   ** Abilita Jog RTCP
AND  SelManAxe_Lens                ** (gGui0.14)Selezione W_Lens -
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
OR   WLensmimus                    ** (gGui0.13)Comando W_Lens -
ST   GESTAX9.xJogMinus

LDN  ch0_in_ref                    ** channel 0 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX9.xEnFIR               * Abilita filtri FIR     
ST   GESTAX9.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX9.xDisLimiter

*LD   CMD_HOLDMOVING_CH3.5          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
LD   ALWAYS_ZERO
ST   GESTAX9.xHoldMoving          * Richiesta blocco avanzamento

CAL  TOF_GRANT_AX9 (IN:=Res_Axes,PT:=300) ** (gPlc25.1) reset axes disable electric shaft

LD   %cn0.rc8.2  *BCO_CANREADY        * rc8.2  Canale Ready
ANDN %ra3.15   *BAO_ALLM            * ra3.15  Asse in Allarme
ANDN ch0_in_ref                    ** channel 0 in ref
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
ANDN TOF_GRANT_AX9.Q
ST   GESTAX9.xFromPlc

*POSITIONING
    *{
        LD   %nvel11             * PAR-PLC tipo di drive, 4=Canopen positioning
        EQ   4
        JMPCN END_PREGESTAX_POSITIONINGA

        LD   %cn0.rc8.2  *BCO_CANREADY        * rc8.2  Canale Ready
        ANDN %ra3.15   *BAO_ALLM            * ra3.15  Asse in Allarme
        AND(
        LD   AX9_CAN.yax_BUSY
        OR   AX9_CAN_AUX.yax_BUSY
        ANDN %ra0.15   *BAI_RESALARM        * ra0.15 Ripristino allarme asse
        ORN  %pa3.31    *AP_OPZIONI31        * pa3.31 Asse in simulato
        OR   PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
        )
        ST   GESTAX9.xFromPlc

        END_PREGESTAX_POSITIONINGA:

        LD    100
        ST    %ra1
    *}   
  
LD   %PLCFLAGS.0
ST   GESTAX9.xZeroForced          * Forzamento asse tarato
ST   GESTAX9.xLockRef             * Blocco avvio ciclo REF da canale

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX9.xUnlock 

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
ST   GESTAX9.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX9

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX9.yDriveNotEn
ST   %PLCerr2.7                    * Axis 9, drive not enable

*--------- POSITIONING
  LD   %nvel11             * PAR-PLC tipo di drive, 4=Canopen positioning
  EQ   4
  JMPCN END_POSTGESTAX_POSITIONINGA
  
  LD   %rc8.2              * CN-PLC Canale Ready
  ANDN %rc0.1              * Emergenza dal canale agli assi
  ANDN %rc0.0              * PLC-CN Reset CN canale
  ST   AX9_CAN.xax_ENABLE
  ST   AX9_CAN_AUX.xax_ENABLE
  
  CAL  AX9_CAN
  
  CAL  AX9_CAN_AUX

END_POSTGESTAX_POSITIONINGA:
*--------- POSITIONING

LD   %pa9                          * Velocit?massima asse
MUL  1000                          
DIV  60                            
ST   %ra50                         * Limitazione velocita' massima interpolazione

LD   %vrtc5.VrdwCtrlRegister0.18   * De overlap 
JMPCN NOAX9BIS
LD   0
ST   %ra50                         * Limitazione velocita' massima interpolazione
NOAX9BIS:
     
LD   StartPosFocale                ** (LsIso86) Comando Posizione Focale
ORN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
R    LensPosEnd                    ** (LsPlc63.0) Lens positioning finish

CAL  TRIG_MOV_REQ (CLK:=PulsMoveFocal) ** (LsGui1.5) Focal command to move to set point
CAL  RTRIG_MOVE_REM_CONTR(CLK:=RemContrFoc0) ** Xhc_Puls.30 Move focal at 0 mm      *

LD   TRIG_MOV_REQ.Q
S    MoveByUser        

LD   RTRIG_MOVE_REM_CONTR.Q
S    MoveAtZero                    ** Remote controller command
 
LD   StartPosFocale                ** (LsIso86) Comando Posizione Focale
OR   MoveByUser   
OR   MoveAtZero                    ** Remote controller command
ST   POS_AX9.xax_ENABLE

LDN  POS_AX9.xax_ENABLE
ST   POS_AX9.xax_CLEAR

LD   POS_AX9.xax_ENABLE
AND  POS_AX9.yax_READY
ANDN POS_AX9.yax_ENDOK
ANDN POS_AX9.yax_ENDERR
ST   POS_AX9.xax_START

LD   %TabLsr0.L_CutFocal                   ** Valore focale passato da tabelle
ST   temp

***************************************
*   Focal=funz(angle)
*   #CDL
***************************************
LD   PRGRUN_CN0
ANDN PRGSTOP_CN0
AND (
LD   %uvHeads0.uvhCommand1
EQ   4                              * Cutting phase
)
AND  %LSRPlcOp0.3
JMPCN no_corr_focal
     LD   temp
     ADD (
     LD   temp
     MULDIV(M=%TsCutDataLinear.CDL_Focal,D=100000) * 100 %     
     )
     ST   temp
no_corr_focal:

LD   PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
JMPCN focal_by_program
     LD   temp
     ST   POS_AX9.xax_QUOTA
focal_by_program:

LDN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
JMPCN focal_by_user
LD   FocByUser                     ** (LsGui74) Set-point for focal movement by user
ST   POS_AX9.xax_QUOTA             

LD   MoveAtZero                    ** Remote controller command
JMPCN no_0
LD   0
ST   POS_AX9.xax_QUOTA
no_0:
focal_by_user:

LD   %pa9
ST   POS_AX9.xax_VEL

CAL  POS_AX9

LD   POS_AX9.yax_ENDOK
S    LensPosEnd                    ** (LsPlc63.0) Lens positioning finish

LD   %ax9.ra4
DIV  10
EQ (
LD   FocByUser                     ** (LsGui74) Set-point for focal movement by user
DIV  10
)
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   I_I_EMERGENZA                 ** Machine OK (no EMERG.)
OR   EMER_GEN                      ** M0.10 Emergenza generale
OR   Pul_Start                     ** (gPlc0.1)Start pushbutton
R    MoveByUser                    

LD   MoveAtZero                    ** Remote controller command
AND  (        
LD   %ax9.ra4                                                                        
DIV  10                                                                     
EQ   0        
)                                                                           
OR   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
OR   I_I_EMERGENZA                 ** Machine OK (no EMERG.)
OR   EMER_GEN                      ** M0.10 Emergenza generale
OR   Pul_Start                     ** (gPlc0.1)Start pushbutton
R    MoveAtZero                    ** Remote controller command

LD   POS_AX9.yax_ENDOK
ORN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ST   appoggio                      ** Appoggio

CAL  RTRIG_RES_FOC (CLK:=appoggio) ** Appoggio

LD   RTRIG_RES_FOC.Q
JMPCN no_res_word
LD    ALWAYS_ZERO                  ** PLCFLAGS.0  Flag sempre stato off
ST    StartPosFocale               ** (LsIso86) Comando Posizione Focale
no_res_word:

NOAX9:

******************************************************************************
*   GESTIONE ASSE VIRTUALE A (HEAD)
******************************************************************************
LD   %cn0.cc1.6           * Maschera assi associata al canale 0
JMPCN NO_A

PATH %ax3

LD   %PLCFLAGS.0
ST   GESTAX3.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX3.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX3.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX3.xSelected

LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   BlcAvY1_user                  ** M74.4 Blocco avanzamento asse Y da user.plc
OR   CMD_HOLDMOVING_CH3.6          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX3.xHoldMoving * Richiesta blocco avanzamento

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX3.xEnFIR      * Abilita filtri FIR

LD   %PLCFLAGS.0         * Flag sempre stato off
ST   GESTAX3.xRefLS

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX3.xLockRef    * Blocco avvio ciclo REF da canale
ST   GESTAX3.xZeroForced * Forzamento asse tarato

CAL  GESTAX3

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

NO_A:

******************************************************************************
*   GESTIONE ASSE VIRTUALE B (HEAD)
******************************************************************************
LD  %cn0.cc1.7           * Maschera assi associata al canale 0
JMPCN NO_B

PATH %ax4

LD   %PLCFLAGS.0
ST   GESTAX4.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX4.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX4.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX4.xRefLS

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX4.xLockRef    * Blocco avvio ciclo REF da canale
ST   GESTAX4.xZeroForced * Forzamento asse tarato

LD   %PLCFLAGS.0
ST   GESTAX4.xSelected

LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   BlcAvY1_user                  ** M74.4 Blocco avanzamento asse Y da user.plc
OR   CMD_HOLDMOVING_CH3.7          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX4.xHoldMoving * Richiesta blocco avanzamento

LD   %PLCFLAGS.0
ST   GESTAX4.xFromPlc

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX4.xEnFIR      * Abilita filtri FIR

CAL  GESTAX4

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

NO_B:

******************************************************************************
*   GESTIONE ASSE VIRTUALE C (HEAD)
******************************************************************************
LD   %cn0.cc1.8           * Maschera assi associata al canale 0
JMPCN NO_C

PATH %ax5

LD   %PLCFLAGS.0
ST   GESTAX5.xPlusLS     * Finecorsa +

LD   %PLCFLAGS.0
ST   GESTAX5.xMinusLS    * Finecorsa -

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX5.xCloseLoop

LD   %PLCFLAGS.0
ST   GESTAX5.xRefLS

LD   %PLCFLAGS.0
ST   GESTAX5.xSelected
                                    
LDN  GESTAX2.yZeroed     * Asse tarato                          
AND  %cn0.cc1.2           * Maschera assi associata al canale 0 
ORN  GESTAX1.yZeroed     * Asse tarato                                                
AND  ch0_in_ref                    ** channel 0 in ref
ANDN %ui16.28            * Selezione Ref Singolo da UI          
OR   CMD_HOLDMOVING_CH3.8            ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
OR   CMD_HOLDMOVING_CH5.8          ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
ST   GESTAX5.xHoldMoving * Richiesta blocco avanzamento

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX5.xZeroForced * Forzamento asse tarato
ST   GESTAX5.xLockRef    * Blocco avvio ciclo REF da canale

LD   %PLCFLAGS.0
ST   GESTAX5.xFromPlc

LDN  ch0_in_ref                    ** channel 0 in ref
ST   GESTAX5.xEnFIR      * Abilita filtri FIR

LD   ALWAYS_ONE
ST   GESTAX5.xDisLimiter      * Abilita filtri FIR

CAL  GESTAX5

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

NO_C:



****************************************************************************************************
* Asse S (Mandrino) ----------------------------------------------------
****************************************************************************************************
PATH %ax10

LD   %ax10.ra83.4                  * PON Assi
OR   %ax10.pa3.31                  * Simulato
ORN  %cn0.cc1.9                    * Maschera assi associata al canale 0 S
ST   Pon_Mand                      ** PON Axe Mandrino

* GESTIONE MANDRINO CON ENCODER -----------------------------------------------

LD   %cn0.cc1.9                    * Maschera assi associata al canale 0
JMPCN NOMAND

LD   %PLCFLAGS.0
ST   GESTMAND.xM5Force             * Funzione M5 forzata

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTMAND.xSelFromInput        * Disabilita selezioni standard macchina

LD   100
ST   GESTMAND.xOverride            * override mandrino

LD   I_I_INDEX_MAND                *(IW4.1) CHUCK Axis Homing Switch
ST   GESTMAND.xRefLS

LDN  EMER_GEN
ST   GESTMAND.xRotatEnab

LD   %PLCFLAGS.1
ST   SICROTJOG                     ** rgc0.13 Sic. da revolver per rotazione mandrino in JOG

LD   I_I_CW
OR   I_I_CCW
ST   SelForaS                      ** (gPlc13.25)Selezione Asse S da Pagina Foratrice selezionata

LD   GSTMAC.yChSelMask.0
AND  SEL_ASSE.yExtMask.9           * canale X selezionato
OR   SelForaS                      ** (gPlc13.25)Selezione Asse S da Pagina Foratrice selezionata
ST   GESTMAND.xSelected

LD   Pul_Jogp                      ** Jog+ pushbutton (Ch0)
OR   I_I_CW
AND  GESTMAND.xSelected
AND  GESTMAND.xRotatEnab
ST   GESTMAND.xJogPlus             * Comando manuale avanti

LD   Pul_Jogm                      ** Jog- pushbutton (Ch0)
OR   I_I_CCW
AND  GESTMAND.xSelected
AND  GESTMAND.xRotatEnab
ST   GESTMAND.xJogMinus            * Comando manuale indietro

CAL  GESTMAND

*LD   GESTMAND.yErrOrienta
*ST   Plcerr  ** (C51.14) Error in Spindle Orientation request


***  yOkRpm: BOOL; * Mandrino a regime
***  yStopped: BOOL; * Mandrino fermo(ra3.0)
***  yZeroed: BOOL; * Mandrino tarato(ra3.14)
***  yInAlarm: BOOL; * Mandrino in allarme

NOMAND:

* Ack Funzioni M Canale 0 -------------------------------------------------------------
LDN  RestartOk                     ** Restart Ok (M10)
AND  M10_CN0                       ** M0.14 M10: Attiva Hold + Jog CN0
OR(
LD   M600_G81_84                   ** Richiesta Sblocco M40000_CN4: Richiesta Servizio per Unit_2]
AND  M40000_CN4                    ** (gPlc0.8)M40000_CN4: Attendi Servizio per Unit_2[]
)
OR   M10000_CN0                    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)
OR   M10001_CN0                    ** M0.9 M10001_CN0: Invoca Unit_1 (finelavorazione)
OR   GESTCH0.yWaitMFun
OR   (
LD   Up_Load_DB                    ** upload DB request
ANDN FeedbackDBloaded              ** (LsGui1.0) upload DB request
)
OR   WaitMfunc0Usr                 ** wait m function on ch0
OR   Ack_Mfun_PLC                  ** (gPlc0.11)Sblocco funzioni M da PLC.plc
OR   Ack_Mfun_UsrM                 ** (gPlc13.13) Unlock M-Functions from User_M
OR   WaitGasFlow                   ** (C56.0) M function iso wait
OR   SPURGOrun                     ** M107.2 Gas purge in progress
OR   M30_CN0                       ** M0.13 M30:EndProgram CN0
OR   M2_CN0                        ** M0.28 M2: EndProgram CN0 M2
ST   CH0END.xWaitMFun

CAL  CH0END


*******************************************************************************
*******************************************************************************
*   @@@ CH3 TESTA 1
*******************************************************************************
*******************************************************************************
PATH %cn3

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH3.xCmdFromInput

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH3.xEscOpCmd

LD   %PLCFLAGS.0
ST   GESTCH3.xSelFromInput        * Disabilita selezioni standard macchina

LD   Op_Mode0.ySelRef
ST   GESTCH3.xSelREF

LD   Op_Mode0.ySelSingRef
ST   GESTCH0.xSingleRef

LD   Op_Mode0.ySelJog
OR   JOG_ENABLE
ST   GESTCH3.xSelJOG

LD   Op_Mode0.ySelInc
ST   GESTCH3.xSelINC

LD   Op_Mode0.ySelMdi
* todo
*AND (
*LD   UP_SELCHAN                    ** ui17 Canale selezionato da monitor canale
*EQ   3
*)
ST   GESTCH3.xSelMDI

LD   Op_Mode0.ySelAut
ST   GESTCH3.xSelAUT

LD   PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN PRGRUN_CN3                    ** M0.2 cn3.rc8.0  Programma in corso
OR(
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  BCO_PRGRUN                    ** rc8.0  Programma in corso
AND  BCO_PRGINT                    ** rc8.1  Programma interrotto
)
AND  EabStartCnAux                 ** Abilitazione Start per canali ausiliari
ANDN GSTMAC.xReset    
ANDN TOF_RESET.Q                    * Reset execution                            
OR   (
LD   GESTCH0.xStart
AND  %cn0.rc0.8
)                          
OR(
LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
AND  BCI_MDI                       ** rc0.11  Selettore modi operativi su MDI (semiautom)
AND (
 LD   UP_SELCHAN                    ** ui17 Canale selezionato da monitor canale
 EQ   3
)
ANDN EMER_GEN                      ** M0.10 Emergenza generale
)
OR(
LD   StartAftTipTouch
ANDN EMER_GEN
ANDN GSTMAC.xReset
ANDN TOF_RESET.Q
)
ST   GESTCH3.xStart                 * comando START al canale (esterno)

LD   Res_Ch3                       ** (gPlc25.2) reset channel 3
ST   GESTCH3.xReset               * comando RESET al canale (esterno)

LD   CondHoldCN0                   ** Condizioni richiesta hold canale 0
OR(
LD   Pul_Stop                      ** (gPlc0.2)Stop pushbutton
AND  BCI_MDI                       ** rc0.11  Selettore modi operativi su MDI (semiautom)
)
ST   GESTCH3.xHold                * comando Hold al canale (esterno)

LD   GESTCH0.xEmer
ST   GESTCH3.xEmer                * comando Emergenza al canale (esterno)

LD   3333
ST   GESTCH3.xPPNumber            * numero part program da eseguire

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH3.xDisBlkSrc             * Disable channel block search

LD   %PLCFLAGS.0
ST   GESTCH3.xBlkSearch
ST   GESTCH3.xIntBlkSrc    * Forzam. esec. ricerca blocco interna
ST   GESTCH3.xOverstore  * Ab. overstore dopo ricerca blocco (provv.)

LD   ChannelFeedrate               ** feedrate for channel
ST   GESTCH3.xOverride

CAL  GESTCH3

LD   PulsAuxComand                 ** (gPlc2.28)Comando abilitazione da pulsantiera ausiliaria
JMPCN OVRTRE
LD   %cn0.rc2
ST   %cn3.rc2
OVRTRE:

LD   GESTCH3.yProgramRun * Programma in corso
ST   PRGRUN_CN3                    ** M0.2 cn3.rc8.0  Programma in corso

LD   BCO_STB_GET                   ** rc8.17 Strobe per GET resources
AND  AxStopSincGRP                 ** (gPlc13.11)Assi Fermi per sincronismo GRP[ax]
ST   BCI_ACK_GET                   ** rc0.29  ACK per GET resource

**************************
* FUNZIONI M CANALE 3 ****
**************************

* FUNZIONI M PER SINCRINISMI CON CANALE PRINCIPALE PER LA GESTIONE DELLA G800 E G 840*

LD   %rc9                * Registro funzioni M canale 0  (mauro)
EQ   30000
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M30000_CN3                    ** M0.5 M30000_CN3: Attendi Servizio per Unit_1[(M10000 iniziolav.) / M10001(finelav.)]

LD   %rc9                * Registro funzioni M canale 0
EQ   30010
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M30010_CN3                    ** M0.6 Sblocco Richiesta servizio (M10000_CN0 inizialavorazione)

LD   %rc9                * Registro funzioni M canale 0
EQ   30011
AND  %rc8.4              * Strobe funzioni M canale 0
ST   M30011_CN3                    ** M0.7 Sblocco Richiesta servizio (M10001_CN0 finelavorazione)

*******************************************************************************
*   HEAD1: X axis (30)
*******************************************************************************
PATH %ax30
PATH %ax_lsref30

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
*OR(
*LDN  %cn3.cc1.3           * Maschera assi associata al canale 0 U
*ANDN %cn3.cc1.4           * Maschera assi associata al canale 0 V
*)
ORN  %cn3.cc1.0
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv4.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_UV            ** Ready signal drive U/V
AND  (
LD   %ax30.nvel11
EQ   0
)
)
ST   Pon_ax30                      ** PON Axe U (30)
***************************************

LDN  %cn3.cc1.0           * Maschera assi associata al canale 0
JMPC no_u_real

LD   %lsrefmode
ST   AXLSREF30.x_REF_mode        * 0=use ref switch...                                                                                                     
                                                                                                                                                           
LD   %lsreflevel                  
ST   AXLSREF30.x_TYPE_LS         * (1=NC, 0=NO)                                                                                                            
                                                                                                                                                           
LD   I_I_FC_UV_NEG                 ** U/V minimumm limit switch
ST   AXLSREF30.x_MIN_LS          * Min Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_FC_UV_POS                 ** Z1 maximun limit switch
ST   AXLSREF30.x_MAX_LS          * Max Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_INDEX_UV1                 ** U/V1 Axis Homing Switch
ST   AXLSREF30.x_REF_S           * Reference switch                                                                                                        
                                                                                                                                                           
CAL  AXLSREF30                                                                                                                                             
                                                                                                                                                           
LD   AXLSREF30.y_MIN_LS          * Min Limit switch                                                                                                        
ST   GESTAX30.xMinusLS           * Negative limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF30.y_MAX_LS          * Max Limit switch                                                                                                        
ST   GESTAX30.xPlusLS            * Positive limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF30.y_REF_S           * Reference switch                                                                                                        
ST   GESTAX30.xRefLS             * Reference                                                                                                               

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX30.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.0
ANDN GESTAX9.xSelected              * Asse Lente selezionato
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
ST   GESTAX30.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL30(CLK:=GESTAX30.xSelected)
LD   RTRIG_AX_SEL30.Q
JMPCN NoSel30
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel30:

LD   GESTAX30.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq30

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq30:
***************************************

LD   JOY_U_P                       **(gPlc2.7)Joystik U + selezionato
OR   (
LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX30.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX30.xCloseLoop
ST   GESTAX30.xJogPlus
R    %PLCmsg8.5

LD   JOY_U_M					   **(gPlc2.8)Joystik U - selezionato
OR   (
LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX30.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
ANDN(
LD   %PLCerr20.20
AND   Pul_Jogp
)
AND  GESTAX30.xCloseLoop
ST   GESTAX30.xJogMinus

LD   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   HoldSafePipeX                 ** (LsPlc26.2) Hold moving for X axis, not allow manual movement in pipe area
OR   MOVE_AXIS30.yHoldMov
OR   (
LD   AncolliXW_yHoldMov
OR   CMD_HOLDMOVING_CH3.0          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ANDN GESTAX30.xJogPlus
ANDN ch0_in_ref                    ** channel 0 in ref
)
ST   GESTAX30.xHoldMoving          * Richiesta blocco avanzamento

LD   MOVE_AXIS30.yFromPlc
OR   UsrGrantPlcMoveX
ST   GESTAX30.xFromPlc

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX30.xUnlock 

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX30.xZeroForced          * Forzamento asse tarato

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
*ANDN LimitSpeed 
ST   GESTAX30.xEnFIR               * Abilita filtri FIR     
ST   GESTAX30.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX30.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX30.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX30

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX30.yDriveNotEn
S    %PLCerr2.3                    * Axis 30, drive not enable

no_u_real:


*******************************************************************************
*   HEAD1: Y (28) axis
*******************************************************************************
PATH %ax28
PATH %ax_lsref28

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cn3.cc1.1           * Maschera assi associata al canale 3 Y
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv2.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_Y             ** Ready signal drive Y
AND  (
LD   %ax28.nvel11
EQ   0
)
)
ST   Pon_YT1                       ** PON Axe Y_T1
***************************************

LD  %cn3.cc1.1           * Maschera assi associata al canale 0
JMPCN NOAX28

LD   %lsrefmode
ST   AXLSREF28.x_REF_mode        * 0=use ref switch...                                                                                                     
                                                                                                                                                           
LD   %lsreflevel                  
ST   AXLSREF28.x_TYPE_LS         * (1=NC, 0=NO)                                                                                                            
                                                                                                                                                           
LD   I_I_FC_Y1_NEG                 ** Y1 minimumm limit switch
ST   AXLSREF28.x_MIN_LS          * Min Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_FC_Y1_POS                 ** Y1 maximun limit switch
ST   AXLSREF28.x_MAX_LS          * Max Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_INDEX_Y1                  ** Y1 Axis Homing Switch
ST   AXLSREF28.x_REF_S           * Reference switch                                                                                                        
                                                                                                                                                           
CAL  AXLSREF28                                                                                                                                             
                                                                                                                                                           
LD   AXLSREF28.y_MIN_LS          * Min Limit switch                                                                                                        
ST   GESTAX28.xMinusLS           * Negative limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF28.y_MAX_LS          * Max Limit switch                                                                                                        
ST   GESTAX28.xPlusLS            * Positive limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF28.y_REF_S           * Reference switch                                                                                                        
ST   GESTAX28.xRefLS             * Reference                                                                                                               

LD   TON_ABIL.Q                  * Abilitazione drives
ANDN TOF_MALARM.Q                * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX28.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.1
ANDN PulsAuxComand                 ** (gPlc2.28)Comando abilitazione da pulsantiera ausiliaria
OR   I_HW_Y_SEL_USR                ** (gPlc2.24)Y selected da volantino pulsantiera ausiliaria
OR   Gui_Pul_Y_M
OR   Gui_Pul_Y_P
ANDN GESTAX9.xSelected              * Asse Lente selezionato
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
ST   GESTAX28.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL28(CLK:=GESTAX28.xSelected)
LD   RTRIG_AX_SEL28.Q
JMPCN NoSel28
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel28:

LD   GESTAX28.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq28

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq28:
***************************************

LD   JOY_Y_P                       ** (gPlc0.16)Joystik Y + selezionato
OR   Gui_Pul_Y_P
OR (
LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX28.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX28.xCloseLoop
ST   GESTAX28.xJogPlus

LD   GESTAX28.xJogPlus
OR   (
LD   GSTMAC.xPlus
AND  GESTAX28.xSelected
)
ST   OrderMoveYPosit               ** (LsPlc26.5) Order of movement positive dir for Y

LD   JOY_Y_M                       ** (gPlc0.17)Joystik Y - selezionato
OR   Gui_Pul_Y_M
OR (
LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX28.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX28.xCloseLoop               
ST   GESTAX28.xJogMinus

LD   GESTAX28.xJogMinus
OR   (
LD   GSTMAC.xMinus
AND  GESTAX28.xSelected
)
ST   OrderMoveYNegat               ** (LsPlc26.6) Order of movement negative dir for Y

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX28.xZeroForced * Forzamento asse tarato

LD   GESTAX1.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvY1_user                  ** M74.4 Blocco avanzamento asse Y da user.plc
OR   HoldSafePipeY                 ** (LsPlc26.7) Hold moving for Y axis, not allow manual movement in pipe area
OR   CMD_HOLDMOVING_CH3.1          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX28.xHoldMoving          * Richiesta blocco avanzamento

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX28.xUnlock 

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX28.xEnFIR               * Abilita filtri FIR     
ST   GESTAX28.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX28.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX28.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX28

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX28.yDriveNotEn
S    %PLCerr2.1                    * Axis 28, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX28

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX28:
NOAX28:


*******************************************************************************
*   HEAD1: Z (29) axis
*******************************************************************************
PATH %ax29
PATH %ax_lsref29

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cn3.cc1.2         * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv3.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_Z             ** Ready signal drive Z
AND  (
LD   %ax29.nvel11
EQ   0
)
)
ST   Pon_ZT1                       ** PON Axe Y_T1
***************************************

LD  %cn3.cc1.2           * Maschera assi associata al canale 0
JMPCN NOAX29

LD   %lsrefmode
ST   AXLSREF29.x_REF_mode        * 0=use ref switch...                                                                                                     
                                                                                                                                                           
LD   %lsreflevel                  
ST   AXLSREF29.x_TYPE_LS         * (1=NC, 0=NO)                                                                                                            
                                                                                                                                                           
LD   I_I_FC_Z1_NEG                 ** Z1 minimumm limit switch
ST   AXLSREF29.x_MIN_LS          * Min Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_FC_Z1_POS                 ** Z1 maximun limit switch
ST   AXLSREF29.x_MAX_LS          * Max Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_INDEX_Z1                  ** Z1 Axis Homing Switch
ST   AXLSREF29.x_REF_S           * Reference switch                                                                                                        
                                                                                                                                                           
CAL  AXLSREF29                                                                                                                                             
                                                                                                                                                           
LD   AXLSREF29.y_MIN_LS          * Min Limit switch                                                                                                        
ST   GESTAX29.xMinusLS           * Negative limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF29.y_MAX_LS          * Max Limit switch                                                                                                        
ST   GESTAX29.xPlusLS            * Positive limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF29.y_REF_S           * Reference switch                                                                                                        
ST   GESTAX29.xRefLS             * Reference                                                                                                               

LD   TON_ABIL.Q                     * Abilitazione drives
ANDN TOF_MALARM.Q                   * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX29.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.2
ANDN PulsAuxComand                 ** (gPlc2.28)Comando abilitazione da pulsantiera ausiliaria
OR   I_HW_Z_SEL_USR                ** (gPlc2.25)Z selected da volantino pulsantiera ausiliaria
OR   Gui_Pul_Z_M
OR   Gui_Pul_Z_P
ANDN GESTAX9.xSelected              * Asse Lente selezionato
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
ST   GESTAX29.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL29(CLK:=GESTAX29.xSelected)
LD   RTRIG_AX_SEL29.Q
JMPCN NoSel29
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel29:

LD   GESTAX29.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq29

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq29:
***************************************

LD   JOY_Z_P					   **(gPlc19.3)Joystik Z + selezionato
OR   Gui_Pul_Z_P
OR   (
LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX29.xSelected
)
OR   I_I_PUL_TORCH_UP              ** Jog+ pushbutton (Torch Up)
AND(
LD   ch0_in_aut                    ** channel 0 in aut
OR   ch3_in_jog                    ** channel 3 in jog
OR   ch3_in_inc                    ** channel 3 in inc
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX29.xCloseLoop
ST   GESTAX29.xJogPlus

LD   JOY_Z_M                       **(gPlc19.4)Joystik Z - selezionato
OR   Gui_Pul_Z_M
OR   (
LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX29.xSelected
)
OR   I_I_PUL_TORCH_DW              ** Jog- pushbutton (Torch Down)
AND(
LD   ch3_in_aut                    ** channel 3 in aut
OR   ch3_in_jog                    ** channel 3 in jog
OR   ch3_in_inc                    ** channel 3 in inc
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX29.xCloseLoop
ST   GESTAX29.xJogMinus

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX29.xBrakeEnab

LD   CS_X_Overtravel               ** (gPlc13.12)Camma sw asse X oltre limite max
OR   (
  LD      %PLCerr5.4      **PLC Err 164 Tip touch (A11=1, A14=0, A15=0 in normal operation) 
  ANDN Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
)
OR   CMD_HOLDMOVING_CH3.2           ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX29.xHoldMoving * Richiesta blocco avanzamento

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX29.xZeroForced * Forzamento asse tarato

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ANDN DisabFir_CH3_axes.2
ST   GESTAX29.xEnFIR               * Abilita filtri FIR     
ST   GESTAX29.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX29.xDisLimiter

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX29.xUnlock 

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX29.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX29

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX29.yDriveNotEn
S    %PLCerr2.2                    * Axis 29, drive not enable

LD   %vrtc5.VrdwCtrlRegister0.18 * De overlap 
JMPCN NOAX29DeOverlap

LD   0
ST   %ra50               * Limitazione velocita' massima interpolazione

NOAX29DeOverlap:

LD   GESTAX29.yBrake
ST   O_O_BRAKE_Z1                  ** Brake Z1 axis

NOAX29:
*******************************************************************************
*   HEAD1: U (27) axis
*******************************************************************************
PATH %ax27
PATH %ax_lsref27

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cn3.cc1.3         * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_X             ** Ready signal drive X
AND  (
LD   %ax27.nvel11
EQ   0
)
)
ST   Pon_XT1                       ** PON Axe X_T1
***************************************

LD  %cn3.cc1.3           * Maschera assi associata al canale 0
JMPCN NOAX27
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF27.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF27.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_X1_NEG                 ** X1 minimumm limit switch
ST   AXLSREF27.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_X1_POS                 ** X1 maximun limit switch
ST   AXLSREF27.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   I_I_INDEX_X1                  ** X1 Axis Homing Switch
ST   AXLSREF27.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF27                                                          
                                                                        
LD   AXLSREF27.y_MIN_LS          * Min Limit switch                       
ST   GESTAX27.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF27.y_MAX_LS          * Max Limit switch                       
ST   GESTAX27.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF27.y_REF_S           * Reference switch                       
ST   GESTAX27.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX27.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.3
ANDN PulsAuxComand                 ** (gPlc2.28)Comando abilitazione da pulsantiera ausiliaria
OR   I_HW_X_SEL_USR                ** (gPlc2.23)X selected da volantino pulsantiera ausiliaria
ANDN GESTAX9.xSelected              * Asse Lente selezionato
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
AND  ALWAYS_ZERO
ST   GESTAX27.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL27(CLK:=GESTAX27.xSelected)
LD   RTRIG_AX_SEL27.Q
JMPCN NoSel27
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel27:

LD   GESTAX27.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq27

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq27:
***************************************

LD   JOY_X_P                       ** (gPlc0.14)Joystik X + selezionato
OR (
LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX27.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX27.xCloseLoop
ST   GESTAX27.xJogPlus

LD   GESTAX27.xJogPlus
OR   (
LD   GSTMAC.xPlus
AND  GESTAX27.xSelected
)
ST   OrderMoveXPosit               ** (LsPlc26.3) Order of movement positive dir for X

LD   JOY_X_M                       ** (gPlc0.15)Joystik X - selezionato
OR (
LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX27.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX27.xCloseLoop
ST   GESTAX27.xJogMinus

LD   GESTAX27.xJogMinus
OR   (
LD   GSTMAC.xMinus
AND  GESTAX27.xSelected
)
ST   OrderMoveXNegat               ** (LsPlc26.4) Order of movement negative dir for X

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX27.xZeroForced          * Forzamento asse tarato

LD   GESTAX0.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   HoldSafePipeX                 ** (LsPlc26.2) Hold moving for X axis, not allow manual movement in pipe area
OR   CMD_HOLDMOVING_CH3.0          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX27.xHoldMoving          * Richiesta blocco avanzamento

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX27.xUnlock                                                                  

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX27.xEnFIR               * Abilita filtri FIR     
ST   GESTAX27.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX27.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX27.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX27

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX27.yDriveNotEn
S    %PLCerr2.0                    * Axis 27, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX27

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX27:
NOAX27:
       

*******************************************************************************
*   HEAD1: V axis (31) slave spindle axis
*******************************************************************************
PATH %ax31
PATH %ax_lsref31

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv4.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_UV            ** Ready signal drive U/V
AND  (
LD   %ax30.nvel11
EQ   0
)
)
ST   Pon_ax31                      ** PON Axe U (30)
***************************************

LDN  %cn3.cc1.4           * Maschera assi associata al canale 0
JMPC no_v_real

LD   %lsrefmode
ST   AXLSREF31.x_REF_mode        * 0=use ref switch...                                                                                                     
                                                                                                                                                          
LD   %lsreflevel                  
ST   AXLSREF31.x_TYPE_LS         * (1=NC, 0=NO)                                                                                                            
                                                                                                                                                           
LD   I_I_FC_V_NEG                 ** U/V minimumm limit switch
ST   AXLSREF31.x_MIN_LS          * Min Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_FC_V_POS                 ** Z1 maximun limit switch
ST   AXLSREF31.x_MAX_LS          * Max Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_INDEX_V                 ** U/V1 Axis Homing Switch
ST   AXLSREF31.x_REF_S           * Reference switch                                                                                                        
                                                                                                                                                           
CAL  AXLSREF31                                                                                                                                             
                                                                                                                                                           
LD   AXLSREF31.y_MIN_LS          * Min Limit switch                                                                                                        
ST   GESTAX31.xMinusLS           * Negative limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF31.y_MAX_LS          * Max Limit switch                                                                                                        
ST   GESTAX31.xPlusLS            * Positive limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF31.y_REF_S           * Reference switch                                                                                                        
ST   GESTAX31.xRefLS             * Reference                                                                                                               

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX31.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.4
OR(
LD   RemContrUPlus
AND  Rem_Combination
)  
OR(
LD   RemContrUMinus
AND  Rem_Combination
)
OR   Gui_Pul_X1_M
OR   Gui_Pul_X1_P
ANDN GESTAX9.xSelected              * Asse Lente selezionato
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
ST   GESTAX31.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL31(CLK:=GESTAX31.xSelected)
LD   RTRIG_AX_SEL31.Q
JMPCN NoSel31
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel31:

LD   GESTAX31.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq31

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq31:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
OR(
LD   RemContrUPlus
AND  Rem_Combination
)
OR   Gui_Pul_X1_P
AND  GESTAX31.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX31.xSelected
AND  GESTAX31.xCloseLoop
ST   GESTAX31.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
OR(
LD   RemContrUMinus
AND  Rem_Combination
)
OR   Gui_Pul_X1_M
AND  GESTAX31.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX31.xSelected
AND  GESTAX31.xCloseLoop
ST   GESTAX31.xJogMinus

LD   GESTAX6.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   HoldSafePipeX                 ** (LsPlc26.2) Hold moving for X axis, not allow manual movement in pipe area
OR(
LD   CMD_HOLDMOVING_CH3.4          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ANDN GESTAX31.xJogMinus
ANDN ch0_in_ref                    ** channel 0 in ref
)
OR   (
LD   AncolliWV_yHoldMov
ANDN GESTAX31.xJogMinus
ANDN ch0_in_ref                    ** channel 0 in ref
)
ST   GESTAX31.xHoldMoving          * Richiesta blocco avanzamento

*LD   MOVE_AXIS31.yFromPlc
LD   UsrGrantPlcMoveX1
ST   GESTAX31.xFromPlc

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX31.xUnlock 

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX31.xZeroForced          * Forzamento asse tarato

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX31.xEnFIR               * Abilita filtri FIR     
ST   GESTAX31.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX31.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX31.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX31

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1                       * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX31.yDriveNotEn
S    %PLCerr2.15                    * Axis 30, drive not enable

no_v_real:  

*******************************************************************************
*   HEAD1: w axis (36) slave spindle middle
*******************************************************************************
PATH %ax36
PATH %ax_lsref36

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv4.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_UV            ** Ready signal drive U/V
AND  (
LD   %ax30.nvel11
EQ   0
)
)
ST   Pon_ax36                      ** PON Axe W (36)
***************************************

LDN  %cn3.cc1.5          * Maschera assi associata al canale 0
JMPC no_w_real

LD   %lsrefmode
ST   AXLSREF36.x_REF_mode        * 0=use ref switch...                                                                                                     
                                                                                                                                                          
LD   %lsreflevel                  
ST   AXLSREF36.x_TYPE_LS         * (1=NC, 0=NO)                                                                                                            
                                                                                                                                                           
LD   I_I_FC_W_NEG                 ** U/V minimumm limit switch
ST   AXLSREF36.x_MIN_LS          * Min Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_FC_W_POS                 ** Z1 maximun limit switch
ST   AXLSREF36.x_MAX_LS          * Max Limit switch                                                                                                        
                                                                                                                                                           
LD   I_I_INDEX_W                 ** U/V1 Axis Homing Switch
ST   AXLSREF36.x_REF_S           * Reference switch                                                                                                        
                                                                                                                                                           
CAL  AXLSREF36                                                                                                                                             
                                                                                                                                                           
LD   AXLSREF36.y_MIN_LS          * Min Limit switch                                                                                                        
ST   GESTAX36.xMinusLS           * Negative limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF36.y_MAX_LS          * Max Limit switch                                                                                                        
ST   GESTAX36.xPlusLS            * Positive limit switch                                                                                                   
                                                                                                                                                           
LD   AXLSREF36.y_REF_S           * Reference switch                                                                                                        
ST   GESTAX36.xRefLS             * Reference                                                                                                               

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX36.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.5
ANDN GESTAX9.xSelected              * Asse Lente selezionato
OR   Gui_Pul_X3_M
OR   Gui_Pul_X3_P
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
ST   GESTAX36.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL36(CLK:=GESTAX36.xSelected)
LD   RTRIG_AX_SEL36.Q
JMPCN NoSel36
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel36:

LD   GESTAX36.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq36

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq36:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
OR   Gui_Pul_X3_P
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX36.xSelected
AND  GESTAX36.xCloseLoop
ST   GESTAX36.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
OR   Gui_Pul_X3_M
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX36.xSelected
AND  GESTAX36.xCloseLoop
ST   GESTAX36.xJogMinus

LD   GESTAX6.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   HoldSafePipeX                 ** (LsPlc26.2) Hold moving for X axis, not allow manual movement in pipe area
OR(
     LD   Hold_moving_axW    
     ANDN Gest5Ax	 
	 ANDN (
	      LD    %ra4
	      GE    0
	      AND   GESTAX36.xJogPlus
	 )  
)   
OR(
LD   AncolliWV_yHoldMov
OR   %PLCmsg8.9
ANDN GESTAX36.xJogPlus
)
OR(
LD   AncolliXW_yHoldMov
OR   %PLCmsg8.10 
ANDN GESTAX36.xJogMinus
)
OR( 
     LD   %ax71.ra24
     SUB  ParkingPositionUnload
     ABS
     GT   2000                        *[2mm]    
	 AND(
	      LD   %ax36.ra24
		  LT   SafeDis_W_L1
	 )
     ANDN GESTAX36.xJogPlus	 
)
ANDN ch0_in_ref                    ** channel 0 in ref
ST   GESTAX36.xHoldMoving          * Richiesta blocco avanzamento
ST   GESTAX36_xHoldMoving

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX36.xUnlock 

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX36.xZeroForced          * Forzamento asse tarato

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX36.xEnFIR               * Abilita filtri FIR     
ST   GESTAX36.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX36.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX36.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX36

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1                       * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX36.yDriveNotEn
S    %PLCerr2.19                    * Axis 30, drive not enable

no_w_real: 



*******************************************************************************
*   HEAD1: A (32) axis
*******************************************************************************
PATH %ax32
PATH %ax_lsref32

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cn3.cc1.6         * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR   ( 
LD   I_I_READY_DRIVE_A             ** Ready signal drive A
AND  (
LD   %ax9.nvel11
EQ   0
)
)
ST   Pon_A                         ** PON Axe A

LD  %cn3.cc1.6           * Maschera assi associata al canale 0
JMPCN NOAX32
  

***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF32.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel
ST   AXLSREF32.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_A1_NEG                 ** A1 minimumm limit switch
ST   AXLSREF32.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_A1_POS                 ** A1 maximun limit switch
ST   AXLSREF32.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   I_I_INDEX_A1                  ** A1 Axis Homing Switch
ST   AXLSREF32.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF32                                                         
                                                                        
LD   AXLSREF32.y_MIN_LS          * Min Limit switch                       
ST   GESTAX32.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF32.y_MAX_LS          * Max Limit switch                       
ST   GESTAX32.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF32.y_REF_S           * Reference switch                       
ST   GESTAX32.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX32.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.6
ST   GESTAX32.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL32(CLK:=GESTAX32.xSelected)
LD   RTRIG_AX_SEL32.Q
JMPCN NoSel32
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel32:

LD   GESTAX32.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq32

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq32:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX32.xSelected
AND  GESTAX32.xCloseLoop
ST   GESTAX32.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX32.xSelected
AND  GESTAX32.xCloseLoop
ST   GESTAX32.xJogMinus

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX32.xZeroForced          * Forzamento asse tarato

LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   BlcAvY1_user                  ** M74.4 Blocco avanzamento asse Y da user.plc
OR   CMD_HOLDMOVING_CH3.6          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
ST   GESTAX32.xHoldMoving          * Richiesta blocco avanzamento

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX32.xUnlock     

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX32.xEnFIR               * Abilita filtri FIR     
ST   GESTAX32.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX32.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX32.xSetAlarm     ** Forzamento allarme asse     

CAL  GESTAX32

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX32.yDriveNotEn
S    %PLCerr2.9          * Axis 32, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX32

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX32:
NOAX32:

*******************************************************************************
*   HEAD1: B (33) axis
*******************************************************************************
PATH %ax33
PATH %ax_lsref33

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cn3.cc1.7         * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR   ( 
LD   I_I_READY_DRIVE_B             ** Ready signal drive B
AND  (
LD   %ax9.nvel11
EQ   0
)
)
ST   Pon_B                         ** PON Axe B

LD  %cn3.cc1.7           * Maschera assi associata al canale 0
JMPCN NOAX33
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF33.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel
ST   AXLSREF33.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_B1_NEG                 ** B1 minimumm limit switch
ST   AXLSREF33.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_B1_POS                 ** B1 maximun limit switch
ST   AXLSREF33.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   I_I_INDEX_B1                  ** B1 Axis Homing Switch
ST   AXLSREF33.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF33                                                         
                                                                        
LD   AXLSREF33.y_MIN_LS          * Min Limit switch                       
ST   GESTAX33.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF33.y_MAX_LS          * Max Limit switch                       
ST   GESTAX33.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF33.y_REF_S           * Reference switch                       
ST   GESTAX33.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX33.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.7
OR(
LD   RemContrCMinus
AND  Rem_Combination
)  
OR(
LD   RemContrCPlus
AND  Rem_Combination
)
ST   GESTAX33.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL33(CLK:=GESTAX33.xSelected)
LD   RTRIG_AX_SEL33.Q
JMPCN NoSel33
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel33:

LD   GESTAX33.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq33

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq33:
***************************************


LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
OR(
LD   RemContrCPlus
AND  Rem_Combination
)  
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX33.xSelected
AND  GESTAX33.xCloseLoop
ST   GESTAX33.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
OR(
LD   RemContrCMinus
AND  Rem_Combination
) 
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX33.xSelected
AND  GESTAX33.xCloseLoop
ST   GESTAX33.xJogMinus

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX33.xZeroForced          * Forzamento asse tarato

LD   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   BlcAvY1_user                  ** M74.4 Blocco avanzamento asse Y da user.plc
OR   CMD_HOLDMOVING_CH3.7          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
OR   (
LD   %PLCmsg8.9
OR   %PLCerr20.21
ANDN GESTAX33.xJogMinus
)
OR   (
LD   %PLCmsg8.10
ANDN GESTAX33.xJogPlus
)
ST   GESTAX33.xHoldMoving          * Richiesta blocco avanzamento

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX33.xUnlock     

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX33.xEnFIR               * Abilita filtri FIR     
ST   GESTAX33.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX33.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX33.xSetAlarm     ** Forzamento allarme asse     

CAL  GESTAX33

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX33.yDriveNotEn
S    %PLCerr2.8          * Axis 33, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX33

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX33:
NOAX33:


*******************************************************************************
*   C spindle axis (34)
*******************************************************************************
PATH %ax34
PATH %ax_lsref34

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cn3.cc1.8         * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_C             ** Ready signal drive C
AND  (
LD   %ax34.nvel11
EQ   0
)
)
ST   Pon_C                         ** PON Axe C  

LD  %cn3.cc1.8           * Maschera assi associata al canale 0
JMPCN NOAX34
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF34.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF34.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_C_NEG                  ** C minimumm limit switch
ST   AXLSREF34.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_C_POS                  ** C maximun limit switch
ST   AXLSREF34.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   I_I_INDEX_C                   ** C1 Axis Homing Switch
ST   AXLSREF34.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF34                                                         
                                                                        
LD   AXLSREF34.y_MIN_LS          * Min Limit switch                       
ST   GESTAX34.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF34.y_MAX_LS          * Max Limit switch                       
ST   GESTAX34.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF34.y_REF_S           * Reference switch                       
ST   GESTAX34.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ANDN CMD_C_C1_OPENLOOP.0             ** M204 Open loop (bit0=1 C, bit1=1 C1)
ST   GESTAX34.xCloseLoop

LD   GSTMAC.yChSelMask.3
AND  SEL_ASSE.yExtMask.8
ST   GESTAX34.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL34(CLK:=GESTAX34.xSelected)
LD   RTRIG_AX_SEL34.Q
JMPCN NoSel34
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel34:

LD   GESTAX34.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq34

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq34:
***************************************

LD   JOY_C_P					   **(gPlc2.9)Joystik C + selezionato
OR   (
LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX34.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
ANDN cmd_c_c1_gear_run
AND  GESTAX34.xCloseLoop
ST   GESTAX34.xJogPlus

LD   JOY_C_M                       **(gPlc2.10)Joystik C - selezionato
OR   (
LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX34.xSelected
)
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
ANDN cmd_c_c1_gear_run
AND  GESTAX34.xCloseLoop
ST   GESTAX34.xJogMinus

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX34.xZeroForced          * Forzamento asse tarato

LD   GESTAX5.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   HoldSafePipeX                 ** (LsPlc26.2) Hold moving for X axis, not allow manual movement in pipe area
OR   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   CMD_HOLDMOVING_CH3.8          ** M202 Hold moving command axis CH3 (bit0=X, bit1=Y...)
OR   MOVE_AXIS34.yHoldMov
ST   GESTAX34.xHoldMoving          * Richiesta blocco avanzamento

LD   MOVE_AXIS34.yFromPlc
ST   GESTAX34.xFromPlc

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX34.xUnlock    
ST   O_O_RESET_DRIVE_C             ** C axis drive reset (disable electric shaft)

LDN  ch3_in_ref                    ** channel 3 in ref
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX34.xEnFIR               * Abilita filtri FIR     
ST   GESTAX34.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX34.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX34.xSetAlarm     ** Forzamento allarme asse     

CAL  GESTAX34

LD   GESTAX34.yDriveNotEn
S    %PLCerr2.4                    * Axis 34, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX34

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX34:
NOAX34:
********************************************************************************

**************************
* Acknowledg funzioni "M"
**************************

LD   R_TRIG10000.Q       ** (M0.8)M10000_CN0: Invoca Unit_1 (inizialavorazione)
OR   R_TRIG10001.Q       ** (M0.9)M10001_CN0: Invoca Unit_1 (finelavorazione)
AND  M30000_CN3                    ** M0.5 M30000_CN3: Attendi Servizio per Unit_1[(M10000 iniziolav.) / M10001(finelav.)]
ORN  Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata
OR(
LDN  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN PRGRUN_CN3                    ** M0.2 cn3.rc8.0  Programma in corso
)
R    BlckM30000_CN3                ** Blocco M30000_CN3 con Z_Z1 selezionati

CAL R_TRIG_M30000CN3(CLK=M30000_CN3) ** Fronte Up M30000CN3

LD   R_TRIG_M30000CN3.Q  ** Fronte Up M30000CN3
OR   F_TRIG10000.Q        ** FronteDwn M10000_CN0: Invoca Unit_1 (inizialavorazione)
OR   F_TRIG10001.Q        ** FronteDwn M10001_CN0: Invoca Unit_1 (finelavorazione)
AND  Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata
S    BlckM30000_CN3                ** Blocco M30000_CN3 con Z_Z1 selezionati

LD   M30000_CN3                    ** M0.5 M30000_CN3: Attendi Servizio per Unit_1[(M10000 iniziolav.) / M10001(finelav.)]
ANDN Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata
AND(
LDN  M10000_CN0                    ** M0.8 M10000_CN0: Invoca Unit_1 (inizialavorazione)
ANDN M10001_CN0                    ** M0.9 M10001_CN0: Invoca Unit_1 (finelavorazione)
ORN  HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata
)
ANDN CN3_REQ_VYZ_ISO
OR(
LD   M30000_CN3                    ** M0.5 M30000_CN3: Attendi Servizio per Unit_1[(M10000 iniziolav.) / M10001(finelav.)]
AND  Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata
AND  BlckM30000_CN3                ** Blocco M30000_CN3 con Z_Z1 selezionati
)
OR(
LD   M30010_CN3                    ** M0.6 Sblocco Richiesta servizio (M10000_CN0 inizialavorazione)
AND  Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata
ANDN M30010_CN3_4                  ** Blocco M30010_CN3_CN4 con Z_Z1 selezionati
)
OR(
LD   M30011_CN3                    ** M0.7 Sblocco Richiesta servizio (M10001_CN0 finelavorazione)
AND  Z_Z1_SEL                      ** (gPlc13.6)Testa Z + Z1 selezionata
ANDN M30011_CN3_4                  ** Blocco M30011_CN3_CN4 con Z_Z1 selezionati
)
OR   GESTCH3.yWaitMFun
OR   Ack_Mfun_UsrM                 ** (gPlc13.13) Unlock M-Functions from User_M
ST   CH3END.xWaitMFun


CAL  CH3END


*******************************************************************************
*******************************************************************************
*   @@@ CH5: GESTIONE CAMBIO PALLET
*******************************************************************************
*******************************************************************************
PATH %cn5

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH5.xCmdFromInput

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTCH5.xEscOpCmd

LD   %PLCFLAGS.0
ST   GESTCH5.xSelFromInput        * Disabilita selezioni standard macchina

LD   Op_Mode0.ySelRef
ST   GESTCH5.xSelREF

LD   Op_Mode0.ySelSingRef
ST   GESTCH0.xSingleRef

LD   Op_Mode0.ySelJog
ST   GESTCH5.xSelJOG

LD   Op_Mode0.ySelInc
ST   GESTCH5.xSelINC

LD   Op_Mode0.ySelMdi
* todo
*AND (
*LD   UP_SELCHAN                    ** ui17 Canale selezionato da monitor canale
*EQ   5
*)
ST   GESTCH5.xSelMDI

LD   Op_Mode0.ySelAut
ST   GESTCH5.xSelAUT


LD   Pul_Start                     ** (gPlc0.1)Start pushbutton
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND (
LD   BCO_PRGRUN                    ** rc8.0  Programma in corso
AND  BCO_PRGINT                    ** rc8.1  Programma interrotto
AND  ch5_in_aut
OR   ch5_in_ref
OR(
 LD   BCI_MDI                       ** rc0.11  Selettore modi operativi su MDI (semiautom)
 AND (
 LD  UP_SELCHAN                                     ** ui17 Canale selezionato da monitor canale
 EQ  5
 )
)
)
ST   GESTCH5.xStart               * comando START al canale (esterno)

LD   Res_Ch0                       ** (gPlc25.3) reset channel 0
ST   GESTCH5.xReset               * comando RESET al canale (esterno)

LD   %PLCFLAGS.0                  ** Condizioni richiesta hold canale 0
OR(
LD   Pul_Stop                      ** (gPlc0.2)Stop pushbutton
AND  BCI_MDI                       ** rc0.11  Selettore modi operativi su MDI (semiautom)
)
ST   GESTCH5.xHold                * comando Hold al canale (esterno)

LD   GESTCH0.xEmer
ST   GESTCH5.xEmer                * comando Emergenza al canale (esterno)

LD   5555
ST   GESTCH5.xPPNumber            * numero part program da eseguire

LD   %PLCFLAGS.0
ST   GESTCH5.xBlkSearch
ST   GESTCH5.xIntBlkSrc           * Forzam. esec. ricerca blocco interna
ST   GESTCH5.xOverstore  * Ab. overstore dopo ricerca blocco (provv.)

LD   ChannelFeedrate               ** feedrate for channel
ST   GESTCH5.xOverride

CAL  GESTCH5

LD   GESTCH5.yProgramRun          * Programma in corso
ST   PRGRUN_CN5                    ** M0.27 cn5.rc8.0  Programma in corso

LD   BCO_STB_GET                   ** rc8.17 Strobe per GET resources
AND  AxStopSincGRP                 ** (gPlc13.11)Assi Fermi per sincronismo GRP[ax]
ST   BCI_ACK_GET                   ** rc0.29  ACK per GET resource

*******************************************************************************
*   Virtual X axis for tube following algorithm
*******************************************************************************
PATH %ax50
PATH %ax_lsref50

LD  %cc1.0           * Maschera assi associata al canale 0
JMPCN NOAX50
                                                                   
LD   ALWAYS_ZERO                        ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xMinusLS           * Negative limit switch                           
                                                                        
LD   ALWAYS_ZERO                      ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xPlusLS            * Positive limit switch                             
                                                                        
LD   ALWAYS_ZERO                     ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX50.xCloseLoop
ST   GESTAX50_xCloseLoop

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xSelected

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xJogPlus

LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xJogMinus

LD   CMD_HOLDMOVING_CH5.0          ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
ST   GESTAX50.xHoldMoving          * Richiesta blocco avanzamento

LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   GESTAX50.xZeroForced          * Forzamento asse tarato
ST   GESTAX50.xLockRef    * Blocco avvio ciclo REF da canale

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX50.xUnlock                                                                  

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX50.xEnFIR               * Abilita filtri FIR     
ST   GESTAX50.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE                   ** PLCFLAGS.0  Flag sempre stato off
ST   GESTAX50.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX50.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX50

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX50

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX50:
NOAX50:


*******************************************************************************
*   Support 1 follower
*******************************************************************************
PATH %ax51
PATH %ax_lsref51

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cc1.1             * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
ST   Pon_Z_Follow            ** PON Axe X_T1

LD  %cc1.1           * Maschera assi associata al canale 0
JMPCN NOAX51
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF51.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF51.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_Z1_SUP_NEG
ST   AXLSREF51.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_Z1_SUP_POS           * C saw minimumm limit switch
ST   AXLSREF51.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   AXLSREF51.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF51                                                          
                                                                        
LD   AXLSREF51.y_MIN_LS          * Min Limit switch                       
ST   GESTAX51.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF51.y_MAX_LS          * Max Limit switch                       
ST   GESTAX51.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF51.y_REF_S           * Reference switch                       
ST   GESTAX51.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX51.xCloseLoop

LD   GSTMAC.yChSelMask.5
AND  SEL_ASSE.yExtMask.1
ST   GESTAX51.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL51(CLK:=GESTAX51.xSelected)
LD   RTRIG_AX_SEL51.Q
JMPCN NoSel51
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel51:

LD   GESTAX51.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq51

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq51:    

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX51.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX51.xCloseLoop
ST   GESTAX51.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX51.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX51.xCloseLoop
ST   GESTAX51.xJogMinus

LDN  %ra3.2
OR   %ra0.9
AND  %ra3.13
ST   Supp_51_GoUp

LD   CMD_HOLDMOVING_CH5.1            ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
ST   GESTAX51.xHoldMoving          * Richiesta blocco avanzamento

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX51.xZeroForced          * Forzamento asse tarato

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX51.xUnlock                                                                  

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX51.xEnFIR               * Abilita filtri FIR     
ST   GESTAX51.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX51.xDisLimiter

LD   %cn0.rc8.3                    * ch0 in alarm 
OR   %cn3.rc8.3                    * ch3 in alarm 
OR   EmerINC
ST   GESTAX51.xSetAlarm            ** Forzamento allarme asse 

LD   GRANT5.1
ST   GESTAX51.xFromPlc

CAL  GESTAX51

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1                       * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX51.yDriveNotEn
S    %PLCerr2.15                   * Axis 52, drive not enable

LD   %pa9                          * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50                         * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX51

LD   %pa59                         * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50                         * Limitazione velocita' massima interpolazione

SVIX51:
NOAX51:

* Z 1 real axis for the pipe following algorithm

PATH %ax52
PATH %ax_lsref52

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cc1.2             * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
ST   Pon_Z_Follow2            ** PON Axe X_T1

LD  %cc1.2           * Maschera assi associata al canale 0
JMPCN NOAX52
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF52.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF52.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_Z2_SUP_NEG           
ST   AXLSREF52.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_Z2_SUP_POS           * C saw maximun limit switch
ST   AXLSREF52.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   AXLSREF52.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF52                                                          
                                                                        
LD   AXLSREF52.y_MIN_LS          * Min Limit switch                       
ST   GESTAX52.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF52.y_MAX_LS          * Max Limit switch                       
ST   GESTAX52.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF52.y_REF_S           * Reference switch                       
ST   GESTAX52.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX52.xCloseLoop

LD   GSTMAC.yChSelMask.5
AND  SEL_ASSE.yExtMask.2
ST   GESTAX52.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL52(CLK:=GESTAX52.xSelected)
LD   RTRIG_AX_SEL52.Q
JMPCN NoSel52
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel52:

LD   GESTAX52.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq52

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq52:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX52.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX52.xCloseLoop
ST   GESTAX52.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX52.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX52.xCloseLoop
ST   GESTAX52.xJogMinus

LDN  %ra3.2
OR   %ra0.9
AND  %ra3.13
ST   Supp_52_GoUp

LD   CMD_HOLDMOVING_CH5.2            ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
ST   GESTAX52.xHoldMoving          * Richiesta blocco avanzamento

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX52.xZeroForced          * Forzamento asse tarato

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX52.xUnlock                                                                  

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX52.xEnFIR               * Abilita filtri FIR     
ST   GESTAX52.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX52.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX52.xSetAlarm     ** Forzamento allarme asse 

LD   GRANT5.2
ST   GESTAX52.xFromPlc

CAL  GESTAX52

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX52.yDriveNotEn
S    %PLCerr2.14                    * Axis 52, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX52

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX52:
NOAX52:

* Z 3 real axis for the pipe following algorithm

PATH %ax53
PATH %ax_lsref53

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cc1.2             * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR  ( 
LD   I_I_READY_DRIVE_Z_FOLL        ** Ready signal drive Z_follower
AND  (
LD   %ax52.nvel11
EQ   0
)
)
ST   Pon_Z_Follow3           ** PON Axe X_T1

LD  %cc1.3           * Maschera assi associata al canale 0
JMPCN NOAX53
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF53.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF53.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_Z3_SUP_NEG                   ** PLCFLAGS.0  Flag sempre stato off
ST   AXLSREF53.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_Z3_SUP_POS           * C saw maximun limit switch
ST   AXLSREF53.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   AXLSREF53.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF53                                                          
                                                                        
LD   AXLSREF53.y_MIN_LS          * Min Limit switch                       
ST   GESTAX53.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF53.y_MAX_LS          * Max Limit switch                       
ST   GESTAX53.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF53.y_REF_S           * Reference switch                       
ST   GESTAX53.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX53.xCloseLoop

LD   GSTMAC.yChSelMask.5
AND  SEL_ASSE.yExtMask.3
ST   GESTAX53.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL53(CLK:=GESTAX53.xSelected)
LD   RTRIG_AX_SEL53.Q
JMPCN NoSel53
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel53:

LD   GESTAX53.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq53

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq53:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX53.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX53.xCloseLoop
ST   GESTAX53.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX53.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX53.xCloseLoop
ST   GESTAX53.xJogMinus

LDN  %ra3.2
OR   %ra0.9
AND  %ra3.13
ST   Supp_53_GoUp

LD   CMD_HOLDMOVING_CH5.3            ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
ST   GESTAX53.xHoldMoving          * Richiesta blocco avanzamento

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX53.xZeroForced          * Forzamento asse tarato

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX53.xUnlock                                                                  

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX53.xEnFIR               * Abilita filtri FIR     
ST   GESTAX53.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX53.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX53.xSetAlarm     ** Forzamento allarme asse 

LD   GRANT5.3
ST   GESTAX53.xFromPlc

CAL  GESTAX53

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX53.yDriveNotEn
S    %PLCerr2.17                   * Axis 53, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX53

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX53:
NOAX53:

* Z 4 real axis for the pipe following algorithm

PATH %ax54
PATH %ax_lsref54

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cc1.4             * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
ST   Pon_Z_Follow4           ** PON Axe X_T1

LD  %cc1.4           * Maschera assi associata al canale 0
JMPCN NOAX54
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF54.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF54.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_Z4_SUP_NEG                   ** PLCFLAGS.0  Flag sempre stato off
ST   AXLSREF54.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_Z4_SUP_POS           * C saw minimumm limit switch    
ST   AXLSREF54.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   ALWAYS_ZERO                   ** PLCFLAGS.0  Flag sempre stato off
ST   AXLSREF54.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF54                                                          
                                                                        
LD   AXLSREF54.y_MIN_LS          * Min Limit switch                       
ST   GESTAX54.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF54.y_MAX_LS          * Max Limit switch                       
ST   GESTAX54.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF54.y_REF_S           * Reference switch                       
ST   GESTAX54.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ST   GESTAX54.xCloseLoop

LD   GSTMAC.yChSelMask.5
AND  SEL_ASSE.yExtMask.4
ST   GESTAX54.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL54(CLK:=GESTAX54.xSelected)
LD   RTRIG_AX_SEL54.Q
JMPCN NoSel54
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel54:

LD   GESTAX54.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq54

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq54:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  GESTAX54.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX54.xCloseLoop
ST   GESTAX54.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  GESTAX54.xSelected
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX54.xCloseLoop
ST   GESTAX54.xJogMinus

LD   CMD_HOLDMOVING_CH5.4            ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
ST   GESTAX54.xHoldMoving          * Richiesta blocco avanzamento

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX54.xZeroForced          * Forzamento asse tarato

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX54.xUnlock                                                                  

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX54.xEnFIR               * Abilita filtri FIR     
ST   GESTAX54.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX54.xDisLimiter

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX54.xSetAlarm     ** Forzamento allarme asse 

LD   GRANT5.4
ST   GESTAX54.xFromPlc

CAL  GESTAX54

LD   JOGrunning                    ** One axis moving in JOG
OR   %ra19.1         * Stato JOG all'interno del canale
ST   JOGrunning                    ** One axis moving in JOG

LD   REFrunning                    ** One axis moving in REF
OR   %ra19.2
ST   REFrunning                    ** One axis moving in REF

LD   INCrunning                    ** One axis moving in INC
OR   %ra19.3
ST   INCrunning                    ** One axis moving in INC

LD   GESTAX54.yDriveNotEn
S    %PLCerr2.18                    * Axis 52, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX54

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX54:
NOAX54:


*******************************************************************************
*   Spindles safe gearing reset
*******************************************************************************
CAL  TOF_RESET_GEAR(IN=Pul_Reset, PT=50)
LDN  %cn0.rc8.0                    
ST   appoggio
CAL  TP_PRGOFF_GEAR(IN=appoggio, PT=50) 

*******************************************************************************
*   C1 spindle axis (57)
*******************************************************************************
PATH %ax57
PATH %ax_lsref57

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cc1.7             * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR   (
LD   I_I_READY_DRIVE_C1            ** Ready signal drive C1
AND  (
LD   %ax54.nvel11
EQ   0
)
)
ST   Pon_C1                        ** PON Axe C1

LD  %cn5.cc1.7           * Maschera assi associata al canale 0
JMPCN NOAX57
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF57.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF57.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_C1_NEG                 ** C1 minimumm limit switch
ST   AXLSREF57.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_C1_POS                 ** C1 maximun limit switch
ST   AXLSREF57.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   I_I_INDEX_C1                  ** C1 Axis Homing Switch
ST   AXLSREF57.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF57                                                         
                                                                        
LD   AXLSREF57.y_MIN_LS          * Min Limit switch                       
ST   GESTAX57.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF57.y_MAX_LS          * Max Limit switch                       
ST   GESTAX57.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF57.y_REF_S           * Reference switch                       
ST   GESTAX57.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ANDN CMD_C_C1_OPENLOOP.1           ** M204 Open loop (bit0=1 C, bit1=1 C1)
ST   GESTAX57.xCloseLoop

LD   GSTMAC.yChSelMask.5
AND  SEL_ASSE.yExtMask.7
ANDN spindle_geared                ** axes gearing enable from function block 
ST   GESTAX57.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL57(CLK:=GESTAX57.xSelected)
LD   RTRIG_AX_SEL57.Q
JMPCN NoSel57
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel57:

LD   GESTAX57.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq57

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq57:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN cmd_c_c1_gear_run
AND  GESTAX57.xSelected
ST   GESTAX57.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN cmd_c_c1_gear_run
AND  GESTAX57.xSelected
ST   GESTAX57.xJogMinus

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX57.xZeroForced          * Forzamento asse tarato

LD   GESTAX5.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   CMD_HOLDMOVING_CH5.7          ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
OR(
 LD   GESTAX34.xHoldMoving          * Richiesta blocco avanzamento
 AND  spindle_geared                ** axes gearing enable from function block 
)
ST   GESTAX57.xHoldMoving          * Richiesta blocco avanzamento

LD   GEAR_C_C1.xax_ENABLE
OR   start_alignment
AND  GESTAX57.xCloseLoop
ST   GESTAX57.xFromPlc

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX57.xUnlock 
ST   O_O_RESET_DRIVE_C1            ** C1 axis drive reset (disable electric shaft)

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX57.xEnFIR               * Abilita filtri FIR     
ST   GESTAX57.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX57.xDisLimiter   

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX57.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX57

LD   GESTAX57.yDriveNotEn
S    %PLCerr2.6                    * Axis 54, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX57

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX57:

LD  Pon                            ** PON
AND GESTAX34.xCloseLoop  * condition for real an simulation machine
AND GESTAX57.xCloseLoop  * condition for real an simulation machine
ST  appoggio                       ** Appoggio

CAL RTRIG_PON (CLK:=appoggio)      ** Appoggio

LD  Manual_alignment
AND appoggio
ST  Manual_align

CAL RTRIG_man_ali(CLK:=Manual_align)

LD   RTRIG_PON.Q
AND  (
LD   %ax34.ra4
SUB  %ax57.ra4
ABS
GT   200                 * threshold 1 dmm
AND (
 LD   %ax34.ra4
 SUB  %ax57.ra4
 ABS
 LE   %LSRCostK8
)
)
OR   RTRIG_man_ali.Q
AND  MACC_TARATA                   ** (gPlc0.9)Assi tarati
AND  %ax34.ra3.0                    * Asse fermo teorico
AND  %ax57.ra3.0                    * Asse fermo teorico
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    start_alignment

LD   start_alignment
ST   POS_AX57.xax_ENABLE

LDN  POS_AX57.xax_ENABLE
OR   TP_PRGOFF_GEAR.Q
OR   TOF_RESET_GEAR.Q
ST   POS_AX57.xax_CLEAR

LD   POS_AX57.xax_ENABLE
AND  POS_AX57.yax_READY
ANDN POS_AX57.yax_ENDOK
ANDN POS_AX57.yax_ENDERR
ST   POS_AX57.xax_START

LD   %ax34.ra4
ST   POS_AX57.xax_QUOTA             

LD   %pa9
ST   POS_AX57.xax_VEL

CAL  POS_AX57

LD   POS_AX57.yax_ENDOK
OR   POS_AX57.yax_ENDERR 
OR   I_I_EMERGENZA                 ** Machine OK (no EMERG.)
***OR   EMER_GEN                      ** (M0.10)Emergenza generale
R    start_alignment

LD   %ax34.ra4
SUB  %ax57.ra4
ABS
GT   %LSRCostK8
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN %ServiceMillePGM.1
S   %PLCerr0.31                    * Spindles not aligned

LD  Pul_Reset                      ** (gPlc0.3)Reset pushbutton
R   %PLCerr0.31                    * Spindles not aligned

NOAX57:

LD  Pul_Reset                      ** (gPlc0.3)Reset pushbutton
R   GearingC_C1Off

***
* Gearing C-C1
LD   CMD_C_C1_UNLOCK
EQ   1
OR   GearingC_C1Off
ST   appoggio

CAL  TRIG_GEAR_C_C1(CLK:=appoggio)

LDN  EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX57.xCloseLoop
ANDN POS_AX57.xax_ENABLE
ANDN ch5_in_ref                    ** channel 5 in ref 
ST   appoggio

LD   appoggio
ANDN CMD_C_C1_UNLOCK 
S    cmd_c_c1_gear_run

LD   spindle_geared                ** axes gearing enable from function block 
OR   CMD_C_C1_UNLOCK 
R    cmd_c_c1_gear_run

CAL  TON_GEAR_C_C1(IN=appoggio,PT=800) ** Appoggio

LD   TON_GEAR_C_C1.Q
ANDN ch0_in_ref                    ** channel 0 in ref
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
AND (
LDN  CMD_C_C1_UNLOCK               ** M200 Unlock gearing C-C1
ANDN GearingC_C1Off
)
ST   GEAR_C_C1.xax_ENABLE          * ------> CONDIZ.RICHIESTA DI AGGANCIO

LDN  GEAR_C_C1.xax_ENABLE
OR   TRIG_GEAR_C_C1.Q
OR   TP_PRGOFF_GEAR.Q
OR   TOF_RESET_GEAR.Q
ST   GEAR_C_C1.xax_CLEAR

LD   GEAR_C_C1.xax_ENABLE
AND  GEAR_C_C1.yax_READY
ANDN GEAR_C_C1.yax_ENDOK
ANDN GEAR_C_C1.yax_ENDERR
ST   GEAR_C_C1.xax_START

LD   34
ST   GEAR_C_C1.xax_MASTER

LD   1                             * Modalit?di inseguimente(VA BENE LASCIARE SEMPRE 1)
ST   GEAR_C_C1.xax_TRNUM
ST   GEAR_C_C1.xax_TRDEN

CAL  GEAR_C_C1

LD   GEAR_C_C1.yax_RUNNING
AND  GEAR_C_C1.xax_ENABLE
S    spindle_geared                ** axes gearing enable from function block 

LDN  GEAR_C_C1.xax_ENABLE
OR   GEAR_C_C1.yax_ENDERR
R    spindle_geared                ** axes gearing enable from function block 

LDN  spindle_geared                ** axes gearing enable from function block 
ST   FBK_C_C1_UNLOCK               ** M201 Feedback gearing C-C1

*******************************************************************************
*   C2 spindle axis (58)
*******************************************************************************
PATH %ax58
PATH %ax_lsref58

LD 3000             ** Special case for veichi drives
ST %ra82

***************************************
*   POWER ON (PON)
***************************************
LD   %pa3.31            * Simulato
ORN  %cc1.8             * Maschera assi associata al canale
OR(
LD   %nvel11            ** 1=Mechatrolink
EQ   1
AND  %ring.drv1.RDD_wStatus.4 * PON
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   3
)
OR(
LD   %nvel11            ** 3,4=CANopen, Ecat
EQ   4
)
OR   (
LD   I_I_READY_DRIVE_C2            ** Ready signal drive C1
AND  (
LD   %ax58.nvel11
EQ   0
)
)
ST   Pon_C2                        ** PON Axe C1

LD  %cn5.cc1.8           * Maschera assi associata al canale 0
JMPCN NOAX58
  
***                                                                
*   LIMIT SWITCH & REFERENCE SWITCH                                               
                                                            
LD   %lsrefmode
ST   AXLSREF58.x_REF_mode        * 0=use ref switch...                    
                                                                        
LD   %lsreflevel                  
ST   AXLSREF58.x_TYPE_LS         * (1=NC, 0=NO)                        
                                                                        
LD   I_I_FC_C2_NEG                 ** C1 minimumm limit switch
ST   AXLSREF58.x_MIN_LS          * Min Limit switch                       
                                                                        
LD   I_I_FC_C2_POS                 ** C1 maximun limit switch
ST   AXLSREF58.x_MAX_LS          * Max Limit switch                       
                                                                        
LD   I_I_INDEX_C2                  ** C1 Axis Homing Switch
ST   AXLSREF58.x_REF_S           * Reference switch                       
                                                                        
CAL  AXLSREF58                                                         
                                                                        
LD   AXLSREF58.y_MIN_LS          * Min Limit switch                       
ST   GESTAX58.xMinusLS           * Negative limit switch                           
                                                                        
LD   AXLSREF58.y_MAX_LS          * Max Limit switch                       
ST   GESTAX58.xPlusLS            * Positive limit switch                             
                                                                        
LD   AXLSREF58.y_REF_S           * Reference switch                       
ST   GESTAX58.xRefLS             * Reference                              
***                                           

LD   TON_ABIL.Q          * Abilitazione drives
ANDN TOF_MALARM.Q        * Assi in allarme
AND  Pon                           ** PON
ANDN CMD_C_C1_OPENLOOP.2           ** M204 Open loop (bit0=1 C, bit1=1 C1)
ST   GESTAX58.xCloseLoop

LD   GSTMAC.yChSelMask.5
AND  SEL_ASSE.yExtMask.8
ANDN spindle_geared_C2                ** axes gearing enable from function block 
ST   GESTAX58.xSelected

***************************************
* Change REF quota for ABS reference 
***************************************
CAL  RTRIG_AX_SEL58(CLK:=GESTAX58.xSelected)
LD   RTRIG_AX_SEL58.Q
JMPCN NoSel58
LD   ActualQtaAbsRef               ** Absolute homing quota
ST   QtaRefAbsSet                  ** Absolute homing quota setting
NoSel58:

LD   GESTAX58.xSelected
AND  %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
AND (
LD   ActualQtaAbsRef               ** Absolute homing quota
NE   QtaRefAbsSet                  ** Absolute homing quota setting
)
JMPCN NoEq58

LD   QtaRefAbsSet                  ** Absolute homing quota setting
ST   ActualQtaAbsRef               ** Absolute homing quota
NoEq58:
***************************************

LD   Pul_Jogp                      ** (gPlc0.4)jog+ pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN cmd_c_c2_gear_run
AND  GESTAX58.xSelected
ST   GESTAX58.xJogPlus

LD   Pul_Jogm                      ** (gPlc0.5)jog- pushbutton
AND  EnabJogRTCP                   ** Abilita Jog RTCP
ANDN cmd_c_c2_gear_run
AND  GESTAX58.xSelected
ST   GESTAX58.xJogMinus

LD   %nvel14.0                     * Se Vale 1 ?gestito "Encoder Assoluto" (Da Configura Asse)
ST   GESTAX58.xZeroForced          * Forzamento asse tarato

LD   GESTAX5.xHoldMoving           * Richiesta blocco avanzamento
OR   BlcAvX1_user                  ** M74.0 Blocco avanzamento asse X1 da user.plc
OR   AxesHeadNoZeroed              ** Assi Testa non riferiti
OR   CMD_HOLDMOVING_CH5.7          ** M203 Hold moving command axis CH5 (bit0=X, bit1=Y...)
OR(
 LD   GESTAX34.xHoldMoving          * Richiesta blocco avanzamento
 AND  spindle_geared_C2                ** axes gearing enable from function block 
)
ST   GESTAX58.xHoldMoving          * Richiesta blocco avanzamento

LD   GEAR_C_C2.xax_ENABLE
OR   start_alignment_C2
AND  GESTAX58.xCloseLoop
ST   GESTAX58.xFromPlc

LD   Res_Axes                      ** (gPlc25.1) reset axes disable electric shaft
ST   GESTAX58.xUnlock 
ST   O_O_RESET_DRIVE_C2            ** C2 axis drive reset (disable electric shaft)

LDN  ch5_in_ref                    ** channel 5 in ref 
ANDN EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   GESTAX58.xEnFIR               * Abilita filtri FIR     
ST   GESTAX58.xEnFrComp            ** Abilita friction compensation

LD   ALWAYS_ONE
ST   GESTAX58.xDisLimiter   

LD   %cn0.rc8.3            * ch0 in alarm 
OR   %cn3.rc8.3            * ch3 in alarm 
OR   EmerINC
ST   GESTAX58.xSetAlarm     ** Forzamento allarme asse 

CAL  GESTAX58

LD   GESTAX58.yDriveNotEn
S    %PLCerr2.16                    * Axis 55, drive not enable

LD   %pa9                * Velocit?massima asse
MUL  1000
DIV  60
ST   %ra50               * Limitazione velocita' massima interpolazione

LD   BSG_INC                       ** rg1.2 Selezione modo INC (inc.fissi)
JMPCN SVIX58

LD   %pa59               * Velocit?di Repos
MUL  1000
DIV  60
MUL  AxesOverride                  ** (gPlc16) feed degli assi (%)
DIV  100
ST   %ra50               * Limitazione velocita' massima interpolazione

SVIX58:

LD  Pon                            ** PON
AND GESTAX34.xCloseLoop  * condition for real an simulation machine
AND GESTAX58.xCloseLoop  * condition for real an simulation machine
ST  appoggio                       ** Appoggio

CAL RTRIG_PON_C2 (CLK:=appoggio)      ** Appoggio

LD  Manual_alignment
AND appoggio
ST  Manual_align

CAL RTRIG_man_ali_C2(CLK:=Manual_align)

LD   RTRIG_PON_C2.Q
AND  (
LD   %ax34.ra4
SUB  %ax58.ra4
ABS
GT   200                 * threshold 1 dmm
AND (
 LD   %ax34.ra4
 SUB  %ax58.ra4
 ABS
 LE   %LSRCostK8
)
)
OR   RTRIG_man_ali_C2.Q
AND  MACC_TARATA                   ** (gPlc0.9)Assi tarati
AND  %ax34.ra3.0                    * Asse fermo teorico
AND  %ax58.ra3.0                    * Asse fermo teorico
ANDN PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
S    start_alignment_C2

LD   start_alignment_C2
ST   POS_AX58.xax_ENABLE

LDN  POS_AX58.xax_ENABLE
OR   TP_PRGOFF_GEAR.Q
OR   TOF_RESET_GEAR.Q
ST   POS_AX58.xax_CLEAR

LD   POS_AX58.xax_ENABLE
AND  POS_AX58.yax_READY
ANDN POS_AX58.yax_ENDOK
ANDN POS_AX58.yax_ENDERR
ST   POS_AX58.xax_START

LD   %ax34.ra4
ST   POS_AX58.xax_QUOTA             

LD   %pa9
ST   POS_AX58.xax_VEL

CAL  POS_AX58

LD   POS_AX58.yax_ENDOK
OR   POS_AX58.yax_ENDERR 
OR   I_I_EMERGENZA                 ** Machine OK (no EMERG.)
***OR   EMER_GEN                      ** (M0.10)Emergenza generale
R    start_alignment_C2

LD   %ax34.ra4
SUB  %ax58.ra4
ABS
GT   %LSRCostK8
AND  PRGRUN_CN0                    ** M0.0 cn0.rc8.0  Programma in corso
ANDN %ServiceMillePGM.1
S   %PLCerr0.31                * Spindles not aligned

LD  Pul_Reset                      ** (gPlc0.3)Reset pushbutton
R   %PLCerr0.31                * Spindles not aligned

NOAX58:

LD  Pul_Reset                      ** (gPlc0.3)Reset pushbutton
R   GearingC_C1Off

***
* Gearing C-C2(GearingC_C1Off keeps same as C1)

LD   CMD_C_C2_UNLOCK
EQ   1
OR   GearingC_C1Off
ST   appoggio

CAL  TRIG_GEAR_C_C2(CLK:=appoggio)

LDN  EMER_GEN                      ** M0.10 Emergenza generale
AND  GESTAX58.xCloseLoop
ANDN POS_AX58.xax_ENABLE
ANDN ch5_in_ref                    ** channel 5 in ref 
ST   appoggio

LD   appoggio
ANDN CMD_C_C2_UNLOCK 
S    cmd_c_c2_gear_run

LD   spindle_geared_C2                ** axes gearing enable from function block 
OR   CMD_C_C2_UNLOCK 
R    cmd_c_c2_gear_run

CAL  TON_GEAR_C_C2(IN=appoggio,PT=800) ** Appoggio

LD   TON_GEAR_C_C2.Q
ANDN ch0_in_ref                    ** channel 0 in ref
ANDN BUP_JOGOPEN                   ** ui16.16 Selezione esecuzione JOG a loop aperto
AND (
LDN  CMD_C_C2_UNLOCK               ** M200 Unlock gearing C-C1
ANDN GearingC_C1Off
)
ST   GEAR_C_C2.xax_ENABLE          * ------> CONDIZ.RICHIESTA DI AGGANCIO

LDN  GEAR_C_C2.xax_ENABLE
OR   TRIG_GEAR_C_C2.Q
OR   TP_PRGOFF_GEAR.Q
OR   TOF_RESET_GEAR.Q
ST   GEAR_C_C2.xax_CLEAR

LD   GEAR_C_C2.xax_ENABLE
AND  GEAR_C_C2.yax_READY
ANDN GEAR_C_C2.yax_ENDOK
ANDN GEAR_C_C2.yax_ENDERR
ST   GEAR_C_C2.xax_START

LD   34
ST   GEAR_C_C2.xax_MASTER

LD   1                             * Modalit?di inseguimente(VA BENE LASCIARE SEMPRE 1)
ST   GEAR_C_C2.xax_TRNUM
ST   GEAR_C_C2.xax_TRDEN

CAL  GEAR_C_C2

LD   GEAR_C_C2.yax_RUNNING
AND  GEAR_C_C2.xax_ENABLE
S    spindle_geared_C2                ** axes gearing enable from function block 

LDN  GEAR_C_C2.xax_ENABLE
OR   GEAR_C_C2.yax_ENDERR
R    spindle_geared_C2                ** axes gearing enable from function block 

LDN  spindle_geared_C2                ** axes gearing enable from function block 
ST   FBK_C_C2_UNLOCK               ** M201 Feedback gearing C-C1

**************************
* Acknowledg funzioni "M"
**************************
*
LD   %PLCFLAGS.0
ST   CH5END.xWaitMFun

CAL  CH5END

LD   M30010_CN3                    ** M0.6 Sblocco Richiesta servizio (M10000_CN0 inizialavorazione)
ORN  HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata
OR(
LD   M30011_CN3                    ** M0.7 Sblocco Richiesta servizio (M10001_CN0 finelavorazione)
ORN  HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata
)
ST   Appoggio                      ** Appoggio

CAL  R_TRIG30000(CLK=Appoggio)     ** FronteUp Sblocco Richiesta servizio per Unit_1

LD   M30010_CN3                    ** M0.6 Sblocco Richiesta servizio (M10000_CN0 inizialavorazione)
ORN  HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata
S    UnlockCn0funzReq              ** Sblocco richiesta servizio da CN0 [(M10000 iniziolav.) / M10001(finelav.)]

LD   M30011_CN3                    ** M0.7 Sblocco Richiesta servizio (M10001_CN0 finelavorazione)
ORN  HEADZSEL                      ** (gPlc13.4)Testa 1 selezionata
ORN  PRGRUN_CN3                    ** M0.2 cn3.rc8.0  Programma in corso
R    UnlockCn0funzReq              ** Sblocco richiesta servizio da CN0 [(M10000 iniziolav.) / M10001(finelav.)]

*//============================================================================
*// CH6 CANALE COMPUTAZIONALE
*//============================================================================
CH6

*//============================================================================
*// CN7 Horizontal unloading supports channel 
*//============================================================================
LD   GSTMAC.yChSelMask.7
AND  SEL_ASSE.yExtMask.2
ST   Sel_Z_Ch7

LD   GSTMAC.yChSelMask.7
AND  SEL_ASSE.yExtMask.3
ST   Sel_U_Ch7

LD   GSTMAC.yChSelMask.7
AND  SEL_ASSE.yExtMask.4
ST   Sel_V_Ch7

LD   GSTMAC.yChSelMask.7
AND  SEL_ASSE.yExtMask.5
ST   Sel_W_Ch7

CH7

*//============================================================================
*// CN8 Vertical unloading supports channel 
*//============================================================================
LD   GSTMAC.yChSelMask.8
AND  SEL_ASSE.yExtMask.1
ST   Sel_Y_Ch8

LD   GSTMAC.yChSelMask.8
AND  SEL_ASSE.yExtMask.2
ST   Sel_Z_Ch8

LD   GSTMAC.yChSelMask.8
AND  SEL_ASSE.yExtMask.3
ST   Sel_U_Ch8

LD   GSTMAC.yChSelMask.8
AND  SEL_ASSE.yExtMask.4
ST   Sel_V_Ch8

LD   GSTMAC.yChSelMask.8
AND  SEL_ASSE.yExtMask.5
ST   Sel_W_Ch8

CH8

*//============================================================================
*// CN9 Loader Horizontal supports | Horizontal Following Clamps channel 
*//============================================================================
LD   GSTMAC.yChSelMask.9
AND  SEL_ASSE.yExtMask.1
ST   Sel_Y_Ch9

LD   GSTMAC.yChSelMask.9
AND  SEL_ASSE.yExtMask.2
ST   Sel_Z_Ch9

LD   GSTMAC.yChSelMask.9
AND  SEL_ASSE.yExtMask.3
ST   Sel_U_Ch9

LD   GSTMAC.yChSelMask.9
AND  SEL_ASSE.yExtMask.4
ST   Sel_V_Ch9

CH9

*******************************************************************************
*   MACCEND MANAGEMENT
*******************************************************************************
LD   ALWAYS_ONE                    ** PLCFLAGS.1  Flag sempre stato on
ST   MACCEND.xEnabOvsAuto

CAL  MACCEND

LD   MACCEND.yAllDriveEn           * all drives are enable
ST   AllDriveEnable                ** All drives are enabled

LD   MACCEND.yAxStopped   * Assi fermi
ST   AxStopSincGRP                 ** (gPlc13.11)Assi Fermi per sincronismo GRP[ax]

LD   MACCEND.yZeroed
OR   (
LD   AxesAreAbsolute               ** (LsPlc47.19) All axes are absolute
AND  (
LD   GESTAX9.yZeroed
ORN  %cn0.cc1.5
)
)
ST   MACC_TARATA                   ** (gPlc0.9)Assi tarati

LD   MACCEND.yInAlarm               * Macchina in allarme
ST   MACC_ALARM                    ** (gPlc0.10)Macchina in allarme

*******************************************************************************
* Gestione RTCP tuning
*******************************************************************************
CAL TRIG_RTCPT(CLK=EnabJogTuning)  ** Jog tuning RTCP (UI)

LD   TRIG_RTCPT.Q        * Jog tuning RTCP (UI)
OR   EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
AND(
LDN  TRIG_RTCPT.Q        * Jog tuning RTCP (UI)
ORN  EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
)
AND  ch3_in_jog                    ** channel 3 in jog
ANDN ch3_in_aut                    ** channel 3 in aut
ST   EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning

***************************************
* Gestione registri  JOG RTCP/MX
* Inserito anche rc86 di cn4 perch?
* nel blocco funzione AxColl si
* riprogrammano i fine corsa SW degli assi
* Y 2 Y1 associati
* rispettivamente a cn0 e cn4.
***************************************

* Abilita M_JCR_SUBSYSTEM_ENABLE in JTX_CMDREG
LD   MACC_TARATA                   ** (gPlc0.9)Assi tarati
ST   %cn3.rc86.0
ST   %cn4.rc86.0

* M_JCR_MXM_USE_CURRENT in JTX_CMDREG
* Mettere a 1 se si vuole traslare con la matrice attiva (es.: rotaz pezzo)
LD   %PLCFLAGS.0
ST   %cn3.rc86.16
ST   %cn4.rc86.16

* Disabilita M_JCR_ENABLE_ABS_LS in JTX_CMDREG
LD   %PLCFLAGS.0
ST   %cn3.rc86.2
ST   %cn4.rc86.2

* Trasformazione selezionata da programma
LD   JOG_ENABLE                    ** (gPlc0.22)Jog Enable
ST   %cn3.rc86.20        * Trasformazione selezionata da programma

* Trasformazione utente
LD   EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   %cn3.rc86.11        * Abilita la selezione utente degli assi del canale
ST   %cn3.rc86.21        * Trasformazione utente

* Trasformazione cinematica utente
LD   1
ST   %cn3.rc87           * JTX_USER_RTCP_TWI

LD   1
ST   %cn3.rc88           * JTX_USER_RTCP_THD

LD   1
ST   %cn3.rc89           * JTX_USER_RTCP_CED

* Assi per matrice/assi cartesiani RTCP utente
LD   0
ST   %cn3.rc96           * JTX_USER_CHANNEL_X_SELECT

LD   1
ST   %cn3.rc97           * JTX_USER_CHANNEL_Y_SELECT

LD   2
ST   %cn3.rc98           * JTX_USER_CHANNEL_Z_SELECT

***************************************
* Interblocco comandi Jog con Matrici attive
* Assi fermi (Interblocco MatJog)
***************************************
LDN  JOGrunning                    ** One axis moving in JOG
AND  MACCEND.yAxStopped  * Assi Fermi
ORN  GESTCH3.xMatJog     * Ab. matrici dinamiche per il JOG (provv.)
ST   Appoggio                      ** Appoggio

CAL  TON_NOJOG(IN=Appoggio,PT=500) ** Assi fermi (Interblocco MatJog)

* Abilita Jog RTCP and JOG
LD   TON_NOJOG.Q         * Assi fermi (Interblocco MatJog)
ORN  EnJogRtcp                     ** (gPlc0.18)Abilitazione Jog RTCP tuning
ST   EnabJogRTCP                   ** Abilita Jog RTCP

*******************************************************************************

LD   Pon_XT1                       ** PON Axe X_T1
AND  Pon_YT1                       ** PON Axe Y_T1
AND  Pon_ax30                      ** PON Axe U (30)
AND  Pon_ax31                      ** PON Axe V (30)
AND  Pon_ax31                      ** PON Axe W (30)
AND  Pon_ZT1                       ** PON Axe Y_T1
AND  Pon_WLens                     ** PON Axe W_Lens
AND  Pon_C                         ** PON Axe C  
AND  Pon_C1                        ** PON Axe C1
AND  Pon_A                         ** PON Axe A
AND  Pon_B                         ** PON Axe B
AND  Pon_Z_Follow                  ** PON Axe Z follower
**AND  Pon_PIPE                      ** PON Axe PIPE pipe axis
AND  Pon_UnSupp_71
AND  Pon_UnSupp_72
AND  Pon_UnSupp_73
AND  Pon_UnSupp_74
AND  Pon_UnSupp_75
AND  Pon_Z_Follow
AND  Pon_Z_Follow2
AND  Pon_Z_Follow3
AND  Pon_Z_Follow4
AND  Pon_UnSupp_81
AND  Pon_UnSupp_82
AND  Pon_UnSupp_83
AND  Pon_UnSupp_84
AND  Pon_UnSupp_85
AND  Pon_UnSupp_86
AND  Pon_UnSupp_87
AND  Pon_UnSupp_88
ST   Pon                           ** PON


* Uscita CNC OK
LD   GESTCH0.yChanReady  * Canale Ready
AND  GESTCH3.yChanReady  * Canale Ready
ST   O_O_CNC_OK                    ** CNC OK

***LD   LsrVrtcFcSoftware             ** (LsPlc0.31)Intervento Fc Sofware in lavorazione Laser
LD   %vrtc1.VrdwStatRegister1.2     * Upper mandatory position limit reached
OR   %vrtc1.VrdwStatRegister1.3     * Lower mandatory position limit reached
AND  %vrtc1.VrdwCtrlRegister0.1
S    %PLCerr0.10          * Fc Sofware Da VRTC in lavorazione

LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
R    %PLCerr0.10          * Fc Sofware Da VRTC in lavorazione

* Canale 0 in blocco

LD   %cn0.rc63           * Stato canale
GE   14
AND(
LD   %cn0.rc63           * Stato canale
LE   17
)
AND(
LD   %cn0.rc18           * Codice errore canale
EQ   0
)
ANDN %cn0.rc8.3          * rc8.3  Canale in allarme
ANDN %cn0.rc0.1          * rc0.1  Emergenza
ST   Appoggio                      ** Appoggio

CAL  TON_ERRC0(IN=Appoggio, PT=10000) ** Canale 0 in blocco

LD   TON_ERRC0.Q         * Canale 0 in blocco
ST   %PLCerr0.11         * Canale 0 in blocco

* Emergenza generale

LD   EMER_GEN                      ** M0.10 Emergenza generale
ST   %PLCerr1.0          * Emergenza generale

LD   I_I_EMERGENZA
S    %PLCerr1.1          * Laser safe activated,reset to continue
LD   Pul_Reset
R    %PLCerr1.1          * Laser safe activated,reset to continue

***************************
* PON per singolo asse    *
***************************
LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_ax30                      ** PON Axe U (30)
S    %PLCerr1.17

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_Mand             * PON Axe Mandrino
S    %PLCerr1.18          * Manca PON Axe Mandrino

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_XT1                       ** PON Axe X_T1
S    %PLCerr1.19          * Manca PON Axe X_T1

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_YT1                       ** PON Axe Y_T1
S    %PLCerr1.20          * Manca PON Axe Y_T1

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_ZT1                       ** PON Axe Y_T1
S    %PLCerr1.21          * Manca PON Axe Z_T1

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_WLens                     ** PON Axe W_Lens
S    %PLCerr1.28          * Power On Focal axis not present  

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_C                         ** PON Axe C  
S    %PLCerr1.29          * Power On C axis 

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_C1                        ** PON Axe C1
S    %PLCerr1.30          * Power On C1 axis  

*LD   TON_ABIL.Q           * Abilitazione drives
*ANDN Pon_PIPE             * PON Axe Pipe
*S    %PLCerr1.31          * Power On PIPE axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_Z_Follow            ** PON Axe X_T1
ST   %PLCerr2.13          * Power On Z follower axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_71
ST   %PLCerr3.0           * Power On Z follower axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_72
ST   %PLCerr3.1           * Power On Z follower axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_73
ST   %PLCerr3.2           * Power On Z follower axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_74
ST   %PLCerr3.3           * Power On Z follower axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_75
ST   %PLCerr3.4           * Power On Z follower axis

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_Z_Follow2
ST   %PLCerr3.10            

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_Z_Follow
ST   %PLCerr3.12         

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_Z_Follow3
ST   %PLCerr3.13    

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_81
ST   %PLCerr3.14         

LD   TON_ABIL.Q           * Abilitazione drives
ANDN Pon_UnSupp_82
ST   %PLCerr3.15        

* Assi in allarme

LD   MACCEND.yInAlarm
OR   %PLCerr1.17          * Manca PON Axe Gantry
OR   %PLCerr1.18          * Manca PON Axe Mandrino
OR   %PLCerr1.19          * Manca PON Axe X_T1
OR   %PLCerr1.20          * Manca PON Axe Y_T1
OR   %PLCerr1.21          * Manca PON Axe Z_T1
OR   %PLCerr1.28          * Power On Focal axis not present  
OR   %PLCerr1.29          * Power On C axis
OR   %PLCerr1.30          * Power On C1 axis
OR   %PLCerr1.31          * Power On PIPE axis
OR(
     LD   %PLCerr3
     NE   0
)
S    %PLCerr2.26          * Assi in allarme

LD   RESET_ALLARMI 		              ** M100.4  Cancellazione allarmi attiva
JMPCN STATE_CAN_ALLARM
LD   0
ST   %PLCerr1
ST   %PLCerr2
ST   %PLCerr3
STATE_CAN_ALLARM:

*==============================================================================
* W1-10 Copy Paste Management
*==============================================================================
* (1- 15) for page(4000-4014) 
LD     %Uipl.Page
SUB    3999
ST     CurrentWPage

LD     Btn_Cpy_W
ANDN   %cn0.rc8.0
ANDN   Aux_Req_CpyW
AND(
LD     CurrentWPage
GE     1
)
AND(
LD     CurrentWPage
LE     15
)
ST     appoggio
CAL    TP_CpyW(IN:=appoggio,PT:=1000)
LD     TP_CpyW.Q
ST     Aux_Req_CpyW

************************************************************
*                 Condizioni di emergenza                  *
************************************************************
LD   %PLCerr0
NE   0
OR (
LD   %PLCerr2
NE   0
)
OR   %PLCerr1.4                    * Manca aria compressa
OR   %PLCerr20.22
OR   %PLCerr20.23
OR   %PLCerr20.24
OR   %PLCerr20.25
OR   %PLCerr20.26
ORN  MACCHINA_OK                   ** M100.1  Macchina OK
ANDN Pul_Reset                     ** (gPlc0.3)Reset pushbutton
ST   EMER_GEN                      ** M0.10 Emergenza generale

LD   Pul_Reset                     ** (gPlc0.3)Reset pushbutton
JMPCN CANCELLA
LD   0
ST   %PLCerr0
ST   %PLCerr2
CANCELLA:

*******************************************************************************
*   Messaggi WARNING
*******************************************************************************

LD   TOF_RESET.Q         * Reset
ST   %PLCmsg0.0          * Reset in corso

***

LD   GESTAX0.xHoldMoving * Richiesta blocco avanzamento
OR   GESTAX1.xHoldMoving * Richiesta blocco avanzamento
OR   GESTAX6.xHoldMoving * Richiesta blocco avanzamento
OR   GESTAX27.xHoldMoving * Richiesta blocco avanzamento
OR   GESTAX28.xHoldMoving * Richiesta blocco avanzamento
OR   GESTAX30.xHoldMoving * Richiesta blocco avanzamento
ST   %PLCmsg0.1          ** block active feed X-Y

***

LD   PhotocellsOn                  ** (gPlc2.15)Photocells on
ST   %PLCmsg0.7          * Photocells msg

***

* Manuale in corso
LD   JOGrunning                    ** One axis moving in JOG
ST   %PLCmsg0.21         * Manuale in corso

* Taratura in corso
LD   REFrunning                    ** One axis moving in REF
ST   %PLCmsg0.22         * Taratura in corso
ST   REF_RUN                       ** M0.12 Taratura in corso

* Pos. incrementale in corso
LD   INCrunning                    ** One axis moving in INC
ST   %PLCmsg0.23         * Pos. incrementale in corso


* Assi non tarati
LDN  MACC_TARATA                   ** (gPlc0.9)Assi tarati
ST   %PLCmsg0.26         * Assi non tarati

* Ciclo automatico sospeso
LD   PRGSTOP_CN0                   ** (cn0.rc8.1)  Programma interrotto CN0
ST   %PLCmsg1.0          * Ciclo automatico sospeso

* Attesa start
LD   GESTCH0.yWaitMFun
ST   %PLCmsg1.16         * Attesa start

LDN  spindle_geared                ** axes gearing enable from function block 
ST   %PLCmsg1.15

********************************************************************************
* Pipe and Plane Machine


*******************************************************************************
* PLC user function to commands and output overwriting
*******************************************************************************
LASER_OUT

*******************************************************************************
*END  USER MANAGEMENT
*******************************************************************************
*Gestione Output e segnali ESA->USR
#ifndef SIM_IO
OUT_CONFIG
#endif

*Gestione logica finale USR
USR_END


*********************************************************************************
* XXX Risolve il problema RESET dopo RETRACE IND
*********************************************************************************
LDN  %cn0.rc64.25       ** rc64.25 Comando forward retrace
ANDN %cn0.rc64.26       ** rc64.26 Comando reverse retrace
ST   %cn0.rc64.27       ** svuota code comandi
*******************************************************************************

LDN  PRGRUN_CN0                                  ** M10.8 Program running on Channel 0
JMPCN END
LD -1
ST Unlock_Channels
END:

USERLOGGER

NO_EXECUTE_PLC:
END_FUNCTION
