#funcdec "FBSuppor.plc"
#funcdec "assi.plc"
#funcdec "DynMng.plc"
#funcdec "FBAux.plc"
#funcdec "SupForce.plc"
#funcdec "suppFB.plc"

VAR

* Axis support management

SUP1:               SUPPORT;
SUP2:               SUPPORT;
SUP3:               SUPPORT;
SUP4:               SUPPORT;

appoggio:              BOOL;
AdvOpen:              DWORD;

F_TRIG_RES_FOLL:     F_TRIG;  

#include "iof.inc"
#include "usrIof.inc"
#include "cnc.inc"
END_VAR

VAR_IN_OUT
#include "usrIol.inc"
#include "mem.inc"              
END_VAR

#include "Iol.inc"
#include "usrMem.inc"

FUNCTION LATERAL_SUPP

PATH  %cn9

*******************************************************
* Staggered avoidance position          
* NOTE: IF %cn9.cc1.0 NOT DEFINED, 
* THOSE AXES WILL BE HORIZONTAL RATHER THEN LATERAL
*******************************************************
LD   30000
ST   AdvOpen

LD   %ax30.ra0.0
JMPCN _closeloop_active
     LD   %ax30.ra92
     SUB  AdvOpen
     ST   PosUMis 
JMP _no_loop
_closeloop_active:       
     LD   %ax30.ra4
     ST   PosUMis     
_no_loop:

*******************************************************
*         FOLLOWIING SUPPORTS MANAGEMENT              *
*******************************************************
 *(gIso49.0) Enable blendSwitch PLC writes (Lunette da ISO)
CAL  F_TRIG_RES_FOLL (CLK:=PRGRUN_CN0)
LD   F_TRIG_RES_FOLL.Q
OR   Pul_Reset
R    EnWriteBlendSwitch2    
R    ParkAllLoadSuppCmd_LAT 

LDN  PRGRUN_CN0
JMPCN RSTBLEND
     LD   %PLCFLAGS.0
	 ST   EnWriteBlendSwitch2
RSTBLEND:

LD   ALWAYS_ONE
ST   SUP1.xUaxDir
ST   SUP2.xUaxDir
ST   SUP3.xUaxDir
ST   SUP4.xUaxDir

LD   Reset
OR   EMER_GEN
ST   SUP1.xReset 
ST   SUP2.xReset   
ST   SUP3.xReset   
ST   SUP4.xReset 

LD   EnWriteBlendSwitch2
ST   SUP1.xBlendSwitchEn
ST   SUP2.xBlendSwitchEn
ST   SUP3.xBlendSwitchEn
ST   SUP4.xBlendSwitchEn

LD   OptEnabAutoParkLoad
ST   SUP1.xEnabAutoDwn
ST   SUP2.xEnabAutoDwn
ST   SUP3.xEnabAutoDwn
ST   SUP4.xEnabAutoDwn

LD   IN_M700_M704
EQ   704
OR   M700_BLEND
AND  %cn0.rc8.0 
AND  O_O_Mobile_Spindle_Close
ANDN IN_M4_MODE
ST   SUP1.xEnabAutoUp
ST   SUP2.xEnabAutoUp
ST   SUP3.xEnabAutoUp
ST   SUP4.xEnabAutoUp

LD   IN_M700_M704
ST   SUP1.xM700_M704
ST   SUP2.xM700_M704
ST   SUP3.xM700_M704
ST   SUP4.xM700_M704

LD   IN_M4_MODE
JMPCN NOG1000PRK
     LD   0
     ST   SUP1.xM700_M704
     ST   SUP2.xM700_M704
     ST   SUP3.xM700_M704
     ST   SUP4.xM700_M704
NOG1000PRK:

LD   PosUMis  
ST   SUP1.xSupervisePos
ST   SUP2.xSupervisePos
ST   SUP3.xSupervisePos
ST   SUP4.xSupervisePos

LD   OptForceLatOpen
ANDN (
LD   %gIso26
EQ   1
AND  NoRoundLatOpen
)
JMPCN FORCEOPENLAT
LD   0
ST   SUP1.xSupervisePos
ST   SUP2.xSupervisePos
ST   SUP3.xSupervisePos
ST   SUP4.xSupervisePos
FORCEOPENLAT:

LD   ParkingPosLoad_lat
ST   SUP1.xParkingPos 
ST   SUP2.xParkingPos 
ST   SUP3.xParkingPos 
ST   SUP4.xParkingPos

LD   ThreshLoadingSupDown
ST   SUP1.xSuperviseOft 
ST   SUP2.xSuperviseOft 
ST   SUP3.xSuperviseOft 
ST   SUP4.xSuperviseOft 

LD   %ax30.ra3.0
ST   SUP1.xUaxStill
ST   SUP2.xUaxStill
ST   SUP3.xUaxStill
ST   SUP4.xUaxStill

* [lv, lat, ulv, uhor]=[0,1,2,3]
LD   1
ST   SUP1.xBlendId
ST   SUP2.xBlendId
ST   SUP3.xBlendId
ST   SUP4.xBlendId

* Support 1 
LD   %cn9.cc1.1
JMPCN no_support_1

PATH  %ax81

    LD   SUPPORT_1_Quota          
    ST   SUP1.xLimitSuppDwn   

    LD   ParkAllLoadSuppCmd_LAT
    OR   Fun_M725_Ch0   
    OR   ParkUn51Sup_ISO
    OR (
        LD   Force_Open_Center_1    
        * LD   VertSup1MovCompleted  
        ANDN %cn0.rc8.0
        AND  OptEnabAutoParkLoad
    )  
    ST   SUP1.xParkCmd              ** Only needs the rising edge

    CAL  SUP1

    LD   SUP1.yReqGrant
    ANDN ch9_in_ref
    ST   usrReqGrantSupLat1 

    LD   SUP1.yHoldMovSupp
    ANDN ch9_in_ref
    ST   HoldO1SuppLoad_LAT

    LD   SUP1.yHoldMovSuperv
    ANDN ch9_in_ref
    ANDN %cn9.cc1.0
    ST   HoldO1Ax30_HOR

no_support_1:

* Support 2 
LD   %cn9.cc1.2
JMPCN no_support_2

    PATH  %ax82

    LD   SUPPORT_2_Quota          
    ST   SUP2.xLimitSuppDwn   

    LD   ParkAllLoadSuppCmd_LAT
    OR   Fun_M725_Ch0   
    OR   ParkUn52Sup_ISO
    OR (
        LD   Force_Open_Center_2    
        * LD   VertSup2MovCompleted    
        ANDN %cn0.rc8.0
        AND  OptEnabAutoParkLoad
   )        
    ST   SUP2.xParkCmd

    CAL  SUP2

    LD   SUP2.yReqGrant
    ANDN ch9_in_ref
    ST   usrReqGrantSupLat2 

    LD   SUP2.yHoldMovSupp
    ANDN ch9_in_ref
    ST   HoldO2SuppLoad_LAT

    LD   SUP2.yHoldMovSuperv
    ANDN ch9_in_ref
    ANDN %cn9.cc1.0
    ST   HoldO2Ax30_HOR

no_support_2:

* Support 3 
LD   %cn9.cc1.3
JMPCN no_support_3

    PATH  %ax83

    LD   SUPPORT_3_Quota          
    ST   SUP3.xLimitSuppDwn   

    LD   ParkAllLoadSuppCmd_LAT
    OR   Fun_M725_Ch0   
    OR   ParkUn53Sup_ISO
    OR (
        LD   Force_Open_Center_3   
        * LD   VertSup3MovCompleted   
        ANDN %cn0.rc8.0
        AND  OptEnabAutoParkLoad
    )        
    ST   SUP3.xParkCmd

    CAL  SUP3

    LD   SUP3.yReqGrant
    ANDN ch9_in_ref
    ST   usrReqGrantSupLat3 

    LD   SUP3.yHoldMovSupp
    ANDN ch9_in_ref
    ST   HoldO3SuppLoad_LAT

    LD   SUP3.yHoldMovSuperv
    ANDN ch9_in_ref
    ANDN %cn9.cc1.0
    ST   HoldO3Ax30_HOR

no_support_3:

* Support 4 
LD   %cn9.cc1.4
JMPCN no_support_4

    PATH  %ax84

    LD   SUPPORT_4_Quota          
    ST   SUP4.xLimitSuppDwn   

    LD   ParkAllLoadSuppCmd_LAT
    OR   Fun_M725_Ch0   
    OR   ParkUn54Sup_ISO 
    OR (
        LD   Force_Open_Center_4    
        * LD   VertSup4MovCompleted    
        ANDN %cn0.rc8.0
        AND  OptEnabAutoParkLoad
    )        
    ST   SUP4.xParkCmd

    CAL  SUP4

    LD   SUP4.yReqGrant
    ANDN ch9_in_ref
    ST   usrReqGrantSupLat4

    LD   SUP4.yHoldMovSupp
    ANDN ch9_in_ref
    ST   HoldO4SuppLoad_LAT

    LD   SUP4.yHoldMovSuperv
    ANDN ch9_in_ref
    ANDN %cn9.cc1.0
    ST   HoldO4Ax30_HOR

no_support_4:

END_FUNCTION
