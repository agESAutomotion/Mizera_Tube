*******************************************************************************
*   suppFB.plc
*   ESAutomotion
*   LASER machine
*******************************************************************************
#funcdec "assi.plc"

*******************************************************************************
*   Support axis management (Cascading Blend Switch, G.D)
*******************************************************************************

VAR_IN_OUT
AxPos             AT  %ra4;      * Axis position
Go_Follow         AT  %rgau0;    * Force down by blending algh.
AddFollow         AT  %rgau1;    * Add value during following
BldState          AT  %rgau2;    * Blend switch output, (0->1000) (parking -> following)
ParkingSet        AT  %rgau3;    * Real time parking position (input)
AddFollow_Out     AT  %rgau4;    * Add value during following (output)
ParkingSet_Out    AT  %rgau5;    * Real time parking position (output)

filterT1Rate      AT  %rgdau0;   * Blendswitch filter rate [0.001/min]
addValueVel       AT  %rgdau1;   * Following add value speed [um/min]
addValueVelM      AT  %rgdau2;   * Parking speed [um/min]

ProbeThreshold    AT  %gIso30;   *(gIso30) probe threshold (G2292)

LatCenterToCloseRun AT %SUPPORTS_SYSTEM.values13.17;
END_VAR

FUNCTION_BLOCK    SUPPORT

VAR_INPUT
xUaxDir:          BOOL;          * 1 - if spindle move towards the 0 of the machine decreasing its quota  
                                 * 0 - if spindle move towards the 0 of the machine increasing its quota     
xHoldExem:        BOOL;          * Support Hold Exemption (in case of initialization)								 
xUaxStill:        BOOL;          * U axis is not moving (%ra3.0)
xReset:           BOOL;          * Emergency and Reset for PosAx
xEnabAutoDwn:     BOOL;          * Enable Auto Support Down
xEnabAutoUp:      BOOL;          * Enable Auto Support Up (Blend)
xBlendSwitchEn:   BOOL;          * blendswitch enable
xParkCmd:         BOOL;          * JOG / Auto Cmd to park
xSensSafePos:     BOOL;          * Safety sensor to be sure the support is parked
xEnSecFollow:     BOOL;          * Enable addvalue during support following 
xG520VSup:        BOOL;          * In G520 using V support unloading (Parking Target by ISO)
xEnCyComSup:      BOOL;          * Enable motor cylinder composite support
xEnBldFeed:       BOOL;          * Blend switch feedrate management

xSupervisePos:   DWORD;          * Position of the U axis -> start autodown
xSuperviseOft:   DWORD;          * Offset of position U to be closer to the support
xLimitSuppDwn:   DWORD;          * U axis limit position for support down
xParkingPos:     DWORD;          * Support Parking position 
xUnSupQta:       DWORD;          * Support Parking position to Unload
xAddFollPos:     DWORD;          * Added following targets
xCyComOft:       DWORD;          * Motor cylinder composite support blend switch offset
xM700_M704:      DWORD;          * M700, M704 executing
xBlendId:        DWORD;          * Blend ID for speed reset ([lv, lat, ulv, uhor]=[0,1,2,3])
xBldFeed:        DWORD;          * Blend switch feedrate % (0-100) 
END_VAR

VAR_OUTPUT
yReqGrant:        BOOL;
yHoldMovSupp:     BOOL;
yHoldMovSuperv:   BOOL; 
yAxInParkPos:     BOOL;
yCenterOpen:      BOOL; 
yCyComDwn:        BOOL;
yCyComOft:       DWORD;
END_VAR

VAR
resReq:           BOOL;
Req_Parking:      BOOL;
HoldSuppAxis:     BOOL;     ** Block support movement
HoldSuperviAxis:  BOOL;     ** Block spindle movement towards the support
appoggio:         BOOL; 
GoUpSuppAuto:     BOOL;   
M700Running:      BOOL;
M704Running:      BOOL;
CenterOpen:       BOOL;

OuterPlusOne:     DWORD;
Supervise_Oft:    DWORD;
ProbeThrsTmp:     DWORD;

TON_CLOSE_LOOP:    TON;
TRIG_PRKCON:      TRIG;
R_TRIG_BLD:     R_TRIG;
R_RES_REQ:      R_TRIG;
RTRIG_REQ_PARK: R_TRIG;
RTRIG_PARK:     R_TRIG;
RTRIG_RES_PARK: R_TRIG;
RTRIG_SAFE_DWN: R_TRIG;
RTRIG_REQ_UP:   R_TRIG;
RTRIG_RES_UP:   R_TRIG;
FTRIG_PRGRUN:   F_TRIG;
PosSupp:      AX_POSIZ;
END_VAR

LD   xM700_M704                                 ** M700, M704 executing
EQ   700
AND  %cn0.rc8.0                                 ** PRGRUN_CN0
ST   M700Running                                ** Park follower

LD   xM700_M704                                 ** M700, M704 executing
EQ   704
AND  %cn0.rc8.0
ST   M704Running                                ** Disable following

LD   ProbeThreshold
ST   ProbeThrsTmp

* Motor cylinder composite support type
LD   xEnCyComSup
JMPCN _CYCOMEN
	LD   xCyComOft
	ADD  ProbeThreshold
	ST   ProbeThrsTmp
_CYCOMEN:

* ProbeThreshold = Optimized_lift = OuterPlusOne + 20
LD   ProbeThrsTmp
SUB  19000           *19mm
ST   OuterPlusOne

LDN  xEnSecFollow                               ** Enable addvalue during support following
JMPCN CLRFOFFSET
	LD   0
	ST   AddFollow                             ** (%rgau1) Add value during following
CLRFOFFSET:

* Added offset within safely down distance
LD   xSuperviseOft                              ** Offset of position U to be closer to the support
ABS
ST   Supervise_Oft

LD   xSuperviseOft                              ** Offset of position U to be closer to the support
ABS
GT   200000         ** 200mm
JMPCN OUTRNGOFT
    LD   xSuperviseOft                          ** Offset of position U to be closer to the support
	ABS
	ST   Supervise_Oft
OUTRNGOFT: 

CAL  TON_CLOSE_LOOP (IN:=%ra0.0,PT:=300)

LDN  xUaxDir
JMPCN  no_check
** Spindle moves towards the 0 of the machine increasing its quota

    ** Supervisor / Spindle
    LD   xSupervisePos                          ** Position of the U axis -> start autodown
    GT   xLimitSuppDwn                          ** U axis limit position for support down
	AND  TON_CLOSE_LOOP.Q
	ANDN (
		LD   AxPos                              ** (%ra4) Support's position
		ADD  1000   ** 1mm
		GT   xParkingPos                        ** Support Parking position
		*AND  xSensSafePos                      ** Safety sensor to be sure the support is parked
	)
    ST   HoldSuperviAxis                        ** Block spindle movement towards the support
     
    LD   xSupervisePos                          ** Position of the U axis -> start autodown
    ADD  200000     ** 200mm                    ** safety
	SUB  Supervise_Oft
    GT   xLimitSuppDwn                          ** U axis limit position for support down
	AND  TON_CLOSE_LOOP.Q
    ANDN HoldSuperviAxis                        ** Block spindle movement towards the support
    ST   HoldSuppAxis                           ** Block support movement
	 
    LD   xSupervisePos                          ** Position of the U axis -> start autodown
    ADD  350000     ** 350mm
    GT   xLimitSuppDwn                          ** U axis limit position for support down
	ANDN (
		LD   AxPos                              ** (%ra4) Support's position
		ADD  1000   ** 1mm
		GT   xParkingPos                        ** Support Parking position
	)
    ANDN xUaxStill                              ** U axis is not moving (%ra3.0)
	OR (
		LDN  %ra3.0                          ** U axis is not moving (%ra3.0)
		ANDN LatCenterToCloseRun
	)
	ST   CenterOpen
no_check:

LD   xUaxDir
JMPCN  no_check1
** Spindle moves towards the 0 of the machine decreasing its quota

	* Supervisor
    LD   xSupervisePos                          ** Position of the U axis -> start autodown
    LT   xLimitSuppDwn                          ** U axis limit position for support down
	AND  TON_CLOSE_LOOP.Q
	ANDN (
		LD   AxPos                              ** (%ra4) Support's position
		ADD  1000   ** 1mm
		GT   xParkingPos                        ** Support Parking position
		*AND  xSensSafePos                      ** Safety sensor to be sure the support is parked
	)
    ST   HoldSuperviAxis                        ** Block spindle movement towards the support
     
    LD   xSupervisePos                          ** Position of the U axis -> start autodown
    SUB  200000     ** 200mm                    ** safety
	ADD  Supervise_Oft
    LT   xLimitSuppDwn                          ** U axis limit position for support down
	AND  TON_CLOSE_LOOP.Q
    ANDN HoldSuperviAxis                        ** Block spindle movement towards the support
    ST   HoldSuppAxis                           ** Block support movement
	 
    LD   xSupervisePos                          ** Position of the U axis -> start autodown
    SUB  350000     ** 350mm
    LT   xLimitSuppDwn                          ** U axis limit position for support down
	ANDN (
		LD   AxPos                              ** (%ra4) Support's position
		ADD  1000   ** 1mm
		GT   xParkingPos                       ** Support Parking position
	)
    ANDN xUaxStill                             ** U axis is not moving (%ra3.0)
	OR (
		LDN  %ra3.0                         ** U axis is not moving (%ra3.0)
		ANDN LatCenterToCloseRun
	)
	ST   CenterOpen
no_check1:

LD   HoldSuppAxis                               ** Block support movement
OR (
	LD   HoldSuperviAxis                        ** Block spindle movement towards the support
	ANDN HoldSuppAxis                           ** Block support movement
)
ANDN %cn0.rc8.0                                 ** PRGRUN_CN0
ST   appoggio
CAL  RTRIG_SAFE_DWN(CLK:=appoggio)

CAL  RTRIG_REQ_PARK (CLK:=HoldSuppAxis)         ** Block support movement
CAL  RTRIG_PARK (CLK:=xParkCmd)
LD   RTRIG_REQ_PARK.Q                           ** Support movement blocked
OR   RTRIG_SAFE_DWN.Q                           ** support or spindle movement blocked
AND  xEnabAutoDwn                               ** Enable Auto Support Down
OR   RTRIG_PARK.Q                               ** Command from HMI or ISO
ANDN %rc0.8                                     ** (CH5/9) in ref
AND  TON_CLOSE_LOOP.Q   
S    Req_Parking                                ** Parking request

*//============================================================================                 	  
*// JOG Mode Supports Parking		
*//============================================================================		  
LDN   %cn0.rc8.0                                ** PRGRUN_CN0
OR (
    LD    xParkCmd                              ** JOG / Auto Cmd to park
	OR    Req_Parking
    ANDN  xBlendSwitchEn                        ** blendswitch enable
    AND   %cn0.rc8.0                            ** PRGRUN_CN0
)                   
JMPCN Jog_management 
    LD   Req_Parking                            ** Parking request
	AND  TON_CLOSE_LOOP.Q  
    ANDN PosSupp.yax_ENDERR                     ** Comando terminato non correttamente
    ST   PosSupp.xax_ENABLE                     ** abilita FB

	CAL  TRIG_PRKCON(CLK=PosSupp.xax_ENABLE)
      
    LDN  PosSupp.xax_ENABLE                     ** abilita FB
    OR   TRIG_PRKCON.Q                          ** Rise/fall of PosSupp.xax_ENABLE
    ST   PosSupp.xax_CLEAR                      ** conferma fine comando
      
    LD   PosSupp.xax_ENABLE                     ** abilita FB
    AND  PosSupp.yax_READY                      ** FB pronto per START
    ANDN PosSupp.yax_ENDERR                     ** Comando terminato non correttamente
    ST   PosSupp.xax_START                      ** start richiesta azione
      
    LD   xParkingPos                            ** Support Parking position
    ST   PosSupp.xax_QUOTA                      ** Quota target um
      
    LD   %pa9                                   ** Maximum speed
    ST   PosSupp.xax_VEL                        ** Velocita' posizionamento (mm/min)
      
	CAL  PosSupp
      
    LD   PosSupp.yax_ENDOK                      ** Comando terminato correttamente
    OR   xReset                                 ** Emergency and Reset for PosAx
    ST   resReq                                 ** Reset request
      
	CAL  R_RES_REQ (CLK:=resReq)
	LD   R_RES_REQ.Q
    R    Req_Parking                            ** Parking request
Jog_management:

CAL   FTRIG_PRGRUN (CLK:=%cn0.rc8.0)            ** PRGRUN_CN0
LD    FTRIG_PRGRUN.Q
R     Req_Parking                               ** Parking request

*//============================================================================
*// Blendswitch Veladdval / Hold / Feedrate Condition initialization
*//============================================================================
LD   %BLEND_VEL.filTRate[xBlendId]
ST   filterT1Rate
   
LD   %BLEND_VEL.velAddVal[xBlendId]
ST   addValueVel 
ST   addValueVelM

LD   xEnBldFeed
JMPCN _BLENDFEED	  
	LD   xBldFeed
	MULDIV(M=filterT1Rate,D=100)
	ST   filterT1Rate
	
	LD   xBldFeed
	MULDIV(M=addValueVel,D=100)
	ST   addValueVel 
	ST   addValueVelM
_BLENDFEED:	  
	  
LD    %cn0.rc8.1  
AND   xBlendSwitchEn
JMPCN _BLENDHOLD
	LD   0
	ST   filterT1Rate
	ST   addValueVel 
	ST   addValueVelM
_BLENDHOLD:

*//============================================================================
*// Auto Mode Supports (Bi-State CMD)
*//============================================================================
LD    %cn0.rc8.0                                    ** PRGRUN_CN0
AND   xBlendSwitchEn                                ** blendswitch enable
AND   xEnabAutoDwn                                  ** Enable Auto Support Down
JMPCN AUTO_MANAGEMENT

    LD   HoldSuppAxis                               ** Block support movement
	OR (
		LD   HoldSuperviAxis                        ** Block spindle movement towards the support
		ANDN HoldSuppAxis                           ** Block support movement
	)
    OR   xParkCmd                                   ** JOG / Auto Cmd to park
    OR   Req_Parking                                ** Parking request
	JMPCN BLEND_PARK_STATUS             *++++++
		LD   0
        ST   Go_Follow                              ** (%rgau0) Force down by blending algh.
		LD   0
        ST   AddFollow                              ** (%rgau1) Add value during following
		   
		* Cascading Movement after bld = 0
        LD   BldState                               ** (%rgau2) Blend switch output, (0->1000) (parking -> following)
		EQ   0
        ANDN M700Running                            ** Park follower
        ANDN M704Running                            ** Disable following
        ANDN xG520VSup                              ** In G520 using V support unloading (Parking Target by ISO)
		JMPCN PARKLVL0
            LD   xParkingPos                        ** Support Parking position
            ST   ParkingSet                         ** (%rgau3) Real time parking position (input)
		PARKLVL0:
		   
		* V support leveling in G520 -> xG520VSup
		* At the moment, ParkingSet given by ISO only
        LD   BldState                               ** (%rgau2) Blend switch output, (0->1000) (parking -> following)
		EQ   0
        ANDN M700Running                            ** Park follower
        ANDN M704Running                            ** Disable following
        AND  xG520VSup                              ** In G520 using V support unloading (Parking Target by ISO)
		JMPCN PARKUNLOAD
            LD   xUnSupQta                          ** Support Parking position to Unload
            ST   ParkingSet                         ** (%rgau3) Real time parking position (input)
		PARKUNLOAD:
		   
		* During G0 and M700
        LD   BldState                               ** (%rgau2) Blend switch output, (0->1000) (parking -> following)
		EQ   0
        AND  M700Running                            ** Park follower
		AND (
			LD   OuterPlusOne
            ADD  200            ** 0.2mm
            GT   AxPos                              ** (%ra4) Support's position
		)	
		ANDN (
			LD   HoldSuperviAxis                    ** Block spindle movement towards the support
			ANDN HoldSuppAxis                       ** Block support movement
		)		   
		JMPCN PARKLVL1
			LD   ProbeThreshold                     ** (%gIso30) probe threshold (G2292)
			ST   ParkingSet                         ** (%rgau3) Real time parking position (input)
		PARKLVL1:
		   
		* In case of X moves causes hold in M700
        LD   HoldSuperviAxis                        ** Block spindle movement towards the support
        ANDN HoldSuppAxis                           ** Block support movement
        AND  M700Running                            ** Park follower
		JMPCN OPTPRKHOLD
            LD   xParkingPos                        ** Support Parking position
            ST   ParkingSet                         ** (%rgau3) Real time parking position (input)
		OPTPRKHOLD:
		   	   
	JMP  BLEND_SKIP_FOLLOW              *//////
	BLEND_PARK_STATUS:                  *++++++
	  
	LD   xEnabAutoUp                            ** Enable Auto Support Up (Blend)
	JMPCN STATUS_ENUP
		LD   OuterPlusOne
		ST   ParkingSet                         ** (%rgau3) Real time parking position (input)
	
		LD   1
		AND (
			LD   ParkingSet                     ** (%rgau3) Real time parking position (input)
			EQ   ParkingSet_Out                 ** (%rgau5) Real time parking position (output)
		)  
		ST   Go_Follow                          ** (%rgau0) Force down by blending algh.
	STATUS_ENUP:	
		   
	* Added value management following
	LD    BldState                               ** (%rgau2) Blend switch output, (0->1000) (parking -> following)
	EQ    1000
	AND   xEnSecFollow                           ** Enable addvalue during support following
	JMPCN STATUS_FOFFSET
		LD   xAddFollPos                        ** Added following targets
		ST   AddFollow                          ** (%rgau1) Add value during following
	STATUS_FOFFSET: 
		    
	BLEND_SKIP_FOLLOW:                  *//////
	  	  
    LD   0
    ST   Req_Parking                                ** Parking request

AUTO_MANAGEMENT:

LDN   %cn0.rc8.0                                    ** PRGRUN_CN0
JMPCN RSTBLEND
	LD    0
    ST    Go_Follow                                 ** (%rgau0) Force down by blending algh.
RSTBLEND:

*//============================================================================
*// Output
*//============================================================================
LD    AxPos                             ** (%ra4) Support's position
SUB   xParkingPos                       ** Support Parking position
ABS   
LT    1000              ** 1mm
ST    yAxInParkPos
	  
LD    Req_Parking
ANDN  %cn0.rc8.0                        ** PRGRUN_CN0
OR (
	LD    xParkCmd                      ** JOG / Auto Cmd to park
	OR    Req_Parking                   ** Parking request
	ANDN  xBlendSwitchEn                ** blendswitch enable
	AND   %cn0.rc8.0                    ** PRGRUN_CN0
)   
AND   TON_CLOSE_LOOP.Q
ANDN (
	LD    xHoldExem
	ANDN  xBlendSwitchEn 
	AND   %cn0.rc8.0   
)
ST    yReqGrant
	  
LD    HoldSuppAxis
ANDN (
	LD    xHoldExem
	ANDN  xBlendSwitchEn 
	AND   %cn0.rc8.0   
)
ANDN  yReqGrant
OR (
    LD    %cn0.rc9                      ** Registro funzioni M canale 0
	EQ    30
    AND   %cn0.rc8.4                    ** Strobe funzioni M canale 0
)
ST    yHoldMovSupp
	  
LD    HoldSuperviAxis                   ** Block spindle movement towards the support
ST    yHoldMovSuperv

LD    CenterOpen
OR    xM700_M704                        ** M700, M704 executing
ST    yCenterOpen

LD    xCyComOft
EQ    0
AND   xEnCyComSup   
ST    yCyComDwn

LD    0
ST    yCyComOft

LD   xEnCyComSup
JMPCN _CYCOMENOFT
	LD   xCyComOft
	ST   yCyComOft
_CYCOMENOFT:

END_FUNCTION_BLOCK